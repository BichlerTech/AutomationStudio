/*
 * generated by Xtext
 */
package com.bichler.iec.formatting

import com.bichler.iec.services.IecGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig

// import com.google.inject.Inject;
// import com.bichler.iec.services.IecGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class IecFormatter extends AbstractDeclarativeFormatter {

	@Inject extension IecGrammarAccess
	
	override protected void configureFormatting(FormattingConfig c) {
		c.setLinewrap(1).after(functionBlockDeclarationAccess.nameAssignment_1);
		c.setLinewrap(1).before(functionBlockDeclarationAccess.END_FUNCTION_BLOCKKeyword_4);
		c.setLinewrap(2).after(functionBlockDeclarationAccess.END_FUNCTION_BLOCKKeyword_4);
		
		c.setLinewrap(1).after(functionDeclarationAccess.typeAssignment_3);
		c.setLinewrap(1).before(functionDeclarationAccess.END_FUNCTIONKeyword_6);
		c.setLinewrap(2).after(functionDeclarationAccess.END_FUNCTIONKeyword_6);
		
		c.setLinewrap(1).after(inputDeclarationsAccess.VAR_INPUTKeyword_0);
		c.setLinewrap(1).after(inputDeclarationsAccess.END_VARKeyword_5);
		c.setLinewrap(1).after(inputDeclarationsAccess.EOLTerminalRuleCall_3);
		c.setLinewrap(1).after(inputDeclarationsAccess.EOLTerminalRuleCall_4_1);
		
		c.setLinewrap(1).after(outputDeclarationsAccess.VAR_OUTPUTKeyword_0);
		c.setLinewrap(1).after(outputDeclarationsAccess.END_VARKeyword_5);
		c.setLinewrap(1).after(outputDeclarationsAccess.EOLTerminalRuleCall_3);
		c.setLinewrap(1).after(outputDeclarationsAccess.EOLTerminalRuleCall_4_1);
		
		c.setLinewrap(1).after(inputOutputDeclarationsAccess.VAR_IN_OUTKeyword_0);
		c.setLinewrap(1).after(inputOutputDeclarationsAccess.END_VARKeyword_4);
		c.setLinewrap(1).after(inputOutputDeclarationsAccess.EOLTerminalRuleCall_2);
		c.setLinewrap(1).after(inputOutputDeclarationsAccess.EOLTerminalRuleCall_3_1);
		
		c.setLinewrap(1).after(statementListAccess.EOLTerminalRuleCall_1);
		c.setLinewrap(1).after(statementListAccess.EOLTerminalRuleCall_2_1);
		
		c.setLinewrap(1).after(ML_COMMENTRule);
		
		c.setIndentationIncrement.after(functionBlockDeclarationAccess.nameAssignment_1)
		c.setIndentationDecrement.before(functionBlockDeclarationAccess.END_FUNCTION_BLOCKKeyword_4)
		
		c.setIndentationIncrement.after(inputDeclarationsAccess.VAR_INPUTKeyword_0)
		c.setIndentationDecrement.before(inputDeclarationsAccess.END_VARKeyword_5)
		
		c.setIndentationIncrement.after(outputDeclarationsAccess.VAR_OUTPUTKeyword_0)
		c.setIndentationDecrement.before(outputDeclarationsAccess.END_VARKeyword_5)
		
		c.setIndentationIncrement.after(inputOutputDeclarationsAccess.VAR_IN_OUTKeyword_0)
		c.setIndentationDecrement.before(inputOutputDeclarationsAccess.END_VARKeyword_4)
	}
}
