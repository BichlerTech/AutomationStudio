/*
 * generated by Xtext
 */
package com.bichler.iec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class IecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Model");
		private final Assignment cModelElementAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModelElementModelElementParserRuleCall_0 = (RuleCall)cModelElementAssignment.eContents().get(0);
		
		//Model:
		//	modelElement+=ModelElement*;
		@Override public ParserRule getRule() { return rule; }

		//modelElement+=ModelElement*
		public Assignment getModelElementAssignment() { return cModelElementAssignment; }

		//ModelElement
		public RuleCall getModelElementModelElementParserRuleCall_0() { return cModelElementModelElementParserRuleCall_0; }
	}

	public class ModelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ModelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLibraryElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibraryElementDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ModelElement:
		//	LibraryElement | LibraryElementDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//LibraryElement | LibraryElementDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//LibraryElement
		public RuleCall getLibraryElementParserRuleCall_0() { return cLibraryElementParserRuleCall_0; }

		//LibraryElementDeclaration
		public RuleCall getLibraryElementDeclarationParserRuleCall_1() { return cLibraryElementDeclarationParserRuleCall_1; }
	}

	public class LibraryElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.LibraryElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////library_element_name ::= data_type_name | function_name | function_block_type_name |program_type_name
		////| resource_type_name | configuration_name
		//LibraryElement:
		//	DataType | FunctionDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//DataType | FunctionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataType
		public RuleCall getDataTypeParserRuleCall_0() { return cDataTypeParserRuleCall_0; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_1() { return cFunctionDeclarationParserRuleCall_1; }
	}

	public class LibraryElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.LibraryElementDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionBlockDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProgramDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConfigurationDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cResourceDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////library_element_declaration ::= data_type_declaration
		////| function_declaration | function_block_declaration | program_declaration | configuration_declaration
		//LibraryElementDeclaration:
		//	DataTypeDeclaration | FunctionBlockDeclaration | ProgramDeclaration | ConfigurationDeclaration | ResourceDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//DataTypeDeclaration | FunctionBlockDeclaration | ProgramDeclaration | ConfigurationDeclaration | ResourceDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeDeclaration
		public RuleCall getDataTypeDeclarationParserRuleCall_0() { return cDataTypeDeclarationParserRuleCall_0; }

		//FunctionBlockDeclaration
		public RuleCall getFunctionBlockDeclarationParserRuleCall_1() { return cFunctionBlockDeclarationParserRuleCall_1; }

		//ProgramDeclaration
		public RuleCall getProgramDeclarationParserRuleCall_2() { return cProgramDeclarationParserRuleCall_2; }

		//ConfigurationDeclaration
		public RuleCall getConfigurationDeclarationParserRuleCall_3() { return cConfigurationDeclarationParserRuleCall_3; }

		//ResourceDeclaration
		public RuleCall getResourceDeclarationParserRuleCall_4() { return cResourceDeclarationParserRuleCall_4; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonGenericTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGenericTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* Types */ // =====================================================================================================================
		//DataType:
		//	NonGenericType | GenericType;
		@Override public ParserRule getRule() { return rule; }

		//NonGenericType | GenericType
		public Alternatives getAlternatives() { return cAlternatives; }

		//NonGenericType
		public RuleCall getNonGenericTypeParserRuleCall_0() { return cNonGenericTypeParserRuleCall_0; }

		//GenericType
		public RuleCall getGenericTypeParserRuleCall_1() { return cGenericTypeParserRuleCall_1; }
	}

	public class NonGenericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.NonGenericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElementaryTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDerivedTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonGenericType:
		//	ElementaryType | DerivedType;
		@Override public ParserRule getRule() { return rule; }

		//ElementaryType | DerivedType
		public Alternatives getAlternatives() { return cAlternatives; }

		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0() { return cElementaryTypeParserRuleCall_0; }

		//DerivedType
		public RuleCall getDerivedTypeParserRuleCall_1() { return cDerivedTypeParserRuleCall_1; }
	}

	public class ElementaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ElementaryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDateTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBitStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeNameWSTRINGKeyword_4_0 = (Keyword)cTypeNameAssignment_4.eContents().get(0);
		private final Assignment cTypeNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cTypeNameTIMEKeyword_5_0 = (Keyword)cTypeNameAssignment_5.eContents().get(0);
		
		//ElementaryType:
		//	NumericType | DateType | BitStringType | StringType | typeName='WSTRING' | typeName='TIME';
		@Override public ParserRule getRule() { return rule; }

		//NumericType | DateType | BitStringType | StringType | typeName='WSTRING' | typeName='TIME'
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericType
		public RuleCall getNumericTypeParserRuleCall_0() { return cNumericTypeParserRuleCall_0; }

		//DateType
		public RuleCall getDateTypeParserRuleCall_1() { return cDateTypeParserRuleCall_1; }

		//BitStringType
		public RuleCall getBitStringTypeParserRuleCall_2() { return cBitStringTypeParserRuleCall_2; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_3() { return cStringTypeParserRuleCall_3; }

		//typeName='WSTRING'
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }

		//'WSTRING'
		public Keyword getTypeNameWSTRINGKeyword_4_0() { return cTypeNameWSTRINGKeyword_4_0; }

		//typeName='TIME'
		public Assignment getTypeNameAssignment_5() { return cTypeNameAssignment_5; }

		//'TIME'
		public Keyword getTypeNameTIMEKeyword_5_0() { return cTypeNameTIMEKeyword_5_0; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSTRINGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType}
		//	'STRING';
		@Override public ParserRule getRule() { return rule; }

		//{StringType} 'STRING'
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//'STRING'
		public Keyword getSTRINGKeyword_1() { return cSTRINGKeyword_1; }
	}

	public class NumericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.NumericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericType:
		//	IntegerType | RealType;
		@Override public ParserRule getRule() { return rule; }

		//IntegerType | RealType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }

		//RealType
		public RuleCall getRealTypeParserRuleCall_1() { return cRealTypeParserRuleCall_1; }
	}

	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.IntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignedIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlainIntegerTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedIntegerTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntegerType:
		//	SignedIntegerType | PlainIntegerType | UnsignedIntegerType;
		@Override public ParserRule getRule() { return rule; }

		//SignedIntegerType | PlainIntegerType | UnsignedIntegerType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignedIntegerType
		public RuleCall getSignedIntegerTypeParserRuleCall_0() { return cSignedIntegerTypeParserRuleCall_0; }

		//PlainIntegerType
		public RuleCall getPlainIntegerTypeParserRuleCall_1() { return cPlainIntegerTypeParserRuleCall_1; }

		//UnsignedIntegerType
		public RuleCall getUnsignedIntegerTypeParserRuleCall_2() { return cUnsignedIntegerTypeParserRuleCall_2; }
	}

	public class SignedIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SignedIntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameSINTKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameDINTKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameLINTKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		
		//SignedIntegerType:
		//	typeName='SINT' | typeName='DINT' | typeName='LINT';
		@Override public ParserRule getRule() { return rule; }

		//typeName='SINT' | typeName='DINT' | typeName='LINT'
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeName='SINT'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//'SINT'
		public Keyword getTypeNameSINTKeyword_0_0() { return cTypeNameSINTKeyword_0_0; }

		//// typeName = 'INT' | 
		//typeName='DINT'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//'DINT'
		public Keyword getTypeNameDINTKeyword_1_0() { return cTypeNameDINTKeyword_1_0; }

		//typeName='LINT'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }

		//'LINT'
		public Keyword getTypeNameLINTKeyword_2_0() { return cTypeNameLINTKeyword_2_0; }
	}

	public class PlainIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.PlainIntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignedIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cINTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PlainIntegerType:
		//	{SignedIntegerType}
		//	'INT';
		@Override public ParserRule getRule() { return rule; }

		//{SignedIntegerType} 'INT'
		public Group getGroup() { return cGroup; }

		//{SignedIntegerType}
		public Action getSignedIntegerTypeAction_0() { return cSignedIntegerTypeAction_0; }

		//'INT'
		public Keyword getINTKeyword_1() { return cINTKeyword_1; }
	}

	public class UnsignedIntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.UnsignedIntegerType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameUSINTKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameUINTKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameUDINTKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		private final Assignment cTypeNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeNameULINTKeyword_3_0 = (Keyword)cTypeNameAssignment_3.eContents().get(0);
		
		//UnsignedIntegerType:
		//	typeName='USINT' | typeName='UINT' | typeName='UDINT' | typeName='ULINT';
		@Override public ParserRule getRule() { return rule; }

		//typeName='USINT' | typeName='UINT' | typeName='UDINT' | typeName='ULINT'
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeName='USINT'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//'USINT'
		public Keyword getTypeNameUSINTKeyword_0_0() { return cTypeNameUSINTKeyword_0_0; }

		//typeName='UINT'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//'UINT'
		public Keyword getTypeNameUINTKeyword_1_0() { return cTypeNameUINTKeyword_1_0; }

		//typeName='UDINT'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }

		//'UDINT'
		public Keyword getTypeNameUDINTKeyword_2_0() { return cTypeNameUDINTKeyword_2_0; }

		//typeName='ULINT'
		public Assignment getTypeNameAssignment_3() { return cTypeNameAssignment_3; }

		//'ULINT'
		public Keyword getTypeNameULINTKeyword_3_0() { return cTypeNameULINTKeyword_3_0; }
	}

	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.RealType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameREALKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameLREALKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		
		//RealType:
		//	typeName='REAL' | typeName='LREAL';
		@Override public ParserRule getRule() { return rule; }

		//typeName='REAL' | typeName='LREAL'
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeName='REAL'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//'REAL'
		public Keyword getTypeNameREALKeyword_0_0() { return cTypeNameREALKeyword_0_0; }

		//typeName='LREAL'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//'LREAL'
		public Keyword getTypeNameLREALKeyword_1_0() { return cTypeNameLREALKeyword_1_0; }
	}

	public class DateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameDATEKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameTIME_OF_DAYKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameTODKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		private final Assignment cTypeNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeNameDATE_AND_TIMEKeyword_3_0 = (Keyword)cTypeNameAssignment_3.eContents().get(0);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeNameDTKeyword_4_0 = (Keyword)cTypeNameAssignment_4.eContents().get(0);
		
		//DateType:
		//	typeName='DATE' | typeName='TIME_OF_DAY' | typeName='TOD' | typeName='DATE_AND_TIME' | typeName='DT';
		@Override public ParserRule getRule() { return rule; }

		//typeName='DATE' | typeName='TIME_OF_DAY' | typeName='TOD' | typeName='DATE_AND_TIME' | typeName='DT'
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeName='DATE'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//'DATE'
		public Keyword getTypeNameDATEKeyword_0_0() { return cTypeNameDATEKeyword_0_0; }

		//typeName='TIME_OF_DAY'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//'TIME_OF_DAY'
		public Keyword getTypeNameTIME_OF_DAYKeyword_1_0() { return cTypeNameTIME_OF_DAYKeyword_1_0; }

		//typeName='TOD'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }

		//'TOD'
		public Keyword getTypeNameTODKeyword_2_0() { return cTypeNameTODKeyword_2_0; }

		//typeName='DATE_AND_TIME'
		public Assignment getTypeNameAssignment_3() { return cTypeNameAssignment_3; }

		//'DATE_AND_TIME'
		public Keyword getTypeNameDATE_AND_TIMEKeyword_3_0() { return cTypeNameDATE_AND_TIMEKeyword_3_0; }

		//typeName='DT'
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }

		//'DT'
		public Keyword getTypeNameDTKeyword_4_0() { return cTypeNameDTKeyword_4_0; }
	}

	public class BitStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.BitStringType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameBOOLKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameBYTEKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameWORDKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		private final Assignment cTypeNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeNameDWORDKeyword_3_0 = (Keyword)cTypeNameAssignment_3.eContents().get(0);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeNameLWORDKeyword_4_0 = (Keyword)cTypeNameAssignment_4.eContents().get(0);
		
		//BitStringType:
		//	typeName='BOOL' | typeName='BYTE' | typeName='WORD' | typeName='DWORD' | typeName='LWORD';
		@Override public ParserRule getRule() { return rule; }

		//typeName='BOOL' | typeName='BYTE' | typeName='WORD' | typeName='DWORD' | typeName='LWORD'
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeName='BOOL'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//'BOOL'
		public Keyword getTypeNameBOOLKeyword_0_0() { return cTypeNameBOOLKeyword_0_0; }

		//typeName='BYTE'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//'BYTE'
		public Keyword getTypeNameBYTEKeyword_1_0() { return cTypeNameBYTEKeyword_1_0; }

		//typeName='WORD'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }

		//'WORD'
		public Keyword getTypeNameWORDKeyword_2_0() { return cTypeNameWORDKeyword_2_0; }

		//typeName='DWORD'
		public Assignment getTypeNameAssignment_3() { return cTypeNameAssignment_3; }

		//'DWORD'
		public Keyword getTypeNameDWORDKeyword_3_0() { return cTypeNameDWORDKeyword_3_0; }

		//typeName='LWORD'
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }

		//'LWORD'
		public Keyword getTypeNameLWORDKeyword_4_0() { return cTypeNameLWORDKeyword_4_0; }
	}

	public class GenericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.GenericType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeNameANYKeyword_0_0 = (Keyword)cTypeNameAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeNameANY_DERIVEDKeyword_1_0 = (Keyword)cTypeNameAssignment_1.eContents().get(0);
		private final Assignment cTypeNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeNameANY_ELEMENTARYKeyword_2_0 = (Keyword)cTypeNameAssignment_2.eContents().get(0);
		private final Assignment cTypeNameAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeNameANY_MAGNITUDEKeyword_3_0 = (Keyword)cTypeNameAssignment_3.eContents().get(0);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeNameANY_NUMKeyword_4_0 = (Keyword)cTypeNameAssignment_4.eContents().get(0);
		private final Assignment cTypeNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cTypeNameANY_REALKeyword_5_0 = (Keyword)cTypeNameAssignment_5.eContents().get(0);
		private final Assignment cTypeNameAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cTypeNameANY_INTKeyword_6_0 = (Keyword)cTypeNameAssignment_6.eContents().get(0);
		private final Assignment cTypeNameAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cTypeNameANY_BITKeyword_7_0 = (Keyword)cTypeNameAssignment_7.eContents().get(0);
		private final Assignment cTypeNameAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cTypeNameANY_STRINGKeyword_8_0 = (Keyword)cTypeNameAssignment_8.eContents().get(0);
		private final Assignment cTypeNameAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cTypeNameANY_DATEKeyword_9_0 = (Keyword)cTypeNameAssignment_9.eContents().get(0);
		
		//GenericType:
		//	typeName='ANY' | typeName='ANY_DERIVED' | typeName='ANY_ELEMENTARY' | typeName='ANY_MAGNITUDE' | typeName='ANY_NUM' |
		//	typeName='ANY_REAL' | typeName='ANY_INT' | typeName='ANY_BIT' | typeName='ANY_STRING' | typeName='ANY_DATE';
		@Override public ParserRule getRule() { return rule; }

		//typeName='ANY' | typeName='ANY_DERIVED' | typeName='ANY_ELEMENTARY' | typeName='ANY_MAGNITUDE' | typeName='ANY_NUM' |
		//typeName='ANY_REAL' | typeName='ANY_INT' | typeName='ANY_BIT' | typeName='ANY_STRING' | typeName='ANY_DATE'
		public Alternatives getAlternatives() { return cAlternatives; }

		//typeName='ANY'
		public Assignment getTypeNameAssignment_0() { return cTypeNameAssignment_0; }

		//'ANY'
		public Keyword getTypeNameANYKeyword_0_0() { return cTypeNameANYKeyword_0_0; }

		//typeName='ANY_DERIVED'
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//'ANY_DERIVED'
		public Keyword getTypeNameANY_DERIVEDKeyword_1_0() { return cTypeNameANY_DERIVEDKeyword_1_0; }

		//typeName='ANY_ELEMENTARY'
		public Assignment getTypeNameAssignment_2() { return cTypeNameAssignment_2; }

		//'ANY_ELEMENTARY'
		public Keyword getTypeNameANY_ELEMENTARYKeyword_2_0() { return cTypeNameANY_ELEMENTARYKeyword_2_0; }

		//typeName='ANY_MAGNITUDE'
		public Assignment getTypeNameAssignment_3() { return cTypeNameAssignment_3; }

		//'ANY_MAGNITUDE'
		public Keyword getTypeNameANY_MAGNITUDEKeyword_3_0() { return cTypeNameANY_MAGNITUDEKeyword_3_0; }

		//typeName='ANY_NUM'
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }

		//'ANY_NUM'
		public Keyword getTypeNameANY_NUMKeyword_4_0() { return cTypeNameANY_NUMKeyword_4_0; }

		//typeName='ANY_REAL'
		public Assignment getTypeNameAssignment_5() { return cTypeNameAssignment_5; }

		//'ANY_REAL'
		public Keyword getTypeNameANY_REALKeyword_5_0() { return cTypeNameANY_REALKeyword_5_0; }

		//typeName='ANY_INT'
		public Assignment getTypeNameAssignment_6() { return cTypeNameAssignment_6; }

		//'ANY_INT'
		public Keyword getTypeNameANY_INTKeyword_6_0() { return cTypeNameANY_INTKeyword_6_0; }

		//typeName='ANY_BIT'
		public Assignment getTypeNameAssignment_7() { return cTypeNameAssignment_7; }

		//'ANY_BIT'
		public Keyword getTypeNameANY_BITKeyword_7_0() { return cTypeNameANY_BITKeyword_7_0; }

		//typeName='ANY_STRING'
		public Assignment getTypeNameAssignment_8() { return cTypeNameAssignment_8; }

		//'ANY_STRING'
		public Keyword getTypeNameANY_STRINGKeyword_8_0() { return cTypeNameANY_STRINGKeyword_8_0; }

		//typeName='ANY_DATE'
		public Assignment getTypeNameAssignment_9() { return cTypeNameAssignment_9; }

		//'ANY_DATE'
		public Keyword getTypeNameANY_DATEKeyword_9_0() { return cTypeNameANY_DATEKeyword_9_0; }
	}

	public class DerivedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DerivedType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DerivedType:
		//	name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0() { return cNameIdentifierParserRuleCall_0; }
	}

	public class DataTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DataTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTYPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeDeclarationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDeclarationTypeDeclarationParserRuleCall_3_0 = (RuleCall)cTypeDeclarationAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTypeDeclarationAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTypeDeclarationTypeDeclarationParserRuleCall_5_0_0 = (RuleCall)cTypeDeclarationAssignment_5_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cEND_TYPEKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//DataTypeDeclaration:
		//	'TYPE' name=Identifier ':'
		//	typeDeclaration+=TypeDeclaration EOL (typeDeclaration+=TypeDeclaration EOL)*
		//	'END_TYPE';
		@Override public ParserRule getRule() { return rule; }

		//'TYPE' name=Identifier ':' typeDeclaration+=TypeDeclaration EOL (typeDeclaration+=TypeDeclaration EOL)* 'END_TYPE'
		public Group getGroup() { return cGroup; }

		//'TYPE'
		public Keyword getTYPEKeyword_0() { return cTYPEKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//typeDeclaration+=TypeDeclaration
		public Assignment getTypeDeclarationAssignment_3() { return cTypeDeclarationAssignment_3; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationTypeDeclarationParserRuleCall_3_0() { return cTypeDeclarationTypeDeclarationParserRuleCall_3_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }

		//(typeDeclaration+=TypeDeclaration EOL)*
		public Group getGroup_5() { return cGroup_5; }

		//typeDeclaration+=TypeDeclaration
		public Assignment getTypeDeclarationAssignment_5_0() { return cTypeDeclarationAssignment_5_0; }

		//TypeDeclaration
		public RuleCall getTypeDeclarationTypeDeclarationParserRuleCall_5_0_0() { return cTypeDeclarationTypeDeclarationParserRuleCall_5_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_5_1() { return cEOLTerminalRuleCall_5_1; }

		//'END_TYPE'
		public Keyword getEND_TYPEKeyword_6() { return cEND_TYPEKeyword_6; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.TypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArrayDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStructureTypeDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStringDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TypeDeclaration:
		//	SimpleTypeDeclaration | RangeDeclaration | EnumDeclaration | ArrayDeclaration | StructureTypeDeclaration |
		//	StringDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//SimpleTypeDeclaration | RangeDeclaration | EnumDeclaration | ArrayDeclaration | StructureTypeDeclaration |
		//StringDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleTypeDeclaration
		public RuleCall getSimpleTypeDeclarationParserRuleCall_0() { return cSimpleTypeDeclarationParserRuleCall_0; }

		//RangeDeclaration
		public RuleCall getRangeDeclarationParserRuleCall_1() { return cRangeDeclarationParserRuleCall_1; }

		//EnumDeclaration
		public RuleCall getEnumDeclarationParserRuleCall_2() { return cEnumDeclarationParserRuleCall_2; }

		//ArrayDeclaration
		public RuleCall getArrayDeclarationParserRuleCall_3() { return cArrayDeclarationParserRuleCall_3; }

		//StructureTypeDeclaration
		public RuleCall getStructureTypeDeclarationParserRuleCall_4() { return cStructureTypeDeclarationParserRuleCall_4; }

		//StringDeclaration
		public RuleCall getStringDeclarationParserRuleCall_5() { return cStringDeclarationParserRuleCall_5; }
	}

	public class SimpleTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SimpleTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecInitSpecInitParserRuleCall_2_0 = (RuleCall)cSpecInitAssignment_2.eContents().get(0);
		
		//SimpleTypeDeclaration:
		//	derivedType=DerivedType ':' specInit=SpecInit;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':' specInit=SpecInit
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//specInit=SpecInit
		public Assignment getSpecInitAssignment_2() { return cSpecInitAssignment_2; }

		//SpecInit
		public RuleCall getSpecInitSpecInitParserRuleCall_2_0() { return cSpecInitSpecInitParserRuleCall_2_0; }
	}

	public class SpecInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SpecInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBaseTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cBaseTypeElementaryTypeParserRuleCall_0_0_0 = (RuleCall)cBaseTypeAssignment_0_0.eContents().get(0);
		private final Assignment cBaseTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cBaseTypeDerivedTypeParserRuleCall_0_1_0 = (RuleCall)cBaseTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cConstantAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_1_1_0_0 = (RuleCall)cConstantAssignment_1_1_0.eContents().get(0);
		private final Assignment cConstantAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cConstantEnumeratedValueParserRuleCall_1_1_1_0 = (RuleCall)cConstantAssignment_1_1_1.eContents().get(0);
		private final Assignment cConstantAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final RuleCall cConstantArrayInitializationParserRuleCall_1_1_2_0 = (RuleCall)cConstantAssignment_1_1_2.eContents().get(0);
		
		//SpecInit:
		//	(baseType=ElementaryType | baseType=DerivedType) (':=' (constant=Constant | constant=EnumeratedValue |
		//	constant=ArrayInitialization))?;
		@Override public ParserRule getRule() { return rule; }

		//(baseType=ElementaryType | baseType=DerivedType) (':=' (constant=Constant | constant=EnumeratedValue |
		//constant=ArrayInitialization))?
		public Group getGroup() { return cGroup; }

		//baseType=ElementaryType | baseType=DerivedType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//baseType=ElementaryType
		public Assignment getBaseTypeAssignment_0_0() { return cBaseTypeAssignment_0_0; }

		//ElementaryType
		public RuleCall getBaseTypeElementaryTypeParserRuleCall_0_0_0() { return cBaseTypeElementaryTypeParserRuleCall_0_0_0; }

		//baseType=DerivedType
		public Assignment getBaseTypeAssignment_0_1() { return cBaseTypeAssignment_0_1; }

		//DerivedType
		public RuleCall getBaseTypeDerivedTypeParserRuleCall_0_1_0() { return cBaseTypeDerivedTypeParserRuleCall_0_1_0; }

		//(':=' (constant=Constant | constant=EnumeratedValue | constant=ArrayInitialization))?
		public Group getGroup_1() { return cGroup_1; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_0() { return cColonEqualsSignKeyword_1_0; }

		//constant=Constant | constant=EnumeratedValue | constant=ArrayInitialization
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//constant=Constant
		public Assignment getConstantAssignment_1_1_0() { return cConstantAssignment_1_1_0; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_1_0_0() { return cConstantConstantParserRuleCall_1_1_0_0; }

		//constant=EnumeratedValue
		public Assignment getConstantAssignment_1_1_1() { return cConstantAssignment_1_1_1; }

		//EnumeratedValue
		public RuleCall getConstantEnumeratedValueParserRuleCall_1_1_1_0() { return cConstantEnumeratedValueParserRuleCall_1_1_1_0; }

		//constant=ArrayInitialization
		public Assignment getConstantAssignment_1_1_2() { return cConstantAssignment_1_1_2; }

		//ArrayInitialization
		public RuleCall getConstantArrayInitializationParserRuleCall_1_1_2_0() { return cConstantArrayInitializationParserRuleCall_1_1_2_0; }
	}

	public class RangeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.RangeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBaseTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBaseTypeElementaryTypeParserRuleCall_2_0 = (RuleCall)cBaseTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRangeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRangeSubRangeWithSignParserRuleCall_3_1_0 = (RuleCall)cRangeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstantAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstantSignedIntegerParserRuleCall_4_1_0 = (RuleCall)cConstantAssignment_4_1.eContents().get(0);
		
		//RangeDeclaration:
		//	derivedType=DerivedType ':' baseType=ElementaryType ('(' range=SubRangeWithSign ')') (':=' constant=SignedInteger)?;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':' baseType=ElementaryType ('(' range=SubRangeWithSign ')') (':=' constant=SignedInteger)?
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//baseType=ElementaryType
		public Assignment getBaseTypeAssignment_2() { return cBaseTypeAssignment_2; }

		//ElementaryType
		public RuleCall getBaseTypeElementaryTypeParserRuleCall_2_0() { return cBaseTypeElementaryTypeParserRuleCall_2_0; }

		//'(' range=SubRangeWithSign ')'
		public Group getGroup_3() { return cGroup_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//range=SubRangeWithSign
		public Assignment getRangeAssignment_3_1() { return cRangeAssignment_3_1; }

		//SubRangeWithSign
		public RuleCall getRangeSubRangeWithSignParserRuleCall_3_1_0() { return cRangeSubRangeWithSignParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//(':=' constant=SignedInteger)?
		public Group getGroup_4() { return cGroup_4; }

		//':='
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }

		//constant=SignedInteger
		public Assignment getConstantAssignment_4_1() { return cConstantAssignment_4_1; }

		//SignedInteger
		public RuleCall getConstantSignedIntegerParserRuleCall_4_1_0() { return cConstantSignedIntegerParserRuleCall_4_1_0; }
	}

	public class EnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.EnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnumerationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEnumerationEnumerationParserRuleCall_3_0 = (RuleCall)cEnumerationAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConstantAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConstantEnumeratedValueParserRuleCall_5_1_0 = (RuleCall)cConstantAssignment_5_1.eContents().get(0);
		
		//EnumDeclaration:
		//	derivedType=DerivedType ':' '(' enumeration=Enumeration ')' (':=' constant=EnumeratedValue)?;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':' '(' enumeration=Enumeration ')' (':=' constant=EnumeratedValue)?
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//enumeration=Enumeration
		public Assignment getEnumerationAssignment_3() { return cEnumerationAssignment_3; }

		//Enumeration
		public RuleCall getEnumerationEnumerationParserRuleCall_3_0() { return cEnumerationEnumerationParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(':=' constant=EnumeratedValue)?
		public Group getGroup_5() { return cGroup_5; }

		//':='
		public Keyword getColonEqualsSignKeyword_5_0() { return cColonEqualsSignKeyword_5_0; }

		//constant=EnumeratedValue
		public Assignment getConstantAssignment_5_1() { return cConstantAssignment_5_1; }

		//EnumeratedValue
		public RuleCall getConstantEnumeratedValueParserRuleCall_5_1_0() { return cConstantEnumeratedValueParserRuleCall_5_1_0; }
	}

	public class ArrayDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ArrayDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cARRAYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRangesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRangesSubRangeWithSignParserRuleCall_4_0 = (RuleCall)cRangesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRangesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRangesSubRangeWithSignParserRuleCall_5_1_0 = (RuleCall)cRangesAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOFKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBaseTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBaseTypeNonGenericTypeParserRuleCall_8_0 = (RuleCall)cBaseTypeAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cColonEqualsSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cConstantAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cConstantArrayInitializationParserRuleCall_9_1_0 = (RuleCall)cConstantAssignment_9_1.eContents().get(0);
		
		//ArrayDeclaration:
		//	derivedType=DerivedType ':' 'ARRAY' '[' ranges+=SubRangeWithSign (',' ranges+=SubRangeWithSign)* ']' 'OF'
		//	baseType=NonGenericType (':=' constant=ArrayInitialization)?;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':' 'ARRAY' '[' ranges+=SubRangeWithSign (',' ranges+=SubRangeWithSign)* ']' 'OF'
		//baseType=NonGenericType (':=' constant=ArrayInitialization)?
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//'ARRAY'
		public Keyword getARRAYKeyword_2() { return cARRAYKeyword_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//ranges+=SubRangeWithSign
		public Assignment getRangesAssignment_4() { return cRangesAssignment_4; }

		//SubRangeWithSign
		public RuleCall getRangesSubRangeWithSignParserRuleCall_4_0() { return cRangesSubRangeWithSignParserRuleCall_4_0; }

		//(',' ranges+=SubRangeWithSign)*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//ranges+=SubRangeWithSign
		public Assignment getRangesAssignment_5_1() { return cRangesAssignment_5_1; }

		//SubRangeWithSign
		public RuleCall getRangesSubRangeWithSignParserRuleCall_5_1_0() { return cRangesSubRangeWithSignParserRuleCall_5_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }

		//'OF'
		public Keyword getOFKeyword_7() { return cOFKeyword_7; }

		//baseType=NonGenericType
		public Assignment getBaseTypeAssignment_8() { return cBaseTypeAssignment_8; }

		//NonGenericType
		public RuleCall getBaseTypeNonGenericTypeParserRuleCall_8_0() { return cBaseTypeNonGenericTypeParserRuleCall_8_0; }

		//(':=' constant=ArrayInitialization)?
		public Group getGroup_9() { return cGroup_9; }

		//':='
		public Keyword getColonEqualsSignKeyword_9_0() { return cColonEqualsSignKeyword_9_0; }

		//constant=ArrayInitialization
		public Assignment getConstantAssignment_9_1() { return cConstantAssignment_9_1; }

		//ArrayInitialization
		public RuleCall getConstantArrayInitializationParserRuleCall_9_1_0() { return cConstantArrayInitializationParserRuleCall_9_1_0; }
	}

	public class SubRangeWithSignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SubRangeWithSign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cSUB_RANGETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SubRangeWithSign hidden():
		//	('+' | '-')? SUB_RANGE;
		@Override public ParserRule getRule() { return rule; }

		//('+' | '-')? SUB_RANGE
		public Group getGroup() { return cGroup; }

		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//SUB_RANGE
		public RuleCall getSUB_RANGETerminalRuleCall_1() { return cSUB_RANGETerminalRuleCall_1; }
	}

	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesEnumeratedValueParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesEnumeratedValueParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//Enumeration:
		//	values+=EnumeratedValue (',' values+=EnumeratedValue)*;
		@Override public ParserRule getRule() { return rule; }

		//values+=EnumeratedValue (',' values+=EnumeratedValue)*
		public Group getGroup() { return cGroup; }

		//values+=EnumeratedValue
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }

		//EnumeratedValue
		public RuleCall getValuesEnumeratedValueParserRuleCall_0_0() { return cValuesEnumeratedValueParserRuleCall_0_0; }

		//(',' values+=EnumeratedValue)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//values+=EnumeratedValue
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }

		//EnumeratedValue
		public RuleCall getValuesEnumeratedValueParserRuleCall_1_1_0() { return cValuesEnumeratedValueParserRuleCall_1_1_0; }
	}

	public class EnumeratedValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.EnumeratedValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//EnumeratedValue:
		//	derivedType=DerivedType '#' name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType '#' name=Identifier
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }
	}

	public class ArrayInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ArrayInitialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialElementsArrayInitialElementsParserRuleCall_1_0 = (RuleCall)cInitialElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialElementsArrayInitialElementsParserRuleCall_2_1_0 = (RuleCall)cInitialElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayInitialization:
		//	'[' initialElements+=ArrayInitialElements (',' initialElements+=ArrayInitialElements)* ']';
		@Override public ParserRule getRule() { return rule; }

		//'[' initialElements+=ArrayInitialElements (',' initialElements+=ArrayInitialElements)* ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//initialElements+=ArrayInitialElements
		public Assignment getInitialElementsAssignment_1() { return cInitialElementsAssignment_1; }

		//ArrayInitialElements
		public RuleCall getInitialElementsArrayInitialElementsParserRuleCall_1_0() { return cInitialElementsArrayInitialElementsParserRuleCall_1_0; }

		//(',' initialElements+=ArrayInitialElements)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//initialElements+=ArrayInitialElements
		public Assignment getInitialElementsAssignment_2_1() { return cInitialElementsAssignment_2_1; }

		//ArrayInitialElements
		public RuleCall getInitialElementsArrayInitialElementsParserRuleCall_2_1_0() { return cInitialElementsArrayInitialElementsParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ArrayInitialElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ArrayInitialElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInitialElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInitialElementInitialElementParserRuleCall_0_0 = (RuleCall)cInitialElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIndexAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIndexIntegerParserRuleCall_1_0_0 = (RuleCall)cIndexAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cInitialElementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInitialElementInitialElementParserRuleCall_1_2_0 = (RuleCall)cInitialElementAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ArrayInitialElements:
		//	initialElement=InitialElement | index=Integer '(' initialElement=InitialElement ')';
		@Override public ParserRule getRule() { return rule; }

		//initialElement=InitialElement | index=Integer '(' initialElement=InitialElement ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//initialElement=InitialElement
		public Assignment getInitialElementAssignment_0() { return cInitialElementAssignment_0; }

		//InitialElement
		public RuleCall getInitialElementInitialElementParserRuleCall_0_0() { return cInitialElementInitialElementParserRuleCall_0_0; }

		//index=Integer '(' initialElement=InitialElement ')'
		public Group getGroup_1() { return cGroup_1; }

		//index=Integer
		public Assignment getIndexAssignment_1_0() { return cIndexAssignment_1_0; }

		//Integer
		public RuleCall getIndexIntegerParserRuleCall_1_0_0() { return cIndexIntegerParserRuleCall_1_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//initialElement=InitialElement
		public Assignment getInitialElementAssignment_1_2() { return cInitialElementAssignment_1_2; }

		//InitialElement
		public RuleCall getInitialElementInitialElementParserRuleCall_1_2_0() { return cInitialElementInitialElementParserRuleCall_1_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class InitialElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.InitialElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumeratedValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArrayInitializationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStructureInitializationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InitialElement:
		//	Constant | EnumeratedValue | ArrayInitialization | StructureInitialization;
		@Override public ParserRule getRule() { return rule; }

		//Constant | EnumeratedValue | ArrayInitialization | StructureInitialization
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//EnumeratedValue
		public RuleCall getEnumeratedValueParserRuleCall_1() { return cEnumeratedValueParserRuleCall_1; }

		//ArrayInitialization
		public RuleCall getArrayInitializationParserRuleCall_2() { return cArrayInitializationParserRuleCall_2; }

		//StructureInitialization
		public RuleCall getStructureInitializationParserRuleCall_3() { return cStructureInitializationParserRuleCall_3; }
	}

	public class StructureTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StructureTypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDeclarationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDeclarationStructureDeclarationParserRuleCall_2_0_0 = (RuleCall)cDeclarationAssignment_2_0.eContents().get(0);
		private final Assignment cInitializationAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cInitializationInitializedStructureParserRuleCall_2_1_0 = (RuleCall)cInitializationAssignment_2_1.eContents().get(0);
		
		//StructureTypeDeclaration:
		//	derivedType=DerivedType ':' (declaration=StructureDeclaration | initialization=InitializedStructure);
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':' (declaration=StructureDeclaration | initialization=InitializedStructure)
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//declaration=StructureDeclaration | initialization=InitializedStructure
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//declaration=StructureDeclaration
		public Assignment getDeclarationAssignment_2_0() { return cDeclarationAssignment_2_0; }

		//StructureDeclaration
		public RuleCall getDeclarationStructureDeclarationParserRuleCall_2_0_0() { return cDeclarationStructureDeclarationParserRuleCall_2_0_0; }

		//initialization=InitializedStructure
		public Assignment getInitializationAssignment_2_1() { return cInitializationAssignment_2_1; }

		//InitializedStructure
		public RuleCall getInitializationInitializedStructureParserRuleCall_2_1_0() { return cInitializationInitializedStructureParserRuleCall_2_1_0; }
	}

	public class StructureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StructureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTRUCTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructureElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructureElementStructureElementDeclarationParserRuleCall_1_0 = (RuleCall)cStructureElementAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStructureElementAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStructureElementStructureElementDeclarationParserRuleCall_3_0_0 = (RuleCall)cStructureElementAssignment_3_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEND_STRUCTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructureDeclaration:
		//	'STRUCT'
		//	structureElement+=StructureElementDeclaration EOL (structureElement+=StructureElementDeclaration EOL)*
		//	'END_STRUCT';
		@Override public ParserRule getRule() { return rule; }

		//'STRUCT' structureElement+=StructureElementDeclaration EOL (structureElement+=StructureElementDeclaration EOL)*
		//'END_STRUCT'
		public Group getGroup() { return cGroup; }

		//'STRUCT'
		public Keyword getSTRUCTKeyword_0() { return cSTRUCTKeyword_0; }

		//structureElement+=StructureElementDeclaration
		public Assignment getStructureElementAssignment_1() { return cStructureElementAssignment_1; }

		//StructureElementDeclaration
		public RuleCall getStructureElementStructureElementDeclarationParserRuleCall_1_0() { return cStructureElementStructureElementDeclarationParserRuleCall_1_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }

		//(structureElement+=StructureElementDeclaration EOL)*
		public Group getGroup_3() { return cGroup_3; }

		//structureElement+=StructureElementDeclaration
		public Assignment getStructureElementAssignment_3_0() { return cStructureElementAssignment_3_0; }

		//StructureElementDeclaration
		public RuleCall getStructureElementStructureElementDeclarationParserRuleCall_3_0_0() { return cStructureElementStructureElementDeclarationParserRuleCall_3_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3_1() { return cEOLTerminalRuleCall_3_1; }

		//'END_STRUCT'
		public Keyword getEND_STRUCTKeyword_4() { return cEND_STRUCTKeyword_4; }
	}

	public class StructureElementDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StructureElementDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecInitSpecInitParserRuleCall_2_0 = (RuleCall)cSpecInitAssignment_2.eContents().get(0);
		
		//StructureElementDeclaration:
		//	name=Identifier ':' specInit=SpecInit;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier ':' specInit=SpecInit
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//specInit=SpecInit
		public Assignment getSpecInitAssignment_2() { return cSpecInitAssignment_2; }

		//SpecInit
		public RuleCall getSpecInitSpecInitParserRuleCall_2_0() { return cSpecInitSpecInitParserRuleCall_2_0; }
	}

	public class InitializedStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.InitializedStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitializationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitializationStructureInitializationParserRuleCall_2_0 = (RuleCall)cInitializationAssignment_2.eContents().get(0);
		
		//InitializedStructure:
		//	derivedType=DerivedType ':=' initialization=StructureInitialization;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':=' initialization=StructureInitialization
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//initialization=StructureInitialization
		public Assignment getInitializationAssignment_2() { return cInitializationAssignment_2; }

		//StructureInitialization
		public RuleCall getInitializationStructureInitializationParserRuleCall_2_0() { return cInitializationStructureInitializationParserRuleCall_2_0; }
	}

	public class StructureInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StructureInitialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitialElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitialElementsStructureElementInitializationParserRuleCall_1_0 = (RuleCall)cInitialElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitialElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitialElementsStructureElementInitializationParserRuleCall_2_1_0 = (RuleCall)cInitialElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StructureInitialization:
		//	'(' initialElements+=StructureElementInitialization (',' initialElements+=StructureElementInitialization)* ')';
		@Override public ParserRule getRule() { return rule; }

		//'(' initialElements+=StructureElementInitialization (',' initialElements+=StructureElementInitialization)* ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//initialElements+=StructureElementInitialization
		public Assignment getInitialElementsAssignment_1() { return cInitialElementsAssignment_1; }

		//StructureElementInitialization
		public RuleCall getInitialElementsStructureElementInitializationParserRuleCall_1_0() { return cInitialElementsStructureElementInitializationParserRuleCall_1_0; }

		//(',' initialElements+=StructureElementInitialization)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//initialElements+=StructureElementInitialization
		public Assignment getInitialElementsAssignment_2_1() { return cInitialElementsAssignment_2_1; }

		//StructureElementInitialization
		public RuleCall getInitialElementsStructureElementInitializationParserRuleCall_2_1_0() { return cInitialElementsStructureElementInitializationParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StructureElementInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StructureElementInitialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueInitialElementParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//StructureElementInitialization:
		//	name=Identifier ':=' value=InitialElement;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier ':=' value=InitialElement
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//value=InitialElement
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//InitialElement
		public RuleCall getValueInitialElementParserRuleCall_2_0() { return cValueInitialElementParserRuleCall_2_0; }
	}

	public class StringDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StringDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDerivedTypeDerivedTypeParserRuleCall_0_0 = (RuleCall)cDerivedTypeAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStringAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cStringSTRINGKeyword_2_0_0 = (Keyword)cStringAssignment_2_0.eContents().get(0);
		private final Keyword cWSTRINGKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSizeIntegerParserRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialValueCharacterStringParserRuleCall_4_1_0 = (RuleCall)cInitialValueAssignment_4_1.eContents().get(0);
		
		//StringDeclaration:
		//	derivedType=DerivedType ':' (string?='STRING' | 'WSTRING')? ('[' size=Integer ']') (':='
		//	initialValue=CharacterString)?;
		@Override public ParserRule getRule() { return rule; }

		//derivedType=DerivedType ':' (string?='STRING' | 'WSTRING')? ('[' size=Integer ']') (':=' initialValue=CharacterString)?
		public Group getGroup() { return cGroup; }

		//derivedType=DerivedType
		public Assignment getDerivedTypeAssignment_0() { return cDerivedTypeAssignment_0; }

		//DerivedType
		public RuleCall getDerivedTypeDerivedTypeParserRuleCall_0_0() { return cDerivedTypeDerivedTypeParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(string?='STRING' | 'WSTRING')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//string?='STRING'
		public Assignment getStringAssignment_2_0() { return cStringAssignment_2_0; }

		//'STRING'
		public Keyword getStringSTRINGKeyword_2_0_0() { return cStringSTRINGKeyword_2_0_0; }

		//'WSTRING'
		public Keyword getWSTRINGKeyword_2_1() { return cWSTRINGKeyword_2_1; }

		///*('STRING' | 'WSTRING')*/ '[' size=Integer ']'
		public Group getGroup_3() { return cGroup_3; }

		//'['
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//size=Integer
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }

		//Integer
		public RuleCall getSizeIntegerParserRuleCall_3_1_0() { return cSizeIntegerParserRuleCall_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }

		//(':=' initialValue=CharacterString)?
		public Group getGroup_4() { return cGroup_4; }

		//':='
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }

		//initialValue=CharacterString
		public Assignment getInitialValueAssignment_4_1() { return cInitialValueAssignment_4_1; }

		//CharacterString
		public RuleCall getInitialValueCharacterStringParserRuleCall_4_1_0() { return cInitialValueCharacterStringParserRuleCall_4_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///* Variables */ // =====================================================================================================================
		//Variable:
		//	name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0() { return cNameIdentifierParserRuleCall_0; }
	}

	public class VariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.VariableAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDirectVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSymbolicVariableAccessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableAccess:
		//	DirectVariable | SymbolicVariableAccess;
		@Override public ParserRule getRule() { return rule; }

		//DirectVariable | SymbolicVariableAccess
		public Alternatives getAlternatives() { return cAlternatives; }

		//DirectVariable
		public RuleCall getDirectVariableParserRuleCall_0() { return cDirectVariableParserRuleCall_0; }

		//SymbolicVariableAccess
		public RuleCall getSymbolicVariableAccessParserRuleCall_1() { return cSymbolicVariableAccessParserRuleCall_1; }
	}

	public class DirectVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DirectVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameDIRECT_VARIABLE_IDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DirectVariable:
		//	name=DIRECT_VARIABLE_ID;
		@Override public ParserRule getRule() { return rule; }

		//name=DIRECT_VARIABLE_ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//DIRECT_VARIABLE_ID
		public RuleCall getNameDIRECT_VARIABLE_IDTerminalRuleCall_0() { return cNameDIRECT_VARIABLE_IDTerminalRuleCall_0; }
	}

	public class SymbolicVariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SymbolicVariableAccess");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedVariableAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiElementVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SymbolicVariableAccess:
		//	NamedVariableAccess | MultiElementVariable;
		@Override public ParserRule getRule() { return rule; }

		//NamedVariableAccess | MultiElementVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//NamedVariableAccess
		public RuleCall getNamedVariableAccessParserRuleCall_0() { return cNamedVariableAccessParserRuleCall_0; }

		//MultiElementVariable
		public RuleCall getMultiElementVariableParserRuleCall_1() { return cMultiElementVariableParserRuleCall_1; }
	}

	public class NamedVariableAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.NamedVariableAccess");
		private final Assignment cNamedVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNamedVariableVariableCrossReference_0 = (CrossReference)cNamedVariableAssignment.eContents().get(0);
		private final RuleCall cNamedVariableVariableIdentifierParserRuleCall_0_1 = (RuleCall)cNamedVariableVariableCrossReference_0.eContents().get(1);
		
		//NamedVariableAccess:
		//	namedVariable=[Variable|Identifier];
		@Override public ParserRule getRule() { return rule; }

		//namedVariable=[Variable|Identifier]
		public Assignment getNamedVariableAssignment() { return cNamedVariableAssignment; }

		//[Variable|Identifier]
		public CrossReference getNamedVariableVariableCrossReference_0() { return cNamedVariableVariableCrossReference_0; }

		//Identifier
		public RuleCall getNamedVariableVariableIdentifierParserRuleCall_0_1() { return cNamedVariableVariableIdentifierParserRuleCall_0_1; }
	}

	public class MultiElementVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.MultiElementVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructuredVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MultiElementVariable:
		//	ArrayVariable | StructuredVariable;
		@Override public ParserRule getRule() { return rule; }

		//ArrayVariable | StructuredVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayVariable
		public RuleCall getArrayVariableParserRuleCall_0() { return cArrayVariableParserRuleCall_0; }

		//StructuredVariable
		public RuleCall getStructuredVariableParserRuleCall_1() { return cStructuredVariableParserRuleCall_1; }
	}

	public class ArrayVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ArrayVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubscriptedVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSubscriptedVariableVariableCrossReference_0_0 = (CrossReference)cSubscriptedVariableAssignment_0.eContents().get(0);
		private final RuleCall cSubscriptedVariableVariableIdentifierParserRuleCall_0_0_1 = (RuleCall)cSubscriptedVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubscriptsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubscriptsExpressionParserRuleCall_2_0 = (RuleCall)cSubscriptsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSubscriptsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubscriptsExpressionParserRuleCall_3_1_0 = (RuleCall)cSubscriptsAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayVariable:
		//	subscriptedVariable=[Variable|Identifier] '[' subscripts+=Expression (',' subscripts+=Expression)* ']';
		@Override public ParserRule getRule() { return rule; }

		//subscriptedVariable=[Variable|Identifier] '[' subscripts+=Expression (',' subscripts+=Expression)* ']'
		public Group getGroup() { return cGroup; }

		//subscriptedVariable=[Variable|Identifier]
		public Assignment getSubscriptedVariableAssignment_0() { return cSubscriptedVariableAssignment_0; }

		//[Variable|Identifier]
		public CrossReference getSubscriptedVariableVariableCrossReference_0_0() { return cSubscriptedVariableVariableCrossReference_0_0; }

		//Identifier
		public RuleCall getSubscriptedVariableVariableIdentifierParserRuleCall_0_0_1() { return cSubscriptedVariableVariableIdentifierParserRuleCall_0_0_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//subscripts+=Expression
		public Assignment getSubscriptsAssignment_2() { return cSubscriptsAssignment_2; }

		//Expression
		public RuleCall getSubscriptsExpressionParserRuleCall_2_0() { return cSubscriptsExpressionParserRuleCall_2_0; }

		//(',' subscripts+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//subscripts+=Expression
		public Assignment getSubscriptsAssignment_3_1() { return cSubscriptsAssignment_3_1; }

		//Expression
		public RuleCall getSubscriptsExpressionParserRuleCall_3_1_0() { return cSubscriptsExpressionParserRuleCall_3_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class StructuredVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StructuredVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecordVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRecordVariableVariableCrossReference_0_0 = (CrossReference)cRecordVariableAssignment_0.eContents().get(0);
		private final RuleCall cRecordVariableVariableIdentifierParserRuleCall_0_0_1 = (RuleCall)cRecordVariableVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cFieldSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldSelectorFIELD_SELECTORTerminalRuleCall_1_0 = (RuleCall)cFieldSelectorAssignment_1.eContents().get(0);
		
		//StructuredVariable:
		//	recordVariable=[Variable|Identifier] fieldSelector=FIELD_SELECTOR;
		@Override public ParserRule getRule() { return rule; }

		//recordVariable=[Variable|Identifier] fieldSelector=FIELD_SELECTOR
		public Group getGroup() { return cGroup; }

		//recordVariable=[Variable|Identifier]
		public Assignment getRecordVariableAssignment_0() { return cRecordVariableAssignment_0; }

		//[Variable|Identifier]
		public CrossReference getRecordVariableVariableCrossReference_0_0() { return cRecordVariableVariableCrossReference_0_0; }

		//Identifier
		public RuleCall getRecordVariableVariableIdentifierParserRuleCall_0_0_1() { return cRecordVariableVariableIdentifierParserRuleCall_0_0_1; }

		//fieldSelector=FIELD_SELECTOR
		public Assignment getFieldSelectorAssignment_1() { return cFieldSelectorAssignment_1; }

		//FIELD_SELECTOR
		public RuleCall getFieldSelectorFIELD_SELECTORTerminalRuleCall_1_0() { return cFieldSelectorFIELD_SELECTORTerminalRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		///* Expressions */ // =====================================================================================================================
		//Expression:
		//	OrExpression;
		@Override public ParserRule getRule() { return rule; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorORKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpression Expression:
		//	XorExpression ({BinaryExpression.left=current} operator='OR' right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//XorExpression ({BinaryExpression.left=current} operator='OR' right=XorExpression)*
		public Group getGroup() { return cGroup; }

		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }

		//({BinaryExpression.left=current} operator='OR' right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator='OR'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'OR'
		public Keyword getOperatorORKeyword_1_1_0() { return cOperatorORKeyword_1_1_0; }

		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}

	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorXORKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression Expression:
		//	AndExpression ({BinaryExpression.left=current} operator='XOR' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({BinaryExpression.left=current} operator='XOR' right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({BinaryExpression.left=current} operator='XOR' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator='XOR'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'XOR'
		public Keyword getOperatorXORKeyword_1_1_0() { return cOperatorXORKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAmpersandKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorANDKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	Comparison ({BinaryExpression.left=current} operator=('&' | 'AND') right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }

		//Comparison ({BinaryExpression.left=current} operator=('&' | 'AND') right=Comparison)*
		public Group getGroup() { return cGroup; }

		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }

		//({BinaryExpression.left=current} operator=('&' | 'AND') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator=('&' | 'AND')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('&' | 'AND')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0_0() { return cOperatorAmpersandKeyword_1_1_0_0; }

		//'AND'
		public Keyword getOperatorANDKeyword_1_1_0_1() { return cOperatorANDKeyword_1_1_0_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	AddExpression ({BinaryExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=') right=AddExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//AddExpression ({BinaryExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=') right=AddExpression)*
		public Group getGroup() { return cGroup; }

		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_0() { return cAddExpressionParserRuleCall_0; }

		//({BinaryExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=') right=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator=('=' | '<>' | '<' | '>' | '<=' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('=' | '<>' | '<' | '>' | '<=' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }

		//'<>'
		public Keyword getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1() { return cOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1; }

		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_2() { return cOperatorLessThanSignKeyword_1_1_0_2; }

		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignKeyword_1_1_0_3; }

		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_4() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_4; }

		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5; }

		//right=AddExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AddExpression
		public RuleCall getRightAddExpressionParserRuleCall_1_2_0() { return cRightAddExpressionParserRuleCall_1_2_0; }
	}

	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddExpression Expression:
		//	Term ({BinaryExpression.left=current} operator=('-' | '+') right=Term)*;
		@Override public ParserRule getRule() { return rule; }

		//Term ({BinaryExpression.left=current} operator=('-' | '+') right=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({BinaryExpression.left=current} operator=('-' | '+') right=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator=('-' | '+')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('-' | '+')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_0() { return cOperatorHyphenMinusKeyword_1_1_0_0; }

		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_1() { return cOperatorPlusSignKeyword_1_1_0_1; }

		//right=Term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorMODKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowerExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Term Expression:
		//	PowerExpression ({BinaryExpression.left=current} operator=('*' | '/' | 'MOD') right=PowerExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//PowerExpression ({BinaryExpression.left=current} operator=('*' | '/' | 'MOD') right=PowerExpression)*
		public Group getGroup() { return cGroup; }

		//PowerExpression
		public RuleCall getPowerExpressionParserRuleCall_0() { return cPowerExpressionParserRuleCall_0; }

		//({BinaryExpression.left=current} operator=('*' | '/' | 'MOD') right=PowerExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator=('*' | '/' | 'MOD')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('*' | '/' | 'MOD')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }

		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }

		//'MOD'
		public Keyword getOperatorMODKeyword_1_1_0_2() { return cOperatorMODKeyword_1_1_0_2; }

		//right=PowerExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PowerExpression
		public RuleCall getRightPowerExpressionParserRuleCall_1_2_0() { return cRightPowerExpressionParserRuleCall_1_2_0; }
	}

	public class PowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.PowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAsteriskAsteriskKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PowerExpression Expression:
		//	UnaryExpression ({BinaryExpression.left=current} operator='**' right=UnaryExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//UnaryExpression ({BinaryExpression.left=current} operator='**' right=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//({BinaryExpression.left=current} operator='**' right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//operator='**'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'**'
		public Keyword getOperatorAsteriskAsteriskKeyword_1_1_0() { return cOperatorAsteriskAsteriskKeyword_1_1_0; }

		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0_1_0 = (Alternatives)cOperatorAssignment_0_1.eContents().get(0);
		private final Keyword cOperatorNOTKeyword_0_1_0_0 = (Keyword)cOperatorAlternatives_0_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_0_1_0_1 = (Keyword)cOperatorAlternatives_0_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final RuleCall cPrimaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExpression Expression:
		//	{UnaryExpression} operator=('NOT' | '-') expression=UnaryExpression |
		//	=> PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }

		//{UnaryExpression} operator=('NOT' | '-') expression=UnaryExpression | => PrimaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{UnaryExpression} operator=('NOT' | '-') expression=UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_0_0() { return cUnaryExpressionAction_0_0; }

		//operator=('NOT' | '-')
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }

		//('NOT' | '-')
		public Alternatives getOperatorAlternatives_0_1_0() { return cOperatorAlternatives_0_1_0; }

		//'NOT'
		public Keyword getOperatorNOTKeyword_0_1_0_0() { return cOperatorNOTKeyword_0_1_0_0; }

		//'-'
		public Keyword getOperatorHyphenMinusKeyword_0_1_0_1() { return cOperatorHyphenMinusKeyword_0_1_0_1; }

		//expression=UnaryExpression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_0_2_0() { return cExpressionUnaryExpressionParserRuleCall_0_2_0; }

		//=> PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_1() { return cPrimaryExpressionParserRuleCall_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariableVariableAccessParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cParenthesesExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cFbnameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cFbnameFunctionDeclarationCrossReference_3_0_0 = (CrossReference)cFbnameAssignment_3_0.eContents().get(0);
		private final RuleCall cFbnameFunctionDeclarationIdentifierParserRuleCall_3_0_0_1 = (RuleCall)cFbnameFunctionDeclarationCrossReference_3_0_0.eContents().get(1);
		private final Assignment cOpenbrAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cOpenbrLeftParenthesisKeyword_3_1_0 = (Keyword)cOpenbrAssignment_3_1.eContents().get(0);
		private final Assignment cParamassignmentAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cParamassignmentParamAssignmentParserRuleCall_3_2_0 = (RuleCall)cParamassignmentAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cParamassignmentAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cParamassignmentParamAssignmentParserRuleCall_3_3_1_0 = (RuleCall)cParamassignmentAssignment_3_3_1.eContents().get(0);
		private final Assignment cClosebrAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final Keyword cClosebrRightParenthesisKeyword_3_4_0 = (Keyword)cClosebrAssignment_3_4.eContents().get(0);
		
		//PrimaryExpression Expression:
		//	Constant | variable=VariableAccess | ParenthesesExpression | fbname=[FunctionDeclaration|Identifier] openbr='('
		//	paramassignment+=ParamAssignment (','
		//	paramassignment+=ParamAssignment)* closebr=')';
		@Override public ParserRule getRule() { return rule; }

		//Constant | variable=VariableAccess | ParenthesesExpression | fbname=[FunctionDeclaration|Identifier] openbr='('
		//paramassignment+=ParamAssignment (',' paramassignment+=ParamAssignment)* closebr=')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//// EnumeratedValue | 
		//variable=VariableAccess
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VariableAccess
		public RuleCall getVariableVariableAccessParserRuleCall_1_0() { return cVariableVariableAccessParserRuleCall_1_0; }

		//ParenthesesExpression
		public RuleCall getParenthesesExpressionParserRuleCall_2() { return cParenthesesExpressionParserRuleCall_2; }

		//fbname=[FunctionDeclaration|Identifier] openbr='(' paramassignment+=ParamAssignment (','
		//paramassignment+=ParamAssignment)* closebr=')'
		public Group getGroup_3() { return cGroup_3; }

		//fbname=[FunctionDeclaration|Identifier]
		public Assignment getFbnameAssignment_3_0() { return cFbnameAssignment_3_0; }

		//[FunctionDeclaration|Identifier]
		public CrossReference getFbnameFunctionDeclarationCrossReference_3_0_0() { return cFbnameFunctionDeclarationCrossReference_3_0_0; }

		//Identifier
		public RuleCall getFbnameFunctionDeclarationIdentifierParserRuleCall_3_0_0_1() { return cFbnameFunctionDeclarationIdentifierParserRuleCall_3_0_0_1; }

		//openbr='('
		public Assignment getOpenbrAssignment_3_1() { return cOpenbrAssignment_3_1; }

		//'('
		public Keyword getOpenbrLeftParenthesisKeyword_3_1_0() { return cOpenbrLeftParenthesisKeyword_3_1_0; }

		//paramassignment+=ParamAssignment
		public Assignment getParamassignmentAssignment_3_2() { return cParamassignmentAssignment_3_2; }

		//ParamAssignment
		public RuleCall getParamassignmentParamAssignmentParserRuleCall_3_2_0() { return cParamassignmentParamAssignmentParserRuleCall_3_2_0; }

		//(',' paramassignment+=ParamAssignment)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//paramassignment+=ParamAssignment
		public Assignment getParamassignmentAssignment_3_3_1() { return cParamassignmentAssignment_3_3_1; }

		//ParamAssignment
		public RuleCall getParamassignmentParamAssignmentParserRuleCall_3_3_1_0() { return cParamassignmentParamAssignmentParserRuleCall_3_3_1_0; }

		//closebr=')'
		public Assignment getClosebrAssignment_3_4() { return cClosebrAssignment_3_4; }

		//')'
		public Keyword getClosebrRightParenthesisKeyword_3_4_0() { return cClosebrRightParenthesisKeyword_3_4_0; }
	}

	public class ParenthesesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ParenthesesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpenbrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOpenbrLeftParenthesisKeyword_0_0 = (Keyword)cOpenbrAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cClosebrAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cClosebrRightParenthesisKeyword_2_0 = (Keyword)cClosebrAssignment_2.eContents().get(0);
		
		//ParenthesesExpression Expression:
		//	openbr='(' expression=Expression closebr=')';
		@Override public ParserRule getRule() { return rule; }

		//openbr='(' expression=Expression closebr=')'
		public Group getGroup() { return cGroup; }

		//openbr='('
		public Assignment getOpenbrAssignment_0() { return cOpenbrAssignment_0; }

		//'('
		public Keyword getOpenbrLeftParenthesisKeyword_0_0() { return cOpenbrLeftParenthesisKeyword_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//closebr=')'
		public Assignment getClosebrAssignment_2() { return cClosebrAssignment_2; }

		//')'
		public Keyword getClosebrRightParenthesisKeyword_2_0() { return cClosebrRightParenthesisKeyword_2_0; }
	}

	public class ParamAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ParamAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cVariablenameAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final CrossReference cVariablenameNamedVariableAccessCrossReference_0_0_0_0 = (CrossReference)cVariablenameAssignment_0_0_0.eContents().get(0);
		private final RuleCall cVariablenameNamedVariableAccessIdentifierParserRuleCall_0_0_0_0_1 = (RuleCall)cVariablenameNamedVariableAccessCrossReference_0_0_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNotAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNotNOTKeyword_1_0_0 = (Keyword)cNotAssignment_1_0.eContents().get(0);
		private final Assignment cVariable1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariable1NamedVariableAccessCrossReference_1_1_0 = (CrossReference)cVariable1Assignment_1_1.eContents().get(0);
		private final RuleCall cVariable1NamedVariableAccessIdentifierParserRuleCall_1_1_0_1 = (RuleCall)cVariable1NamedVariableAccessCrossReference_1_1_0.eContents().get(1);
		private final Keyword cColonGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVariable2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cVariable2VariableCrossReference_1_3_0 = (CrossReference)cVariable2Assignment_1_3.eContents().get(0);
		private final RuleCall cVariable2VariableIdentifierParserRuleCall_1_3_0_1 = (RuleCall)cVariable2VariableCrossReference_1_3_0.eContents().get(1);
		
		//ParamAssignment:
		//	(variablename=[NamedVariableAccess|Identifier] ':=')? expression=Expression | not?='NOT'?
		//	variable1=[NamedVariableAccess|Identifier] ':>' variable2=[Variable|Identifier];
		@Override public ParserRule getRule() { return rule; }

		//(variablename=[NamedVariableAccess|Identifier] ':=')? expression=Expression | not?='NOT'?
		//variable1=[NamedVariableAccess|Identifier] ':>' variable2=[Variable|Identifier]
		public Alternatives getAlternatives() { return cAlternatives; }

		//(variablename=[NamedVariableAccess|Identifier] ':=')? expression=Expression
		public Group getGroup_0() { return cGroup_0; }

		//(variablename=[NamedVariableAccess|Identifier] ':=')?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//variablename=[NamedVariableAccess|Identifier]
		public Assignment getVariablenameAssignment_0_0_0() { return cVariablenameAssignment_0_0_0; }

		//[NamedVariableAccess|Identifier]
		public CrossReference getVariablenameNamedVariableAccessCrossReference_0_0_0_0() { return cVariablenameNamedVariableAccessCrossReference_0_0_0_0; }

		//Identifier
		public RuleCall getVariablenameNamedVariableAccessIdentifierParserRuleCall_0_0_0_0_1() { return cVariablenameNamedVariableAccessIdentifierParserRuleCall_0_0_0_0_1; }

		//':='
		public Keyword getColonEqualsSignKeyword_0_0_1() { return cColonEqualsSignKeyword_0_0_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }

		//not?='NOT'? variable1=[NamedVariableAccess|Identifier] ':>' variable2=[Variable|Identifier]
		public Group getGroup_1() { return cGroup_1; }

		//not?='NOT'?
		public Assignment getNotAssignment_1_0() { return cNotAssignment_1_0; }

		//'NOT'
		public Keyword getNotNOTKeyword_1_0_0() { return cNotNOTKeyword_1_0_0; }

		//variable1=[NamedVariableAccess|Identifier]
		public Assignment getVariable1Assignment_1_1() { return cVariable1Assignment_1_1; }

		//[NamedVariableAccess|Identifier]
		public CrossReference getVariable1NamedVariableAccessCrossReference_1_1_0() { return cVariable1NamedVariableAccessCrossReference_1_1_0; }

		//Identifier
		public RuleCall getVariable1NamedVariableAccessIdentifierParserRuleCall_1_1_0_1() { return cVariable1NamedVariableAccessIdentifierParserRuleCall_1_1_0_1; }

		//':>'
		public Keyword getColonGreaterThanSignKeyword_1_2() { return cColonGreaterThanSignKeyword_1_2; }

		//variable2=[Variable|Identifier]
		public Assignment getVariable2Assignment_1_3() { return cVariable2Assignment_1_3; }

		//[Variable|Identifier]
		public CrossReference getVariable2VariableCrossReference_1_3_0() { return cVariable2VariableCrossReference_1_3_0; }

		//Identifier
		public RuleCall getVariable2VariableIdentifierParserRuleCall_1_3_0_1() { return cVariable2VariableIdentifierParserRuleCall_1_3_0_1; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeNonGenericTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cIoVarDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIoVarDeclarationsIoVarDeclarationsParserRuleCall_4_0 = (RuleCall)cIoVarDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyFunctionBodyParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		private final Keyword cEND_FUNCTIONKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///* Functions */ // =====================================================================================================================
		//FunctionDeclaration:
		//	'FUNCTION' name=Identifier ':' type=NonGenericType
		//	ioVarDeclarations+=IoVarDeclarations*
		//	body=FunctionBody?
		//	'END_FUNCTION';
		@Override public ParserRule getRule() { return rule; }

		//'FUNCTION' name=Identifier ':' type=NonGenericType ioVarDeclarations+=IoVarDeclarations* body=FunctionBody?
		//'END_FUNCTION'
		public Group getGroup() { return cGroup; }

		//'FUNCTION'
		public Keyword getFUNCTIONKeyword_0() { return cFUNCTIONKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=NonGenericType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//NonGenericType
		public RuleCall getTypeNonGenericTypeParserRuleCall_3_0() { return cTypeNonGenericTypeParserRuleCall_3_0; }

		//ioVarDeclarations+=IoVarDeclarations*
		public Assignment getIoVarDeclarationsAssignment_4() { return cIoVarDeclarationsAssignment_4; }

		//IoVarDeclarations
		public RuleCall getIoVarDeclarationsIoVarDeclarationsParserRuleCall_4_0() { return cIoVarDeclarationsIoVarDeclarationsParserRuleCall_4_0; }

		//body=FunctionBody?
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//FunctionBody
		public RuleCall getBodyFunctionBodyParserRuleCall_5_0() { return cBodyFunctionBodyParserRuleCall_5_0; }

		//'END_FUNCTION'
		public Keyword getEND_FUNCTIONKeyword_6() { return cEND_FUNCTIONKeyword_6; }
	}

	public class IoVarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.IoVarDeclarations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputDeclarationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInputOutputDeclarationsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//IoVarDeclarations:
		//	InputDeclarations | OutputDeclarations | InputOutputDeclarations;
		@Override public ParserRule getRule() { return rule; }

		//InputDeclarations | OutputDeclarations | InputOutputDeclarations
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputDeclarations
		public RuleCall getInputDeclarationsParserRuleCall_0() { return cInputDeclarationsParserRuleCall_0; }

		//OutputDeclarations
		public RuleCall getOutputDeclarationsParserRuleCall_1() { return cOutputDeclarationsParserRuleCall_1; }

		//InputOutputDeclarations
		public RuleCall getInputOutputDeclarationsParserRuleCall_2() { return cInputOutputDeclarationsParserRuleCall_2; }
	}

	public class InputDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.InputDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVAR_INPUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRETAINKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNON_RETAINKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsInputDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cDeclarationsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cDeclarationsInputDeclarationParserRuleCall_4_0_0 = (RuleCall)cDeclarationsAssignment_4_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cEND_VARKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InputDeclarations:
		//	'VAR_INPUT' ('RETAIN' | 'NON_RETAIN')?
		//	declarations+=InputDeclaration EOL (declarations+=InputDeclaration EOL)*
		//	'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR_INPUT' ('RETAIN' | 'NON_RETAIN')? declarations+=InputDeclaration EOL (declarations+=InputDeclaration EOL)*
		//'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR_INPUT'
		public Keyword getVAR_INPUTKeyword_0() { return cVAR_INPUTKeyword_0; }

		//('RETAIN' | 'NON_RETAIN')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'RETAIN'
		public Keyword getRETAINKeyword_1_0() { return cRETAINKeyword_1_0; }

		//'NON_RETAIN'
		public Keyword getNON_RETAINKeyword_1_1() { return cNON_RETAINKeyword_1_1; }

		//declarations+=InputDeclaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//InputDeclaration
		public RuleCall getDeclarationsInputDeclarationParserRuleCall_2_0() { return cDeclarationsInputDeclarationParserRuleCall_2_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//(declarations+=InputDeclaration EOL)*
		public Group getGroup_4() { return cGroup_4; }

		//declarations+=InputDeclaration
		public Assignment getDeclarationsAssignment_4_0() { return cDeclarationsAssignment_4_0; }

		//InputDeclaration
		public RuleCall getDeclarationsInputDeclarationParserRuleCall_4_0_0() { return cDeclarationsInputDeclarationParserRuleCall_4_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_4_1() { return cEOLTerminalRuleCall_4_1; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_5() { return cEND_VARKeyword_5; }
	}

	public class InputDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.InputDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1ListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar1ListVar1ListParserRuleCall_0_0 = (RuleCall)cVar1ListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclSpecificationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclSpecificationDeclSpecificationParserRuleCall_2_0 = (RuleCall)cDeclSpecificationAssignment_2.eContents().get(0);
		
		//InputDeclaration:
		//	var1List=Var1List ':' declSpecification=DeclSpecification;
		@Override public ParserRule getRule() { return rule; }

		//var1List=Var1List ':' declSpecification=DeclSpecification
		public Group getGroup() { return cGroup; }

		//var1List=Var1List
		public Assignment getVar1ListAssignment_0() { return cVar1ListAssignment_0; }

		//Var1List
		public RuleCall getVar1ListVar1ListParserRuleCall_0_0() { return cVar1ListVar1ListParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//declSpecification=DeclSpecification
		public Assignment getDeclSpecificationAssignment_2() { return cDeclSpecificationAssignment_2; }

		//DeclSpecification
		public RuleCall getDeclSpecificationDeclSpecificationParserRuleCall_2_0() { return cDeclSpecificationDeclSpecificationParserRuleCall_2_0; }
	}

	public class EdgeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.EdgeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1ListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar1ListVar1ListParserRuleCall_0_0 = (RuleCall)cVar1ListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBOOLKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cR_EDGEKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cF_EDGEKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//EdgeDeclaration:
		//	var1List=Var1List ':' 'BOOL' ('R_EDGE' | 'F_EDGE');
		@Override public ParserRule getRule() { return rule; }

		//var1List=Var1List ':' 'BOOL' ('R_EDGE' | 'F_EDGE')
		public Group getGroup() { return cGroup; }

		//var1List=Var1List
		public Assignment getVar1ListAssignment_0() { return cVar1ListAssignment_0; }

		//Var1List
		public RuleCall getVar1ListVar1ListParserRuleCall_0_0() { return cVar1ListVar1ListParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//'BOOL'
		public Keyword getBOOLKeyword_2() { return cBOOLKeyword_2; }

		//'R_EDGE' | 'F_EDGE'
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//'R_EDGE'
		public Keyword getR_EDGEKeyword_3_0() { return cR_EDGEKeyword_3_0; }

		//'F_EDGE'
		public Keyword getF_EDGEKeyword_3_1() { return cF_EDGEKeyword_3_1; }
	}

	public class DeclSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DeclSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEdgeDeclSpecificationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclSpecification:
		//	VarDeclSpecification | EdgeDeclSpecification;
		@Override public ParserRule getRule() { return rule; }

		//VarDeclSpecification | EdgeDeclSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDeclSpecification
		public RuleCall getVarDeclSpecificationParserRuleCall_0() { return cVarDeclSpecificationParserRuleCall_0; }

		//EdgeDeclSpecification
		public RuleCall getEdgeDeclSpecificationParserRuleCall_1() { return cEdgeDeclSpecificationParserRuleCall_1; }
	}

	public class VarDeclSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.VarDeclSpecification");
		private final Assignment cSpecInitAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpecInitSpecInitParserRuleCall_0 = (RuleCall)cSpecInitAssignment.eContents().get(0);
		
		//VarDeclSpecification:
		//	specInit=SpecInit;
		@Override public ParserRule getRule() { return rule; }

		//specInit=SpecInit
		public Assignment getSpecInitAssignment() { return cSpecInitAssignment; }

		//SpecInit
		public RuleCall getSpecInitSpecInitParserRuleCall_0() { return cSpecInitSpecInitParserRuleCall_0; }
	}

	public class EdgeDeclSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.EdgeDeclSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cREdgeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cREdgeR_EDGEKeyword_1_0_0 = (Keyword)cREdgeAssignment_1_0.eContents().get(0);
		private final Assignment cFEdgeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cFEdgeF_EDGEKeyword_1_1_0 = (Keyword)cFEdgeAssignment_1_1.eContents().get(0);
		
		//EdgeDeclSpecification:
		//	'BOOL' (rEdge?='R_EDGE' | fEdge?='F_EDGE');
		@Override public ParserRule getRule() { return rule; }

		//'BOOL' (rEdge?='R_EDGE' | fEdge?='F_EDGE')
		public Group getGroup() { return cGroup; }

		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }

		//rEdge?='R_EDGE' | fEdge?='F_EDGE'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//rEdge?='R_EDGE'
		public Assignment getREdgeAssignment_1_0() { return cREdgeAssignment_1_0; }

		//'R_EDGE'
		public Keyword getREdgeR_EDGEKeyword_1_0_0() { return cREdgeR_EDGEKeyword_1_0_0; }

		//fEdge?='F_EDGE'
		public Assignment getFEdgeAssignment_1_1() { return cFEdgeAssignment_1_1; }

		//'F_EDGE'
		public Keyword getFEdgeF_EDGEKeyword_1_1_0() { return cFEdgeF_EDGEKeyword_1_1_0; }
	}

	public class Var1ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Var1List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesVariableParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		
		//Var1List:
		//	variables+=Variable (',' variables+=Variable)*;
		@Override public ParserRule getRule() { return rule; }

		//variables+=Variable (',' variables+=Variable)*
		public Group getGroup() { return cGroup; }

		//variables+=Variable
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_0_0() { return cVariablesVariableParserRuleCall_0_0; }

		//(',' variables+=Variable)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variables+=Variable
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }

		//Variable
		public RuleCall getVariablesVariableParserRuleCall_1_1_0() { return cVariablesVariableParserRuleCall_1_1_0; }
	}

	public class OutputDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.OutputDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVAR_OUTPUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRETAINKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNON_RETAINKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cInitDeclsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitDeclsVarInitDeclParserRuleCall_2_0 = (RuleCall)cInitDeclsAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInitDeclsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInitDeclsVarInitDeclParserRuleCall_4_0_0 = (RuleCall)cInitDeclsAssignment_4_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cEND_VARKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OutputDeclarations:
		//	'VAR_OUTPUT' ('RETAIN' | 'NON_RETAIN')?
		//	initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)*
		//	'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR_OUTPUT' ('RETAIN' | 'NON_RETAIN')? initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)* 'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR_OUTPUT'
		public Keyword getVAR_OUTPUTKeyword_0() { return cVAR_OUTPUTKeyword_0; }

		//('RETAIN' | 'NON_RETAIN')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'RETAIN'
		public Keyword getRETAINKeyword_1_0() { return cRETAINKeyword_1_0; }

		//'NON_RETAIN'
		public Keyword getNON_RETAINKeyword_1_1() { return cNON_RETAINKeyword_1_1; }

		//initDecls+=VarInitDecl
		public Assignment getInitDeclsAssignment_2() { return cInitDeclsAssignment_2; }

		//VarInitDecl
		public RuleCall getInitDeclsVarInitDeclParserRuleCall_2_0() { return cInitDeclsVarInitDeclParserRuleCall_2_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//(initDecls+=VarInitDecl EOL)*
		public Group getGroup_4() { return cGroup_4; }

		//initDecls+=VarInitDecl
		public Assignment getInitDeclsAssignment_4_0() { return cInitDeclsAssignment_4_0; }

		//VarInitDecl
		public RuleCall getInitDeclsVarInitDeclParserRuleCall_4_0_0() { return cInitDeclsVarInitDeclParserRuleCall_4_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_4_1() { return cEOLTerminalRuleCall_4_1; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_5() { return cEND_VARKeyword_5; }
	}

	public class VarInitDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.VarInitDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVar1ListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVar1ListVar1ListParserRuleCall_0_0 = (RuleCall)cVar1ListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecInitSpecInitParserRuleCall_2_0 = (RuleCall)cSpecInitAssignment_2.eContents().get(0);
		
		//VarInitDecl:
		//	var1List=Var1List ':' specInit=SpecInit;
		@Override public ParserRule getRule() { return rule; }

		//var1List=Var1List ':' specInit=SpecInit
		public Group getGroup() { return cGroup; }

		//var1List=Var1List
		public Assignment getVar1ListAssignment_0() { return cVar1ListAssignment_0; }

		//Var1List
		public RuleCall getVar1ListVar1ListParserRuleCall_0_0() { return cVar1ListVar1ListParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//specInit=SpecInit
		public Assignment getSpecInitAssignment_2() { return cSpecInitAssignment_2; }

		//SpecInit
		public RuleCall getSpecInitSpecInitParserRuleCall_2_0() { return cSpecInitSpecInitParserRuleCall_2_0; }
	}

	public class InputOutputDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.InputOutputDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVAR_IN_OUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInitDeclsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitDeclsVarInitDeclParserRuleCall_1_0 = (RuleCall)cInitDeclsAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInitDeclsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInitDeclsVarInitDeclParserRuleCall_3_0_0 = (RuleCall)cInitDeclsAssignment_3_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InputOutputDeclarations:
		//	'VAR_IN_OUT'
		//	initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)*
		//	'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR_IN_OUT' initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)* 'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR_IN_OUT'
		public Keyword getVAR_IN_OUTKeyword_0() { return cVAR_IN_OUTKeyword_0; }

		//initDecls+=VarInitDecl
		public Assignment getInitDeclsAssignment_1() { return cInitDeclsAssignment_1; }

		//VarInitDecl
		public RuleCall getInitDeclsVarInitDeclParserRuleCall_1_0() { return cInitDeclsVarInitDeclParserRuleCall_1_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }

		//(initDecls+=VarInitDecl EOL)*
		public Group getGroup_3() { return cGroup_3; }

		//initDecls+=VarInitDecl
		public Assignment getInitDeclsAssignment_3_0() { return cInitDeclsAssignment_3_0; }

		//VarInitDecl
		public RuleCall getInitDeclsVarInitDeclParserRuleCall_3_0_0() { return cInitDeclsVarInitDeclParserRuleCall_3_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3_1() { return cEOLTerminalRuleCall_3_1; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.VarDeclaration");
		private final Keyword cVar_declarationKeyword = (Keyword)rule.eContents().get(1);
		
		//VarDeclaration:
		//	'var_declaration';
		@Override public ParserRule getRule() { return rule; }

		//'var_declaration'
		public Keyword getVar_declarationKeyword() { return cVar_declarationKeyword; }
	}

	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FunctionBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//FunctionBody:
		//	InstructionList | StatementList;
		@Override public ParserRule getRule() { return rule; }

		//InstructionList | StatementList
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstructionList
		public RuleCall getInstructionListParserRuleCall_0() { return cInstructionListParserRuleCall_0; }

		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
	}

	public class InstructionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.InstructionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstructionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstructionsInstructionParserRuleCall_0_0 = (RuleCall)cInstructionsAssignment_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//InstructionList:
		//	instructions+=Instruction instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }

		//instructions+=Instruction instructions+=Instruction*
		public Group getGroup() { return cGroup; }

		//instructions+=Instruction
		public Assignment getInstructionsAssignment_0() { return cInstructionsAssignment_0; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0_0() { return cInstructionsInstructionParserRuleCall_0_0; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLabelLabelParserRuleCall_0_0_0 = (RuleCall)cLabelAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cInstructionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionOperationParserRuleCall_1_0 = (RuleCall)cInstructionAssignment_1.eContents().get(0);
		
		//Instruction:
		//	(label=Label ':')? instruction=Operation;
		@Override public ParserRule getRule() { return rule; }

		//(label=Label ':')? instruction=Operation
		public Group getGroup() { return cGroup; }

		//(label=Label ':')?
		public Group getGroup_0() { return cGroup_0; }

		//label=Label
		public Assignment getLabelAssignment_0_0() { return cLabelAssignment_0_0; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_0_0_0() { return cLabelLabelParserRuleCall_0_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//instruction=Operation
		public Assignment getInstructionAssignment_1() { return cInstructionAssignment_1; }

		//Operation
		public RuleCall getInstructionOperationParserRuleCall_1_0() { return cInstructionOperationParserRuleCall_1_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Label");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Label:
		//	name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0() { return cNameIdentifierParserRuleCall_0; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Operation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJmpOperationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operation:
		//	SimpleOperation | ExpressionOperation | JmpOperation;
		@Override public ParserRule getRule() { return rule; }

		//SimpleOperation | ExpressionOperation | JmpOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleOperation
		public RuleCall getSimpleOperationParserRuleCall_0() { return cSimpleOperationParserRuleCall_0; }

		//ExpressionOperation
		public RuleCall getExpressionOperationParserRuleCall_1() { return cExpressionOperationParserRuleCall_1; }

		//JmpOperation
		public RuleCall getJmpOperationParserRuleCall_2() { return cJmpOperationParserRuleCall_2; }
	}

	public class SimpleOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SimpleOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorSimpleOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandOperandParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//SimpleOperation:
		//	operator=SimpleOperator operand=Operand?;
		@Override public ParserRule getRule() { return rule; }

		//operator=SimpleOperator operand=Operand?
		public Group getGroup() { return cGroup; }

		//operator=SimpleOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//SimpleOperator
		public RuleCall getOperatorSimpleOperatorParserRuleCall_0_0() { return cOperatorSimpleOperatorParserRuleCall_0_0; }

		//operand=Operand?
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Operand
		public RuleCall getOperandOperandParserRuleCall_1_0() { return cOperandOperandParserRuleCall_1_0; }
	}

	public class ExpressionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ExpressionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorExpressionOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperandOperandParserRuleCall_2_0 = (RuleCall)cOperandAssignment_2.eContents().get(0);
		private final Assignment cSimpleInstructionListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSimpleInstructionListSimpleInstructionListParserRuleCall_3_0 = (RuleCall)cSimpleInstructionListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExpressionOperation:
		//	operator=ExpressionOperator '(' operand=Operand? simpleInstructionList=SimpleInstructionList? ')';
		@Override public ParserRule getRule() { return rule; }

		//operator=ExpressionOperator '(' operand=Operand? simpleInstructionList=SimpleInstructionList? ')'
		public Group getGroup() { return cGroup; }

		//operator=ExpressionOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//ExpressionOperator
		public RuleCall getOperatorExpressionOperatorParserRuleCall_0_0() { return cOperatorExpressionOperatorParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//operand=Operand?
		public Assignment getOperandAssignment_2() { return cOperandAssignment_2; }

		//Operand
		public RuleCall getOperandOperandParserRuleCall_2_0() { return cOperandOperandParserRuleCall_2_0; }

		//simpleInstructionList=SimpleInstructionList?
		public Assignment getSimpleInstructionListAssignment_3() { return cSimpleInstructionListAssignment_3; }

		//SimpleInstructionList
		public RuleCall getSimpleInstructionListSimpleInstructionListParserRuleCall_3_0() { return cSimpleInstructionListSimpleInstructionListParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class JmpOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.JmpOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorJmpOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLabelLabelCrossReference_1_0 = (CrossReference)cLabelAssignment_1.eContents().get(0);
		private final RuleCall cLabelLabelIdentifierParserRuleCall_1_0_1 = (RuleCall)cLabelLabelCrossReference_1_0.eContents().get(1);
		
		//JmpOperation:
		//	operator=JmpOperator label=[Label|Identifier];
		@Override public ParserRule getRule() { return rule; }

		//operator=JmpOperator label=[Label|Identifier]
		public Group getGroup() { return cGroup; }

		//operator=JmpOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//JmpOperator
		public RuleCall getOperatorJmpOperatorParserRuleCall_0_0() { return cOperatorJmpOperatorParserRuleCall_0_0; }

		//label=[Label|Identifier]
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//[Label|Identifier]
		public CrossReference getLabelLabelCrossReference_1_0() { return cLabelLabelCrossReference_1_0; }

		//Identifier
		public RuleCall getLabelLabelIdentifierParserRuleCall_1_0_1() { return cLabelLabelIdentifierParserRuleCall_1_0_1; }
	}

	public class SimpleOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SimpleOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLDNKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SimpleOperator:
		//	'LD' | 'LDN';
		@Override public ParserRule getRule() { return rule; }

		//'LD' | 'LDN'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'LD'
		public Keyword getLDKeyword_0() { return cLDKeyword_0; }

		//'LDN'
		public Keyword getLDNKeyword_1() { return cLDNKeyword_1; }
	}

	public class ExpressionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ExpressionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cADDKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//ExpressionOperator:
		//	'AND' | '&' | 'ADD';
		@Override public ParserRule getRule() { return rule; }

		//'AND' | '&' | 'ADD'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'AND'
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }

		//'&'
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }

		//'ADD'
		public Keyword getADDKeyword_2() { return cADDKeyword_2; }
	}

	public class JmpOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.JmpOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cJMPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cJMPCKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cJMPCNKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//JmpOperator:
		//	'JMP' | 'JMPC' | 'JMPCN';
		@Override public ParserRule getRule() { return rule; }

		//'JMP' | 'JMPC' | 'JMPCN'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'JMP'
		public Keyword getJMPKeyword_0() { return cJMPKeyword_0; }

		//'JMPC'
		public Keyword getJMPCKeyword_1() { return cJMPCKeyword_1; }

		//'JMPCN'
		public Keyword getJMPCNKeyword_2() { return cJMPCNKeyword_2; }
	}

	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstantConstantParserRuleCall_0_0 = (RuleCall)cConstantAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cReferenceReferencedOperandParserRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//Operand:
		//	constant=Constant | reference=ReferencedOperand;
		@Override public ParserRule getRule() { return rule; }

		//constant=Constant | reference=ReferencedOperand
		public Alternatives getAlternatives() { return cAlternatives; }

		//constant=Constant
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }

		//Constant
		public RuleCall getConstantConstantParserRuleCall_0_0() { return cConstantConstantParserRuleCall_0_0; }

		//reference=ReferencedOperand
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//ReferencedOperand
		public RuleCall getReferenceReferencedOperandParserRuleCall_1_0() { return cReferenceReferencedOperandParserRuleCall_1_0; }
	}

	public class ReferencedOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ReferencedOperand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumeratedValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReferencedOperand:
		//	VariableAccess | EnumeratedValue;
		@Override public ParserRule getRule() { return rule; }

		//VariableAccess | EnumeratedValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableAccess
		public RuleCall getVariableAccessParserRuleCall_0() { return cVariableAccessParserRuleCall_0; }

		//EnumeratedValue
		public RuleCall getEnumeratedValueParserRuleCall_1() { return cEnumeratedValueParserRuleCall_1; }
	}

	public class SimpleInstructionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SimpleInstructionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstructionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstructionsSimpleInstructionParserRuleCall_0_0 = (RuleCall)cInstructionsAssignment_0.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsSimpleInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//SimpleInstructionList:
		//	instructions+=SimpleInstruction instructions+=SimpleInstruction*;
		@Override public ParserRule getRule() { return rule; }

		//instructions+=SimpleInstruction instructions+=SimpleInstruction*
		public Group getGroup() { return cGroup; }

		//instructions+=SimpleInstruction
		public Assignment getInstructionsAssignment_0() { return cInstructionsAssignment_0; }

		//SimpleInstruction
		public RuleCall getInstructionsSimpleInstructionParserRuleCall_0_0() { return cInstructionsSimpleInstructionParserRuleCall_0_0; }

		//instructions+=SimpleInstruction*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//SimpleInstruction
		public RuleCall getInstructionsSimpleInstructionParserRuleCall_1_0() { return cInstructionsSimpleInstructionParserRuleCall_1_0; }
	}

	public class SimpleInstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SimpleInstruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SimpleInstruction:
		//	SimpleOperation | ExpressionOperation;
		@Override public ParserRule getRule() { return rule; }

		//SimpleOperation | ExpressionOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleOperation
		public RuleCall getSimpleOperationParserRuleCall_0() { return cSimpleOperationParserRuleCall_0; }

		//ExpressionOperation
		public RuleCall getExpressionOperationParserRuleCall_1() { return cExpressionOperationParserRuleCall_1; }
	}

	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//StatementList:
		//	statements+=Statement EOL (statements+=Statement EOL)*;
		@Override public ParserRule getRule() { return rule; }

		//statements+=Statement EOL (statements+=Statement EOL)*
		public Group getGroup() { return cGroup; }

		//statements+=Statement
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }

		//(statements+=Statement EOL)*
		public Group getGroup_2() { return cGroup_2; }

		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_2_1() { return cEOLTerminalRuleCall_2_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	AssignStatement | SelectionStatement;
		@Override public ParserRule getRule() { return rule; }

		//AssignStatement | SelectionStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignStatement
		public RuleCall getAssignStatementParserRuleCall_0() { return cAssignStatementParserRuleCall_0; }

		//SelectionStatement
		public RuleCall getSelectionStatementParserRuleCall_1() { return cSelectionStatementParserRuleCall_1; }
	}

	public class AssignStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.AssignStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableIdentifierParserRuleCall_0_0_1 = (RuleCall)cVariableVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AssignStatement:
		//	variable=[Variable|Identifier] ':=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		////	variable=[VariableAccess] ':=' expression=Expression
		////	variable=[VariableAccess|Identifier] ':=' expression=Expression
		//variable=[Variable|Identifier] ':=' expression=Expression
		public Group getGroup() { return cGroup; }

		////	variable=[VariableAccess] ':=' expression=Expression
		////	variable=[VariableAccess|Identifier] ':=' expression=Expression
		//variable=[Variable|Identifier]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[Variable|Identifier]
		public CrossReference getVariableVariableCrossReference_0_0() { return cVariableVariableCrossReference_0_0; }

		//Identifier
		public RuleCall getVariableVariableIdentifierParserRuleCall_0_0_1() { return cVariableVariableIdentifierParserRuleCall_0_0_1; }

		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SelectionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaseStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SelectionStatement:
		//	IfStatement | CaseStatement;
		@Override public ParserRule getRule() { return rule; }

		//IfStatement | CaseStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_1() { return cCaseStatementParserRuleCall_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfExpressionExpressionParserRuleCall_1_0 = (RuleCall)cIfExpressionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenStatementListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenStatementListStatementListParserRuleCall_3_0 = (RuleCall)cThenStatementListAssignment_3.eContents().get(0);
		private final Assignment cElseIfsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseIfsElseIfParserRuleCall_4_0 = (RuleCall)cElseIfsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cELSEKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementListStatementListParserRuleCall_5_1_0 = (RuleCall)cElseStatementListAssignment_5_1.eContents().get(0);
		private final Keyword cEND_IFKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement:
		//	'IF' ifExpression=Expression 'THEN' thenStatementList=StatementList elseIfs+=ElseIf* ('ELSE'
		//	elseStatementList=StatementList)? 'END_IF';
		@Override public ParserRule getRule() { return rule; }

		//'IF' ifExpression=Expression 'THEN' thenStatementList=StatementList elseIfs+=ElseIf* ('ELSE'
		//elseStatementList=StatementList)? 'END_IF'
		public Group getGroup() { return cGroup; }

		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }

		//ifExpression=Expression
		public Assignment getIfExpressionAssignment_1() { return cIfExpressionAssignment_1; }

		//Expression
		public RuleCall getIfExpressionExpressionParserRuleCall_1_0() { return cIfExpressionExpressionParserRuleCall_1_0; }

		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }

		//thenStatementList=StatementList
		public Assignment getThenStatementListAssignment_3() { return cThenStatementListAssignment_3; }

		//StatementList
		public RuleCall getThenStatementListStatementListParserRuleCall_3_0() { return cThenStatementListStatementListParserRuleCall_3_0; }

		//elseIfs+=ElseIf*
		public Assignment getElseIfsAssignment_4() { return cElseIfsAssignment_4; }

		//ElseIf
		public RuleCall getElseIfsElseIfParserRuleCall_4_0() { return cElseIfsElseIfParserRuleCall_4_0; }

		//('ELSE' elseStatementList=StatementList)?
		public Group getGroup_5() { return cGroup_5; }

		//'ELSE'
		public Keyword getELSEKeyword_5_0() { return cELSEKeyword_5_0; }

		//elseStatementList=StatementList
		public Assignment getElseStatementListAssignment_5_1() { return cElseStatementListAssignment_5_1; }

		//StatementList
		public RuleCall getElseStatementListStatementListParserRuleCall_5_1_0() { return cElseStatementListStatementListParserRuleCall_5_1_0; }

		//'END_IF'
		public Keyword getEND_IFKeyword_6() { return cEND_IFKeyword_6; }
	}

	public class ElseIfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ElseIf");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cELSIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementListStatementListParserRuleCall_3_0 = (RuleCall)cStatementListAssignment_3.eContents().get(0);
		
		//ElseIf:
		//	'ELSIF' expression=Expression 'THEN' statementList=StatementList;
		@Override public ParserRule getRule() { return rule; }

		//'ELSIF' expression=Expression 'THEN' statementList=StatementList
		public Group getGroup() { return cGroup; }

		//'ELSIF'
		public Keyword getELSIFKeyword_0() { return cELSIFKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }

		//statementList=StatementList
		public Assignment getStatementListAssignment_3() { return cStatementListAssignment_3; }

		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_3_0() { return cStatementListStatementListParserRuleCall_3_0; }
	}

	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cOFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCaseElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaseElementsCaseElementParserRuleCall_3_0 = (RuleCall)cCaseElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cELSEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseStatementListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseStatementListStatementListParserRuleCall_4_1_0 = (RuleCall)cElseStatementListAssignment_4_1.eContents().get(0);
		private final Keyword cEND_CASEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CaseStatement:
		//	'CASE' expression=Expression 'OF' caseElements+=CaseElement* ('ELSE' elseStatementList=StatementList)? 'END_CASE';
		@Override public ParserRule getRule() { return rule; }

		//'CASE' expression=Expression 'OF' caseElements+=CaseElement* ('ELSE' elseStatementList=StatementList)? 'END_CASE'
		public Group getGroup() { return cGroup; }

		//'CASE'
		public Keyword getCASEKeyword_0() { return cCASEKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//'OF'
		public Keyword getOFKeyword_2() { return cOFKeyword_2; }

		//caseElements+=CaseElement*
		public Assignment getCaseElementsAssignment_3() { return cCaseElementsAssignment_3; }

		//CaseElement
		public RuleCall getCaseElementsCaseElementParserRuleCall_3_0() { return cCaseElementsCaseElementParserRuleCall_3_0; }

		//('ELSE' elseStatementList=StatementList)?
		public Group getGroup_4() { return cGroup_4; }

		//'ELSE'
		public Keyword getELSEKeyword_4_0() { return cELSEKeyword_4_0; }

		//elseStatementList=StatementList
		public Assignment getElseStatementListAssignment_4_1() { return cElseStatementListAssignment_4_1; }

		//StatementList
		public RuleCall getElseStatementListStatementListParserRuleCall_4_1_0() { return cElseStatementListStatementListParserRuleCall_4_1_0; }

		//'END_CASE'
		public Keyword getEND_CASEKeyword_5() { return cEND_CASEKeyword_5; }
	}

	public class CaseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.CaseElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseListCaseListParserRuleCall_0_0 = (RuleCall)cCaseListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementListStatementListParserRuleCall_2_0 = (RuleCall)cStatementListAssignment_2.eContents().get(0);
		
		//CaseElement:
		//	caseList=CaseList ':' statementList=StatementList;
		@Override public ParserRule getRule() { return rule; }

		//caseList=CaseList ':' statementList=StatementList
		public Group getGroup() { return cGroup; }

		//caseList=CaseList
		public Assignment getCaseListAssignment_0() { return cCaseListAssignment_0; }

		//CaseList
		public RuleCall getCaseListCaseListParserRuleCall_0_0() { return cCaseListCaseListParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//statementList=StatementList
		public Assignment getStatementListAssignment_2() { return cStatementListAssignment_2; }

		//StatementList
		public RuleCall getStatementListStatementListParserRuleCall_2_0() { return cStatementListStatementListParserRuleCall_2_0; }
	}

	public class CaseListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.CaseList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsCaseListElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsCaseListElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//CaseList:
		//	elements+=CaseListElement (',' elements+=CaseListElement)*;
		@Override public ParserRule getRule() { return rule; }

		//elements+=CaseListElement (',' elements+=CaseListElement)*
		public Group getGroup() { return cGroup; }

		//elements+=CaseListElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }

		//CaseListElement
		public RuleCall getElementsCaseListElementParserRuleCall_0_0() { return cElementsCaseListElementParserRuleCall_0_0; }

		//(',' elements+=CaseListElement)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//elements+=CaseListElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//CaseListElement
		public RuleCall getElementsCaseListElementParserRuleCall_1_1_0() { return cElementsCaseListElementParserRuleCall_1_1_0; }
	}

	public class CaseListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.CaseListElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSubRangeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSubRangeSUB_RANGETerminalRuleCall_0_0 = (RuleCall)cSubRangeAssignment_0.eContents().get(0);
		private final Assignment cIntegerAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerSignedIntegerParserRuleCall_1_0 = (RuleCall)cIntegerAssignment_1.eContents().get(0);
		private final Assignment cEnumeratedValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cEnumeratedValueEnumeratedValueCrossReference_2_0 = (CrossReference)cEnumeratedValueAssignment_2.eContents().get(0);
		private final RuleCall cEnumeratedValueEnumeratedValueIdentifierParserRuleCall_2_0_1 = (RuleCall)cEnumeratedValueEnumeratedValueCrossReference_2_0.eContents().get(1);
		
		//CaseListElement:
		//	subRange=SUB_RANGE | integer=SignedInteger | enumeratedValue=[EnumeratedValue|Identifier];
		@Override public ParserRule getRule() { return rule; }

		//subRange=SUB_RANGE | integer=SignedInteger | enumeratedValue=[EnumeratedValue|Identifier]
		public Alternatives getAlternatives() { return cAlternatives; }

		//subRange=SUB_RANGE
		public Assignment getSubRangeAssignment_0() { return cSubRangeAssignment_0; }

		//SUB_RANGE
		public RuleCall getSubRangeSUB_RANGETerminalRuleCall_0_0() { return cSubRangeSUB_RANGETerminalRuleCall_0_0; }

		//integer=SignedInteger
		public Assignment getIntegerAssignment_1() { return cIntegerAssignment_1; }

		//SignedInteger
		public RuleCall getIntegerSignedIntegerParserRuleCall_1_0() { return cIntegerSignedIntegerParserRuleCall_1_0; }

		//enumeratedValue=[EnumeratedValue|Identifier]
		public Assignment getEnumeratedValueAssignment_2() { return cEnumeratedValueAssignment_2; }

		//[EnumeratedValue|Identifier]
		public CrossReference getEnumeratedValueEnumeratedValueCrossReference_2_0() { return cEnumeratedValueEnumeratedValueCrossReference_2_0; }

		//Identifier
		public RuleCall getEnumeratedValueEnumeratedValueIdentifierParserRuleCall_2_0_1() { return cEnumeratedValueEnumeratedValueIdentifierParserRuleCall_2_0_1; }
	}

	public class FunctionBlockDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FunctionBlockDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTION_BLOCKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDeclarationsFunctionBlockVarDeclarationsParserRuleCall_2_0 = (RuleCall)cVarDeclarationsAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyFunctionBlockBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cEND_FUNCTION_BLOCKKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//FunctionBlockDeclaration:
		//	'FUNCTION_BLOCK' name=Identifier varDeclarations+=FunctionBlockVarDeclarations* body=FunctionBlockBody?
		//	'END_FUNCTION_BLOCK';
		@Override public ParserRule getRule() { return rule; }

		//'FUNCTION_BLOCK' name=Identifier varDeclarations+=FunctionBlockVarDeclarations* body=FunctionBlockBody?
		//'END_FUNCTION_BLOCK'
		public Group getGroup() { return cGroup; }

		//'FUNCTION_BLOCK'
		public Keyword getFUNCTION_BLOCKKeyword_0() { return cFUNCTION_BLOCKKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//varDeclarations+=FunctionBlockVarDeclarations*
		public Assignment getVarDeclarationsAssignment_2() { return cVarDeclarationsAssignment_2; }

		//FunctionBlockVarDeclarations
		public RuleCall getVarDeclarationsFunctionBlockVarDeclarationsParserRuleCall_2_0() { return cVarDeclarationsFunctionBlockVarDeclarationsParserRuleCall_2_0; }

		//body=FunctionBlockBody?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//FunctionBlockBody
		public RuleCall getBodyFunctionBlockBodyParserRuleCall_3_0() { return cBodyFunctionBlockBodyParserRuleCall_3_0; }

		//'END_FUNCTION_BLOCK'
		public Keyword getEND_FUNCTION_BLOCKKeyword_4() { return cEND_FUNCTION_BLOCKKeyword_4; }
	}

	public class FunctionBlockVarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FunctionBlockVarDeclarations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIoVarDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherVarDeclarationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBlockVarDeclarations:
		//	IoVarDeclarations | OtherVarDeclarations;
		@Override public ParserRule getRule() { return rule; }

		//IoVarDeclarations | OtherVarDeclarations
		public Alternatives getAlternatives() { return cAlternatives; }

		//IoVarDeclarations
		public RuleCall getIoVarDeclarationsParserRuleCall_0() { return cIoVarDeclarationsParserRuleCall_0; }

		//OtherVarDeclarations
		public RuleCall getOtherVarDeclarationsParserRuleCall_1() { return cOtherVarDeclarationsParserRuleCall_1; }
	}

	public class OtherVarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.OtherVarDeclarations");
		private final RuleCall cVarDeclarationsParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OtherVarDeclarations:
		//	VarDeclarations;
		@Override public ParserRule getRule() { return rule; }

		//VarDeclarations
		public RuleCall getVarDeclarationsParserRuleCall() { return cVarDeclarationsParserRuleCall; }
	}

	public class VarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.VarDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantCONSTANTKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cInitDeclsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitDeclsVarInitDeclParserRuleCall_2_0 = (RuleCall)cInitDeclsAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cInitDeclsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cInitDeclsVarInitDeclParserRuleCall_4_0_0 = (RuleCall)cInitDeclsAssignment_4_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cEND_VARKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//VarDeclarations:
		//	'VAR' constant?='CONSTANT'? initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)* 'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR' constant?='CONSTANT'? initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)* 'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR'
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }

		//constant?='CONSTANT'?
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }

		//'CONSTANT'
		public Keyword getConstantCONSTANTKeyword_1_0() { return cConstantCONSTANTKeyword_1_0; }

		//initDecls+=VarInitDecl
		public Assignment getInitDeclsAssignment_2() { return cInitDeclsAssignment_2; }

		//VarInitDecl
		public RuleCall getInitDeclsVarInitDeclParserRuleCall_2_0() { return cInitDeclsVarInitDeclParserRuleCall_2_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//(initDecls+=VarInitDecl EOL)*
		public Group getGroup_4() { return cGroup_4; }

		//initDecls+=VarInitDecl
		public Assignment getInitDeclsAssignment_4_0() { return cInitDeclsAssignment_4_0; }

		//VarInitDecl
		public RuleCall getInitDeclsVarInitDeclParserRuleCall_4_0_0() { return cInitDeclsVarInitDeclParserRuleCall_4_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_4_1() { return cEOLTerminalRuleCall_4_1; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_5() { return cEND_VARKeyword_5; }
	}

	public class FunctionBlockBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FunctionBlockBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionBlockBody:
		//	InstructionList | StatementList;
		@Override public ParserRule getRule() { return rule; }

		//InstructionList | StatementList
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstructionList
		public RuleCall getInstructionListParserRuleCall_0() { return cInstructionListParserRuleCall_0; }

		//StatementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
	}

	public class ProgramDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgramDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROGRAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVarDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarDeclarationsProgramVarDeclarationsParserRuleCall_2_0 = (RuleCall)cVarDeclarationsAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyFunctionBlockBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cEND_PROGRAMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* Program */ // =====================================================================================================================
		//ProgramDeclaration:
		//	'PROGRAM' name=Identifier varDeclarations+=ProgramVarDeclarations* body=FunctionBlockBody? 'END_PROGRAM';
		@Override public ParserRule getRule() { return rule; }

		//'PROGRAM' name=Identifier varDeclarations+=ProgramVarDeclarations* body=FunctionBlockBody? 'END_PROGRAM'
		public Group getGroup() { return cGroup; }

		//'PROGRAM'
		public Keyword getPROGRAMKeyword_0() { return cPROGRAMKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//varDeclarations+=ProgramVarDeclarations*
		public Assignment getVarDeclarationsAssignment_2() { return cVarDeclarationsAssignment_2; }

		//ProgramVarDeclarations
		public RuleCall getVarDeclarationsProgramVarDeclarationsParserRuleCall_2_0() { return cVarDeclarationsProgramVarDeclarationsParserRuleCall_2_0; }

		//body=FunctionBlockBody?
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//FunctionBlockBody
		public RuleCall getBodyFunctionBlockBodyParserRuleCall_3_0() { return cBodyFunctionBlockBodyParserRuleCall_3_0; }

		//'END_PROGRAM'
		public Keyword getEND_PROGRAMKeyword_4() { return cEND_PROGRAMKeyword_4; }
	}

	public class ProgramVarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgramVarDeclarations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIoVarDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherVarDeclarationsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLocatedVarDeclarationsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProgramAccessDeclsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ProgramVarDeclarations:
		//	IoVarDeclarations | OtherVarDeclarations | LocatedVarDeclarations | ProgramAccessDecls;
		@Override public ParserRule getRule() { return rule; }

		//IoVarDeclarations | OtherVarDeclarations | LocatedVarDeclarations | ProgramAccessDecls
		public Alternatives getAlternatives() { return cAlternatives; }

		//IoVarDeclarations
		public RuleCall getIoVarDeclarationsParserRuleCall_0() { return cIoVarDeclarationsParserRuleCall_0; }

		//OtherVarDeclarations
		public RuleCall getOtherVarDeclarationsParserRuleCall_1() { return cOtherVarDeclarationsParserRuleCall_1; }

		//LocatedVarDeclarations
		public RuleCall getLocatedVarDeclarationsParserRuleCall_2() { return cLocatedVarDeclarationsParserRuleCall_2; }

		//ProgramAccessDecls
		public RuleCall getProgramAccessDeclsParserRuleCall_3() { return cProgramAccessDeclsParserRuleCall_3; }
	}

	public class LocatedVarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.LocatedVarDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCONSTANTKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRETAINKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cNON_RETAINKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cLocatedVarDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_2_0 = (RuleCall)cLocatedVarDeclarationAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLocatedVarDeclarationAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_4_0_0 = (RuleCall)cLocatedVarDeclarationAssignment_4_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cEND_VARKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LocatedVarDeclarations:
		//	'VAR' ('CONSTANT' | 'RETAIN' | 'NON_RETAIN') locatedVarDeclaration+=LocatedVarDeclaration EOL
		//	(locatedVarDeclaration+=LocatedVarDeclaration EOL)* 'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR' ('CONSTANT' | 'RETAIN' | 'NON_RETAIN') locatedVarDeclaration+=LocatedVarDeclaration EOL
		//(locatedVarDeclaration+=LocatedVarDeclaration EOL)* 'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR'
		public Keyword getVARKeyword_0() { return cVARKeyword_0; }

		//'CONSTANT' | 'RETAIN' | 'NON_RETAIN'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'CONSTANT'
		public Keyword getCONSTANTKeyword_1_0() { return cCONSTANTKeyword_1_0; }

		//'RETAIN'
		public Keyword getRETAINKeyword_1_1() { return cRETAINKeyword_1_1; }

		//'NON_RETAIN'
		public Keyword getNON_RETAINKeyword_1_2() { return cNON_RETAINKeyword_1_2; }

		//locatedVarDeclaration+=LocatedVarDeclaration
		public Assignment getLocatedVarDeclarationAssignment_2() { return cLocatedVarDeclarationAssignment_2; }

		//LocatedVarDeclaration
		public RuleCall getLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_2_0() { return cLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_2_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }

		//(locatedVarDeclaration+=LocatedVarDeclaration EOL)*
		public Group getGroup_4() { return cGroup_4; }

		//locatedVarDeclaration+=LocatedVarDeclaration
		public Assignment getLocatedVarDeclarationAssignment_4_0() { return cLocatedVarDeclarationAssignment_4_0; }

		//LocatedVarDeclaration
		public RuleCall getLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_4_0_0() { return cLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_4_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_4_1() { return cEOLTerminalRuleCall_4_1; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_5() { return cEND_VARKeyword_5; }
	}

	public class LocatedVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.LocatedVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cLocationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLocationLocationParserRuleCall_1_0 = (RuleCall)cLocationAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpecInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpecInitSpecInitParserRuleCall_3_0 = (RuleCall)cSpecInitAssignment_3.eContents().get(0);
		
		//LocatedVarDeclaration:
		//	name=Identifier? location=Location ':' specInit=SpecInit;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier? location=Location ':' specInit=SpecInit
		public Group getGroup() { return cGroup; }

		//name=Identifier?
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//location=Location
		public Assignment getLocationAssignment_1() { return cLocationAssignment_1; }

		//Location
		public RuleCall getLocationLocationParserRuleCall_1_0() { return cLocationLocationParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//specInit=SpecInit
		public Assignment getSpecInitAssignment_3() { return cSpecInitAssignment_3; }

		//SpecInit
		public RuleCall getSpecInitSpecInitParserRuleCall_3_0() { return cSpecInitSpecInitParserRuleCall_3_0; }
	}

	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDirectVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectVariableDirectVariableParserRuleCall_1_0 = (RuleCall)cDirectVariableAssignment_1.eContents().get(0);
		
		//Location:
		//	'AT' directVariable=DirectVariable;
		@Override public ParserRule getRule() { return rule; }

		//'AT' directVariable=DirectVariable
		public Group getGroup() { return cGroup; }

		//'AT'
		public Keyword getATKeyword_0() { return cATKeyword_0; }

		//directVariable=DirectVariable
		public Assignment getDirectVariableAssignment_1() { return cDirectVariableAssignment_1; }

		//DirectVariable
		public RuleCall getDirectVariableDirectVariableParserRuleCall_1_0() { return cDirectVariableDirectVariableParserRuleCall_1_0; }
	}

	public class ProgramAccessDeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgramAccessDecls");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVAR_ACCESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProgramAccessDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProgramAccessDeclProgramAccessDeclParserRuleCall_1_0 = (RuleCall)cProgramAccessDeclAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cProgramAccessDeclAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cProgramAccessDeclProgramAccessDeclParserRuleCall_3_0_0 = (RuleCall)cProgramAccessDeclAssignment_3_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProgramAccessDecls:
		//	'VAR_ACCESS' programAccessDecl+=ProgramAccessDecl EOL (programAccessDecl+=ProgramAccessDecl EOL)* 'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR_ACCESS' programAccessDecl+=ProgramAccessDecl EOL (programAccessDecl+=ProgramAccessDecl EOL)* 'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR_ACCESS'
		public Keyword getVAR_ACCESSKeyword_0() { return cVAR_ACCESSKeyword_0; }

		//programAccessDecl+=ProgramAccessDecl
		public Assignment getProgramAccessDeclAssignment_1() { return cProgramAccessDeclAssignment_1; }

		//ProgramAccessDecl
		public RuleCall getProgramAccessDeclProgramAccessDeclParserRuleCall_1_0() { return cProgramAccessDeclProgramAccessDeclParserRuleCall_1_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }

		//(programAccessDecl+=ProgramAccessDecl EOL)*
		public Group getGroup_3() { return cGroup_3; }

		//programAccessDecl+=ProgramAccessDecl
		public Assignment getProgramAccessDeclAssignment_3_0() { return cProgramAccessDeclAssignment_3_0; }

		//ProgramAccessDecl
		public RuleCall getProgramAccessDeclProgramAccessDeclParserRuleCall_3_0_0() { return cProgramAccessDeclProgramAccessDeclParserRuleCall_3_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3_1() { return cEOLTerminalRuleCall_3_1; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}

	public class ProgramAccessDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgramAccessDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAccessNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAccessNameVariableParserRuleCall_0_0 = (RuleCall)cAccessNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSymbolicVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSymbolicVariableNamedVariableAccessParserRuleCall_2_0 = (RuleCall)cSymbolicVariableAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeNameNonGenericTypeParserRuleCall_4_0 = (RuleCall)cTypeNameAssignment_4.eContents().get(0);
		private final Assignment cDirectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDirectionDirectionParserRuleCall_5_0 = (RuleCall)cDirectionAssignment_5.eContents().get(0);
		
		//ProgramAccessDecl:
		//	accessName=Variable ':' symbolicVariable=NamedVariableAccess ':' typeName=NonGenericType direction=Direction?;
		@Override public ParserRule getRule() { return rule; }

		//accessName=Variable ':' symbolicVariable=NamedVariableAccess ':' typeName=NonGenericType direction=Direction?
		public Group getGroup() { return cGroup; }

		//accessName=Variable
		public Assignment getAccessNameAssignment_0() { return cAccessNameAssignment_0; }

		//Variable
		public RuleCall getAccessNameVariableParserRuleCall_0_0() { return cAccessNameVariableParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//symbolicVariable=NamedVariableAccess
		public Assignment getSymbolicVariableAssignment_2() { return cSymbolicVariableAssignment_2; }

		//NamedVariableAccess
		public RuleCall getSymbolicVariableNamedVariableAccessParserRuleCall_2_0() { return cSymbolicVariableNamedVariableAccessParserRuleCall_2_0; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//typeName=NonGenericType
		public Assignment getTypeNameAssignment_4() { return cTypeNameAssignment_4; }

		//NonGenericType
		public RuleCall getTypeNameNonGenericTypeParserRuleCall_4_0() { return cTypeNameNonGenericTypeParserRuleCall_4_0; }

		//direction=Direction?
		public Assignment getDirectionAssignment_5() { return cDirectionAssignment_5; }

		//Direction
		public RuleCall getDirectionDirectionParserRuleCall_5_0() { return cDirectionDirectionParserRuleCall_5_0; }
	}

	public class DirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Direction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cREAD_WRITEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cREAD_ONLYKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Direction:
		//	'READ_WRITE' | 'READ_ONLY';
		@Override public ParserRule getRule() { return rule; }

		//'READ_WRITE' | 'READ_ONLY'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'READ_WRITE'
		public Keyword getREAD_WRITEKeyword_0() { return cREAD_WRITEKeyword_0; }

		//'READ_ONLY'
		public Keyword getREAD_ONLYKeyword_1() { return cREAD_ONLYKeyword_1; }
	}

	public class ConfigurationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ConfigurationDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONFIGURATIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGlobalVarDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_2_0 = (RuleCall)cGlobalVarDeclarationsAssignment_2.eContents().get(0);
		private final Assignment cResdeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResdeclResourceDeclarationParserRuleCall_3_0 = (RuleCall)cResdeclAssignment_3.eContents().get(0);
		private final Keyword cEND_CONFIGURATIONKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* Configuration */ // =====================================================================================================================	 
		//ConfigurationDeclaration:
		//	'CONFIGURATION' name=Identifier globalVarDeclarations=GlobalVarDeclarations? resdecl=ResourceDeclaration
		//	'END_CONFIGURATION';
		@Override public ParserRule getRule() { return rule; }

		//'CONFIGURATION' name=Identifier globalVarDeclarations=GlobalVarDeclarations? resdecl=ResourceDeclaration
		//'END_CONFIGURATION'
		public Group getGroup() { return cGroup; }

		//'CONFIGURATION'
		public Keyword getCONFIGURATIONKeyword_0() { return cCONFIGURATIONKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//globalVarDeclarations=GlobalVarDeclarations?
		public Assignment getGlobalVarDeclarationsAssignment_2() { return cGlobalVarDeclarationsAssignment_2; }

		//GlobalVarDeclarations
		public RuleCall getGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_2_0() { return cGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_2_0; }

		//resdecl=ResourceDeclaration
		public Assignment getResdeclAssignment_3() { return cResdeclAssignment_3; }

		//ResourceDeclaration
		public RuleCall getResdeclResourceDeclarationParserRuleCall_3_0() { return cResdeclResourceDeclarationParserRuleCall_3_0; }

		//'END_CONFIGURATION'
		public Keyword getEND_CONFIGURATIONKeyword_4() { return cEND_CONFIGURATIONKeyword_4; }
	}

	public class ResourceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ResourceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRESOURCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cResnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResnameIdentifierParserRuleCall_3_0 = (RuleCall)cResnameAssignment_3.eContents().get(0);
		private final Assignment cGlobalVarDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_4_0 = (RuleCall)cGlobalVarDeclarationsAssignment_4.eContents().get(0);
		private final Assignment cSingleresourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSingleresourceSingleResourceDeclarationParserRuleCall_5_0 = (RuleCall)cSingleresourceAssignment_5.eContents().get(0);
		private final Keyword cEND_RESOURCEKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ResourceDeclaration:
		//	'RESOURCE' name=Identifier 'ON' resname=Identifier globalVarDeclarations=GlobalVarDeclarations?
		//	singleresource=SingleResourceDeclaration 'END_RESOURCE';
		@Override public ParserRule getRule() { return rule; }

		//'RESOURCE' name=Identifier 'ON' resname=Identifier globalVarDeclarations=GlobalVarDeclarations?
		//singleresource=SingleResourceDeclaration 'END_RESOURCE'
		public Group getGroup() { return cGroup; }

		//'RESOURCE'
		public Keyword getRESOURCEKeyword_0() { return cRESOURCEKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//'ON'
		public Keyword getONKeyword_2() { return cONKeyword_2; }

		//resname=Identifier
		public Assignment getResnameAssignment_3() { return cResnameAssignment_3; }

		//Identifier
		public RuleCall getResnameIdentifierParserRuleCall_3_0() { return cResnameIdentifierParserRuleCall_3_0; }

		//globalVarDeclarations=GlobalVarDeclarations?
		public Assignment getGlobalVarDeclarationsAssignment_4() { return cGlobalVarDeclarationsAssignment_4; }

		//GlobalVarDeclarations
		public RuleCall getGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_4_0() { return cGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_4_0; }

		//singleresource=SingleResourceDeclaration
		public Assignment getSingleresourceAssignment_5() { return cSingleresourceAssignment_5; }

		//SingleResourceDeclaration
		public RuleCall getSingleresourceSingleResourceDeclarationParserRuleCall_5_0() { return cSingleresourceSingleResourceDeclarationParserRuleCall_5_0; }

		//'END_RESOURCE'
		public Keyword getEND_RESOURCEKeyword_6() { return cEND_RESOURCEKeyword_6; }
	}

	public class SingleResourceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SingleResourceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTaskConfAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTaskConfTaskConfigurationParserRuleCall_0_0_0 = (RuleCall)cTaskConfAssignment_0_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cProgramConfAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cProgramConfProgramConfigurationParserRuleCall_1_0_0 = (RuleCall)cProgramConfAssignment_1_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cProgramConfAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cProgramConfProgramConfigurationParserRuleCall_2_0_0 = (RuleCall)cProgramConfAssignment_2_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//SingleResourceDeclaration:
		//	(taskConf=TaskConfiguration EOL)? (programConf+=ProgramConfiguration EOL) (programConf+=ProgramConfiguration EOL)?;
		@Override public ParserRule getRule() { return rule; }

		//(taskConf=TaskConfiguration EOL)? (programConf+=ProgramConfiguration EOL) (programConf+=ProgramConfiguration EOL)?
		public Group getGroup() { return cGroup; }

		//(taskConf=TaskConfiguration EOL)?
		public Group getGroup_0() { return cGroup_0; }

		//taskConf=TaskConfiguration
		public Assignment getTaskConfAssignment_0_0() { return cTaskConfAssignment_0_0; }

		//TaskConfiguration
		public RuleCall getTaskConfTaskConfigurationParserRuleCall_0_0_0() { return cTaskConfTaskConfigurationParserRuleCall_0_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_0_1() { return cEOLTerminalRuleCall_0_1; }

		//programConf+=ProgramConfiguration EOL
		public Group getGroup_1() { return cGroup_1; }

		//programConf+=ProgramConfiguration
		public Assignment getProgramConfAssignment_1_0() { return cProgramConfAssignment_1_0; }

		//ProgramConfiguration
		public RuleCall getProgramConfProgramConfigurationParserRuleCall_1_0_0() { return cProgramConfProgramConfigurationParserRuleCall_1_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_1_1() { return cEOLTerminalRuleCall_1_1; }

		//(programConf+=ProgramConfiguration EOL)?
		public Group getGroup_2() { return cGroup_2; }

		//programConf+=ProgramConfiguration
		public Assignment getProgramConfAssignment_2_0() { return cProgramConfAssignment_2_0; }

		//ProgramConfiguration
		public RuleCall getProgramConfProgramConfigurationParserRuleCall_2_0_0() { return cProgramConfProgramConfigurationParserRuleCall_2_0_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_2_1() { return cEOLTerminalRuleCall_2_1; }
	}

	public class ProgramConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgramConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROGRAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRETAINKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNONRETAINKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWITHKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTaskAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTaskTaskConfigurationCrossReference_3_1_0 = (CrossReference)cTaskAssignment_3_1.eContents().get(0);
		private final RuleCall cTaskTaskConfigurationIdentifierParserRuleCall_3_1_0_1 = (RuleCall)cTaskTaskConfigurationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cProgAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cProgProgramDeclarationCrossReference_5_0 = (CrossReference)cProgAssignment_5.eContents().get(0);
		private final RuleCall cProgProgramDeclarationIdentifierParserRuleCall_5_0_1 = (RuleCall)cProgProgramDeclarationCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cProgConfAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cProgConfProgConfElementsParserRuleCall_6_1_0 = (RuleCall)cProgConfAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ProgramConfiguration:
		//	'PROGRAM' ('RETAIN' | 'NONRETAIN')? name=Identifier ('WITH' task=[TaskConfiguration|Identifier])? ':'
		//	prog=[ProgramDeclaration|Identifier] ('(' progConf=ProgConfElements ')')?;
		@Override public ParserRule getRule() { return rule; }

		//'PROGRAM' ('RETAIN' | 'NONRETAIN')? name=Identifier ('WITH' task=[TaskConfiguration|Identifier])? ':'
		//prog=[ProgramDeclaration|Identifier] ('(' progConf=ProgConfElements ')')?
		public Group getGroup() { return cGroup; }

		//'PROGRAM'
		public Keyword getPROGRAMKeyword_0() { return cPROGRAMKeyword_0; }

		//('RETAIN' | 'NONRETAIN')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'RETAIN'
		public Keyword getRETAINKeyword_1_0() { return cRETAINKeyword_1_0; }

		//'NONRETAIN'
		public Keyword getNONRETAINKeyword_1_1() { return cNONRETAINKeyword_1_1; }

		//name=Identifier
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_0() { return cNameIdentifierParserRuleCall_2_0; }

		//('WITH' task=[TaskConfiguration|Identifier])?
		public Group getGroup_3() { return cGroup_3; }

		//'WITH'
		public Keyword getWITHKeyword_3_0() { return cWITHKeyword_3_0; }

		//task=[TaskConfiguration|Identifier]
		public Assignment getTaskAssignment_3_1() { return cTaskAssignment_3_1; }

		//[TaskConfiguration|Identifier]
		public CrossReference getTaskTaskConfigurationCrossReference_3_1_0() { return cTaskTaskConfigurationCrossReference_3_1_0; }

		//Identifier
		public RuleCall getTaskTaskConfigurationIdentifierParserRuleCall_3_1_0_1() { return cTaskTaskConfigurationIdentifierParserRuleCall_3_1_0_1; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//prog=[ProgramDeclaration|Identifier]
		public Assignment getProgAssignment_5() { return cProgAssignment_5; }

		//[ProgramDeclaration|Identifier]
		public CrossReference getProgProgramDeclarationCrossReference_5_0() { return cProgProgramDeclarationCrossReference_5_0; }

		//Identifier
		public RuleCall getProgProgramDeclarationIdentifierParserRuleCall_5_0_1() { return cProgProgramDeclarationIdentifierParserRuleCall_5_0_1; }

		//('(' progConf=ProgConfElements ')')?
		public Group getGroup_6() { return cGroup_6; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//progConf=ProgConfElements
		public Assignment getProgConfAssignment_6_1() { return cProgConfAssignment_6_1; }

		//ProgConfElements
		public RuleCall getProgConfProgConfElementsParserRuleCall_6_1_0() { return cProgConfProgConfElementsParserRuleCall_6_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }
	}

	public class ProgConfElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgConfElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgconfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProgconfProgConfElementParserRuleCall_0_0 = (RuleCall)cProgconfAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cProgconfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cProgconfProgConfElementParserRuleCall_1_1_0 = (RuleCall)cProgconfAssignment_1_1.eContents().get(0);
		
		//ProgConfElements:
		//	progconf+=ProgConfElement (',' progconf+=ProgConfElement)*;
		@Override public ParserRule getRule() { return rule; }

		//progconf+=ProgConfElement (',' progconf+=ProgConfElement)*
		public Group getGroup() { return cGroup; }

		//progconf+=ProgConfElement
		public Assignment getProgconfAssignment_0() { return cProgconfAssignment_0; }

		//ProgConfElement
		public RuleCall getProgconfProgConfElementParserRuleCall_0_0() { return cProgconfProgConfElementParserRuleCall_0_0; }

		//(',' progconf+=ProgConfElement)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//progconf+=ProgConfElement
		public Assignment getProgconfAssignment_1_1() { return cProgconfAssignment_1_1; }

		//ProgConfElement
		public RuleCall getProgconfProgConfElementParserRuleCall_1_1_0() { return cProgconfProgConfElementParserRuleCall_1_1_0; }
	}

	public class ProgConfElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgConfElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFBTaskParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProgCNXNParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgConfElement:
		//	FBTask | ProgCNXN;
		@Override public ParserRule getRule() { return rule; }

		//FBTask | ProgCNXN
		public Alternatives getAlternatives() { return cAlternatives; }

		//FBTask
		public RuleCall getFBTaskParserRuleCall_0() { return cFBTaskParserRuleCall_0; }

		//ProgCNXN
		public RuleCall getProgCNXNParserRuleCall_1() { return cProgCNXNParserRuleCall_1; }
	}

	public class FBTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FBTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFbnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFbnameFunctionBlockDeclarationParserRuleCall_0_0 = (RuleCall)cFbnameAssignment_0.eContents().get(0);
		private final Keyword cWITHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTaskAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTaskTaskConfigurationParserRuleCall_2_0 = (RuleCall)cTaskAssignment_2.eContents().get(0);
		
		//FBTask:
		//	fbname=FunctionBlockDeclaration 'WITH' task=TaskConfiguration;
		@Override public ParserRule getRule() { return rule; }

		//fbname=FunctionBlockDeclaration 'WITH' task=TaskConfiguration
		public Group getGroup() { return cGroup; }

		//fbname=FunctionBlockDeclaration
		public Assignment getFbnameAssignment_0() { return cFbnameAssignment_0; }

		//FunctionBlockDeclaration
		public RuleCall getFbnameFunctionBlockDeclarationParserRuleCall_0_0() { return cFbnameFunctionBlockDeclarationParserRuleCall_0_0; }

		//'WITH'
		public Keyword getWITHKeyword_1() { return cWITHKeyword_1; }

		//task=TaskConfiguration
		public Assignment getTaskAssignment_2() { return cTaskAssignment_2; }

		//TaskConfiguration
		public RuleCall getTaskTaskConfigurationParserRuleCall_2_0() { return cTaskTaskConfigurationParserRuleCall_2_0; }
	}

	public class ProgCNXNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgCNXN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariablenameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariablenameIdentifierParserRuleCall_0_0_0 = (RuleCall)cVariablenameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cProgdAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cProgdProgDataSourceParserRuleCall_0_1_1_0 = (RuleCall)cProgdAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cProgdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cProgdDataSinkParserRuleCall_1_1_0 = (RuleCall)cProgdAssignment_1_1.eContents().get(0);
		
		//ProgCNXN:
		//	variablename=Identifier (':=' progd=ProgDataSource) | '=>' progd=DataSink;
		@Override public ParserRule getRule() { return rule; }

		//variablename=Identifier (':=' progd=ProgDataSource) | '=>' progd=DataSink
		public Alternatives getAlternatives() { return cAlternatives; }

		//variablename=Identifier (':=' progd=ProgDataSource)
		public Group getGroup_0() { return cGroup_0; }

		//variablename=Identifier
		public Assignment getVariablenameAssignment_0_0() { return cVariablenameAssignment_0_0; }

		//Identifier
		public RuleCall getVariablenameIdentifierParserRuleCall_0_0_0() { return cVariablenameIdentifierParserRuleCall_0_0_0; }

		//':=' progd=ProgDataSource
		public Group getGroup_0_1() { return cGroup_0_1; }

		//':='
		public Keyword getColonEqualsSignKeyword_0_1_0() { return cColonEqualsSignKeyword_0_1_0; }

		//progd=ProgDataSource
		public Assignment getProgdAssignment_0_1_1() { return cProgdAssignment_0_1_1; }

		//ProgDataSource
		public RuleCall getProgdProgDataSourceParserRuleCall_0_1_1_0() { return cProgdProgDataSourceParserRuleCall_0_1_1_0; }

		//'=>' progd=DataSink
		public Group getGroup_1() { return cGroup_1; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }

		//progd=DataSink
		public Assignment getProgdAssignment_1_1() { return cProgdAssignment_1_1; }

		//DataSink
		public RuleCall getProgdDataSinkParserRuleCall_1_1_0() { return cProgdDataSinkParserRuleCall_1_1_0; }
	}

	public class DataSinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DataSink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cGlobvarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cGlobvarGlobalVarParserRuleCall_0_0 = (RuleCall)cGlobvarAssignment_0.eContents().get(0);
		private final Assignment cDirvarAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDirvarDirectVariableParserRuleCall_1_0 = (RuleCall)cDirvarAssignment_1.eContents().get(0);
		
		//DataSink:
		//	globvar=GlobalVar | dirvar=DirectVariable;
		@Override public ParserRule getRule() { return rule; }

		//globvar=GlobalVar | dirvar=DirectVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//globvar=GlobalVar
		public Assignment getGlobvarAssignment_0() { return cGlobvarAssignment_0; }

		//GlobalVar
		public RuleCall getGlobvarGlobalVarParserRuleCall_0_0() { return cGlobvarGlobalVarParserRuleCall_0_0; }

		//dirvar=DirectVariable
		public Assignment getDirvarAssignment_1() { return cDirvarAssignment_1; }

		//DirectVariable
		public RuleCall getDirvarDirectVariableParserRuleCall_1_0() { return cDirvarDirectVariableParserRuleCall_1_0; }
	}

	public class ProgDataSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ProgDataSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgDataSource:
		//	Constant | DirectVariable // TODO add additional variables
		//;
		@Override public ParserRule getRule() { return rule; }

		//Constant | DirectVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//DirectVariable
		public RuleCall getDirectVariableParserRuleCall_1() { return cDirectVariableParserRuleCall_1; }
	}

	public class GlobalVarDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.GlobalVarDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVAR_GLOBALKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCONSTANTKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRETAINKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cGlobalVarDeclAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGlobalVarDeclGlobalVarDeclParserRuleCall_2_0 = (RuleCall)cGlobalVarDeclAssignment_2.eContents().get(0);
		private final Assignment cGlobalVarDeclAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGlobalVarDeclGlobalVarDeclParserRuleCall_3_0 = (RuleCall)cGlobalVarDeclAssignment_3.eContents().get(0);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GlobalVarDeclarations:
		//	'VAR_GLOBAL' ('CONSTANT' | 'RETAIN')? globalVarDecl+=GlobalVarDecl globalVarDecl+=GlobalVarDecl* 'END_VAR';
		@Override public ParserRule getRule() { return rule; }

		//'VAR_GLOBAL' ('CONSTANT' | 'RETAIN')? globalVarDecl+=GlobalVarDecl globalVarDecl+=GlobalVarDecl* 'END_VAR'
		public Group getGroup() { return cGroup; }

		//'VAR_GLOBAL'
		public Keyword getVAR_GLOBALKeyword_0() { return cVAR_GLOBALKeyword_0; }

		//('CONSTANT' | 'RETAIN')?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'CONSTANT'
		public Keyword getCONSTANTKeyword_1_0() { return cCONSTANTKeyword_1_0; }

		//'RETAIN'
		public Keyword getRETAINKeyword_1_1() { return cRETAINKeyword_1_1; }

		//globalVarDecl+=GlobalVarDecl
		public Assignment getGlobalVarDeclAssignment_2() { return cGlobalVarDeclAssignment_2; }

		//GlobalVarDecl
		public RuleCall getGlobalVarDeclGlobalVarDeclParserRuleCall_2_0() { return cGlobalVarDeclGlobalVarDeclParserRuleCall_2_0; }

		//globalVarDecl+=GlobalVarDecl*
		public Assignment getGlobalVarDeclAssignment_3() { return cGlobalVarDeclAssignment_3; }

		//GlobalVarDecl
		public RuleCall getGlobalVarDeclGlobalVarDeclParserRuleCall_3_0() { return cGlobalVarDeclGlobalVarDeclParserRuleCall_3_0; }

		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}

	public class GlobalVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.GlobalVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpecGlobalVarSpecParserRuleCall_0_0 = (RuleCall)cSpecAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecInitSpecInitParserRuleCall_2_0 = (RuleCall)cSpecInitAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//GlobalVarDecl:
		//	spec=GlobalVarSpec ':' specInit=SpecInit /*  | functionBlock=[FunctionBlockDeclaration|Identifier]  */? EOL
		//	//(comment=COMMENT)?
		//;
		@Override public ParserRule getRule() { return rule; }

		//spec=GlobalVarSpec ':' specInit=SpecInit /*  | functionBlock=[FunctionBlockDeclaration|Identifier]  */? EOL
		public Group getGroup() { return cGroup; }

		//spec=GlobalVarSpec
		public Assignment getSpecAssignment_0() { return cSpecAssignment_0; }

		//GlobalVarSpec
		public RuleCall getSpecGlobalVarSpecParserRuleCall_0_0() { return cSpecGlobalVarSpecParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//specInit=SpecInit /*  | functionBlock=[FunctionBlockDeclaration|Identifier]  */?
		public Assignment getSpecInitAssignment_2() { return cSpecInitAssignment_2; }

		//SpecInit
		public RuleCall getSpecInitSpecInitParserRuleCall_2_0() { return cSpecInitSpecInitParserRuleCall_2_0; }

		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
	}

	public class GlobalVarSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.GlobalVarSpec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalVarListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVariableGlobalVarParserRuleCall_1_0_0 = (RuleCall)cVariableAssignment_1_0.eContents().get(0);
		private final Assignment cLocationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLocationLocationParserRuleCall_1_1_0 = (RuleCall)cLocationAssignment_1_1.eContents().get(0);
		
		//GlobalVarSpec:
		//	GlobalVarList | variable=GlobalVar? location=Location;
		@Override public ParserRule getRule() { return rule; }

		//GlobalVarList | variable=GlobalVar? location=Location
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalVarList
		public RuleCall getGlobalVarListParserRuleCall_0() { return cGlobalVarListParserRuleCall_0; }

		//variable=GlobalVar? location=Location
		public Group getGroup_1() { return cGroup_1; }

		//variable=GlobalVar?
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }

		//GlobalVar
		public RuleCall getVariableGlobalVarParserRuleCall_1_0_0() { return cVariableGlobalVarParserRuleCall_1_0_0; }

		//location=Location
		public Assignment getLocationAssignment_1_1() { return cLocationAssignment_1_1; }

		//Location
		public RuleCall getLocationLocationParserRuleCall_1_1_0() { return cLocationLocationParserRuleCall_1_1_0; }
	}

	public class GlobalVarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.GlobalVarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesGlobalVarParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesGlobalVarParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		
		//GlobalVarList:
		//	variables+=GlobalVar (',' variables+=GlobalVar)*;
		@Override public ParserRule getRule() { return rule; }

		//variables+=GlobalVar (',' variables+=GlobalVar)*
		public Group getGroup() { return cGroup; }

		//variables+=GlobalVar
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }

		//GlobalVar
		public RuleCall getVariablesGlobalVarParserRuleCall_0_0() { return cVariablesGlobalVarParserRuleCall_0_0; }

		//(',' variables+=GlobalVar)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variables+=GlobalVar
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }

		//GlobalVar
		public RuleCall getVariablesGlobalVarParserRuleCall_1_1_0() { return cVariablesGlobalVarParserRuleCall_1_1_0; }
	}

	public class GlobalVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.GlobalVar");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//GlobalVar:
		//	name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier
		public Assignment getNameAssignment() { return cNameAssignment; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0() { return cNameIdentifierParserRuleCall_0; }
	}

	public class TaskConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.TaskConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTASKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTaskInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTaskInitTaskInitializationParserRuleCall_2_0 = (RuleCall)cTaskInitAssignment_2.eContents().get(0);
		
		///* Task */ // =====================================================================================================================
		//TaskConfiguration:
		//	'TASK' name=Identifier taskInit=TaskInitialization;
		@Override public ParserRule getRule() { return rule; }

		//'TASK' name=Identifier taskInit=TaskInitialization
		public Group getGroup() { return cGroup; }

		//'TASK'
		public Keyword getTASKKeyword_0() { return cTASKKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }

		//taskInit=TaskInitialization
		public Assignment getTaskInitAssignment_2() { return cTaskInitAssignment_2; }

		//TaskInitialization
		public RuleCall getTaskInitTaskInitializationParserRuleCall_2_0() { return cTaskInitTaskInitializationParserRuleCall_2_0; }
	}

	public class TaskInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.TaskInitialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSINGLEKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSingleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSingleDataSourceParserRuleCall_1_2_0 = (RuleCall)cSingleAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cINTERVALKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIntervalAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIntervalDataSourceParserRuleCall_2_2_0 = (RuleCall)cIntervalAssignment_2_2.eContents().get(0);
		private final Keyword cPRIORITYKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPriorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPriorINTTerminalRuleCall_5_0 = (RuleCall)cPriorAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TaskInitialization:
		//	'(' ('SINGLE' ':=' single=DataSource)? ('INTERVAL' ':=' interval=DataSource)? 'PRIORITY' ':=' prior=INT ')';
		@Override public ParserRule getRule() { return rule; }

		//'(' ('SINGLE' ':=' single=DataSource)? ('INTERVAL' ':=' interval=DataSource)? 'PRIORITY' ':=' prior=INT ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//('SINGLE' ':=' single=DataSource)?
		public Group getGroup_1() { return cGroup_1; }

		//'SINGLE'
		public Keyword getSINGLEKeyword_1_0() { return cSINGLEKeyword_1_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }

		//single=DataSource
		public Assignment getSingleAssignment_1_2() { return cSingleAssignment_1_2; }

		//DataSource
		public RuleCall getSingleDataSourceParserRuleCall_1_2_0() { return cSingleDataSourceParserRuleCall_1_2_0; }

		//('INTERVAL' ':=' interval=DataSource)?
		public Group getGroup_2() { return cGroup_2; }

		//'INTERVAL'
		public Keyword getINTERVALKeyword_2_0() { return cINTERVALKeyword_2_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_2_1() { return cColonEqualsSignKeyword_2_1; }

		//interval=DataSource
		public Assignment getIntervalAssignment_2_2() { return cIntervalAssignment_2_2; }

		//DataSource
		public RuleCall getIntervalDataSourceParserRuleCall_2_2_0() { return cIntervalDataSourceParserRuleCall_2_2_0; }

		//'PRIORITY'
		public Keyword getPRIORITYKeyword_3() { return cPRIORITYKeyword_3; }

		//':='
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//prior=INT
		public Assignment getPriorAssignment_5() { return cPriorAssignment_5; }

		//INT
		public RuleCall getPriorINTTerminalRuleCall_5_0() { return cPriorINTTerminalRuleCall_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class DataSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DataSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDirectVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataSource:
		//	Constant | DirectVariable // TODO add additional variables
		//;
		@Override public ParserRule getRule() { return rule; }

		//Constant | DirectVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//DirectVariable
		public RuleCall getDirectVariableParserRuleCall_1() { return cDirectVariableParserRuleCall_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacterStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTimeLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBitStringParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///* Constants / Literals */ // =====================================================================================================================
		//Constant:
		//	NumericLiteral | CharacterString | TimeLiteral | BitString | Boolean;
		@Override public ParserRule getRule() { return rule; }

		//NumericLiteral | CharacterString | TimeLiteral | BitString | Boolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_0() { return cNumericLiteralParserRuleCall_0; }

		//CharacterString
		public RuleCall getCharacterStringParserRuleCall_1() { return cCharacterStringParserRuleCall_1; }

		//TimeLiteral
		public RuleCall getTimeLiteralParserRuleCall_2() { return cTimeLiteralParserRuleCall_2; }

		//BitString
		public RuleCall getBitStringParserRuleCall_3() { return cBitStringParserRuleCall_3; }

		//Boolean
		public RuleCall getBooleanParserRuleCall_4() { return cBooleanParserRuleCall_4; }
	}

	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.NumericLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericLiteral:
		//	IntegerLiteral | RealLiteral;
		@Override public ParserRule getRule() { return rule; }

		//IntegerLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeIntegerTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIntegerValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerLiteral:
		//	(type=IntegerType '#')? value=IntegerValue;
		@Override public ParserRule getRule() { return rule; }

		//(type=IntegerType '#')? value=IntegerValue
		public Group getGroup() { return cGroup; }

		//(type=IntegerType '#')?
		public Group getGroup_0() { return cGroup_0; }

		//type=IntegerType
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//IntegerType
		public RuleCall getTypeIntegerTypeParserRuleCall_0_0_0() { return cTypeIntegerTypeParserRuleCall_0_0_0; }

		//'#'
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//value=IntegerValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IntegerValue
		public RuleCall getValueIntegerValueParserRuleCall_1_0() { return cValueIntegerValueParserRuleCall_1_0; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeRealTypeParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueRealValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RealLiteral:
		//	(type=RealType '#')? value=RealValue;
		@Override public ParserRule getRule() { return rule; }

		//(type=RealType '#')? value=RealValue
		public Group getGroup() { return cGroup; }

		//(type=RealType '#')?
		public Group getGroup_0() { return cGroup_0; }

		//type=RealType
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//RealType
		public RuleCall getTypeRealTypeParserRuleCall_0_0_0() { return cTypeRealTypeParserRuleCall_0_0_0; }

		//'#'
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//value=RealValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//RealValue
		public RuleCall getValueRealValueParserRuleCall_1_0() { return cValueRealValueParserRuleCall_1_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.IntegerValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignedIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOctalIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHexIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//IntegerValue:
		//	SignedInteger | BinaryInteger | OctalInteger | HexInteger;
		@Override public ParserRule getRule() { return rule; }

		//SignedInteger | BinaryInteger | OctalInteger | HexInteger
		public Alternatives getAlternatives() { return cAlternatives; }

		//SignedInteger
		public RuleCall getSignedIntegerParserRuleCall_0() { return cSignedIntegerParserRuleCall_0; }

		//BinaryInteger
		public RuleCall getBinaryIntegerParserRuleCall_1() { return cBinaryIntegerParserRuleCall_1; }

		//OctalInteger
		public RuleCall getOctalIntegerParserRuleCall_2() { return cOctalIntegerParserRuleCall_2; }

		//HexInteger
		public RuleCall getHexIntegerParserRuleCall_3() { return cHexIntegerParserRuleCall_3; }
	}

	public class SignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SignedInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInteger hidden():
		//	('+' | '-')? Integer;
		@Override public ParserRule getRule() { return rule; }

		//('+' | '-')? Integer
		public Group getGroup() { return cGroup; }

		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//Integer
		public RuleCall getIntegerParserRuleCall_1() { return cIntegerParserRuleCall_1; }
	}

	public class BinaryIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.BinaryInteger");
		private final RuleCall cBINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BinaryInteger hidden():
		//	BINT;
		@Override public ParserRule getRule() { return rule; }

		//BINT
		public RuleCall getBINTTerminalRuleCall() { return cBINTTerminalRuleCall; }
	}

	public class OctalIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.OctalInteger");
		private final RuleCall cOINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OctalInteger hidden():
		//	OINT;
		@Override public ParserRule getRule() { return rule; }

		//OINT
		public RuleCall getOINTTerminalRuleCall() { return cOINTTerminalRuleCall; }
	}

	public class HexIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.HexInteger");
		private final RuleCall cHINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HexInteger hidden():
		//	HINT;
		@Override public ParserRule getRule() { return rule; }

		//HINT
		public RuleCall getHINTTerminalRuleCall() { return cHINTTerminalRuleCall; }
	}

	public class RealValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.RealValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cFIXED_POINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cEXPONENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RealValue hidden():
		//	('+' | '-')? FIXED_POINT EXPONENT?;
		@Override public ParserRule getRule() { return rule; }

		//('+' | '-')? FIXED_POINT EXPONENT?
		public Group getGroup() { return cGroup; }

		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//FIXED_POINT
		public RuleCall getFIXED_POINTTerminalRuleCall_1() { return cFIXED_POINTTerminalRuleCall_1; }

		//EXPONENT?
		public RuleCall getEXPONENTTerminalRuleCall_2() { return cEXPONENTTerminalRuleCall_2; }
	}

	public class CharacterStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.CharacterString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueSINGLE_BYTE_STRINGTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueDOUBLE_BYTE_STRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//CharacterString:
		//	value=SINGLE_BYTE_STRING | value=DOUBLE_BYTE_STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=SINGLE_BYTE_STRING | value=DOUBLE_BYTE_STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=SINGLE_BYTE_STRING
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//SINGLE_BYTE_STRING
		public RuleCall getValueSINGLE_BYTE_STRINGTerminalRuleCall_0_0() { return cValueSINGLE_BYTE_STRINGTerminalRuleCall_0_0; }

		//value=DOUBLE_BYTE_STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DOUBLE_BYTE_STRING
		public RuleCall getValueDOUBLE_BYTE_STRINGTerminalRuleCall_1_0() { return cValueDOUBLE_BYTE_STRINGTerminalRuleCall_1_0; }
	}

	public class BitStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.BitString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBYTEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cWORDKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cDWORDKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cLWORDKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueBitStringValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BitString:
		//	('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#') value=BitStringValue;
		@Override public ParserRule getRule() { return rule; }

		//('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#') value=BitStringValue
		public Group getGroup() { return cGroup; }

		//'BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'BYTE#'
		public Keyword getBYTEKeyword_0_0() { return cBYTEKeyword_0_0; }

		//'WORD#'
		public Keyword getWORDKeyword_0_1() { return cWORDKeyword_0_1; }

		//'DWORD#'
		public Keyword getDWORDKeyword_0_2() { return cDWORDKeyword_0_2; }

		//'LWORD#'
		public Keyword getLWORDKeyword_0_3() { return cLWORDKeyword_0_3; }

		//value=BitStringValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//BitStringValue
		public RuleCall getValueBitStringValueParserRuleCall_1_0() { return cValueBitStringValueParserRuleCall_1_0; }
	}

	public class BitStringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.BitStringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOctalIntegerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHexIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BitStringValue:
		//	INT | BinaryInteger | OctalInteger | HexInteger;
		@Override public ParserRule getRule() { return rule; }

		//INT | BinaryInteger | OctalInteger | HexInteger
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//BinaryInteger
		public RuleCall getBinaryIntegerParserRuleCall_1() { return cBinaryIntegerParserRuleCall_1; }

		//OctalInteger
		public RuleCall getOctalIntegerParserRuleCall_2() { return cOctalIntegerParserRuleCall_2; }

		//HexInteger
		public RuleCall getHexIntegerParserRuleCall_3() { return cHexIntegerParserRuleCall_3; }
	}

	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cBOOLKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cBoolIntAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBoolIntIntegerParserRuleCall_1_0_1_0 = (RuleCall)cBoolIntAssignment_1_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Assignment cTrueAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cTrueTRUEKeyword_1_1_0_0 = (Keyword)cTrueAssignment_1_1_0.eContents().get(0);
		private final Keyword cFALSEKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//Boolean:
		//	{Boolean} ('BOOL#' boolInt=Integer | (true?='TRUE' | 'FALSE'));
		@Override public ParserRule getRule() { return rule; }

		//{Boolean} ('BOOL#' boolInt=Integer | (true?='TRUE' | 'FALSE'))
		public Group getGroup() { return cGroup; }

		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }

		//'BOOL#' boolInt=Integer | (true?='TRUE' | 'FALSE')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'BOOL#' boolInt=Integer
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'BOOL#'
		public Keyword getBOOLKeyword_1_0_0() { return cBOOLKeyword_1_0_0; }

		//boolInt=Integer
		public Assignment getBoolIntAssignment_1_0_1() { return cBoolIntAssignment_1_0_1; }

		//Integer
		public RuleCall getBoolIntIntegerParserRuleCall_1_0_1_0() { return cBoolIntIntegerParserRuleCall_1_0_1_0; }

		//(true?='TRUE' | 'FALSE')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//true?='TRUE'
		public Assignment getTrueAssignment_1_1_0() { return cTrueAssignment_1_1_0; }

		//'TRUE'
		public Keyword getTrueTRUEKeyword_1_1_0_0() { return cTrueTRUEKeyword_1_1_0_0; }

		//'FALSE'
		public Keyword getFALSEKeyword_1_1_1() { return cFALSEKeyword_1_1_1; }
	}

	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.TimeLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDurationLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeOfDayLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDateLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateAndTimeLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// ---------------------------------------------------------------------------------------------------------------------
		//TimeLiteral:
		//	DurationLiteral | TimeOfDayLiteral | DateLiteral | DateAndTimeLiteral;
		@Override public ParserRule getRule() { return rule; }

		//DurationLiteral | TimeOfDayLiteral | DateLiteral | DateAndTimeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//DurationLiteral
		public RuleCall getDurationLiteralParserRuleCall_0() { return cDurationLiteralParserRuleCall_0; }

		//TimeOfDayLiteral
		public RuleCall getTimeOfDayLiteralParserRuleCall_1() { return cTimeOfDayLiteralParserRuleCall_1; }

		//DateLiteral
		public RuleCall getDateLiteralParserRuleCall_2() { return cDateLiteralParserRuleCall_2; }

		//DateAndTimeLiteral
		public RuleCall getDateAndTimeLiteralParserRuleCall_3() { return cDateAndTimeLiteralParserRuleCall_3; }
	}

	public class DurationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DurationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cTIMEKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDurationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDurationDAYSTerminalRuleCall_2_0_0 = (RuleCall)cDurationAssignment_2_0.eContents().get(0);
		private final Assignment cDurationAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDurationHOURSTerminalRuleCall_2_1_0 = (RuleCall)cDurationAssignment_2_1.eContents().get(0);
		private final Assignment cDurationAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cDurationMINUTESTerminalRuleCall_2_2_0 = (RuleCall)cDurationAssignment_2_2.eContents().get(0);
		private final Assignment cDurationAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cDurationSECONDSTerminalRuleCall_2_3_0 = (RuleCall)cDurationAssignment_2_3.eContents().get(0);
		private final Assignment cDurationAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cDurationMILLISECONDSTerminalRuleCall_2_4_0 = (RuleCall)cDurationAssignment_2_4.eContents().get(0);
		
		//DurationLiteral:
		//	('T#' | 't#' | 'TIME#') '-'? (duration=DAYS | duration=HOURS | duration=MINUTES | duration=SECONDS |
		//	duration=MILLISECONDS);
		@Override public ParserRule getRule() { return rule; }

		//('T#' | 't#' | 'TIME#') '-'? (duration=DAYS | duration=HOURS | duration=MINUTES | duration=SECONDS |
		//duration=MILLISECONDS)
		public Group getGroup() { return cGroup; }

		////('T#' | 't#' | 'TIME#') ('-')? ( duration=DAYS | duration=HOURS | duration=MINUTES | duration=SECONDS | duration=MILLISECONDS)	
		//'T#' | 't#' | 'TIME#'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'T#'
		public Keyword getTKeyword_0_0() { return cTKeyword_0_0; }

		//'t#'
		public Keyword getTKeyword_0_1() { return cTKeyword_0_1; }

		//'TIME#'
		public Keyword getTIMEKeyword_0_2() { return cTIMEKeyword_0_2; }

		//'-'?
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//duration=DAYS | duration=HOURS | duration=MINUTES | duration=SECONDS | duration=MILLISECONDS
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//duration=DAYS
		public Assignment getDurationAssignment_2_0() { return cDurationAssignment_2_0; }

		//DAYS
		public RuleCall getDurationDAYSTerminalRuleCall_2_0_0() { return cDurationDAYSTerminalRuleCall_2_0_0; }

		//duration=HOURS
		public Assignment getDurationAssignment_2_1() { return cDurationAssignment_2_1; }

		//HOURS
		public RuleCall getDurationHOURSTerminalRuleCall_2_1_0() { return cDurationHOURSTerminalRuleCall_2_1_0; }

		//duration=MINUTES
		public Assignment getDurationAssignment_2_2() { return cDurationAssignment_2_2; }

		//MINUTES
		public RuleCall getDurationMINUTESTerminalRuleCall_2_2_0() { return cDurationMINUTESTerminalRuleCall_2_2_0; }

		//duration=SECONDS
		public Assignment getDurationAssignment_2_3() { return cDurationAssignment_2_3; }

		//SECONDS
		public RuleCall getDurationSECONDSTerminalRuleCall_2_3_0() { return cDurationSECONDSTerminalRuleCall_2_3_0; }

		//duration=MILLISECONDS
		public Assignment getDurationAssignment_2_4() { return cDurationAssignment_2_4; }

		//MILLISECONDS
		public RuleCall getDurationMILLISECONDSTerminalRuleCall_2_4_0() { return cDurationMILLISECONDSTerminalRuleCall_2_4_0; }
	}

	public class TimeOfDayLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.TimeOfDayLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTIME_OF_DAYKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTODKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cHourAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHourIntegerParserRuleCall_1_0 = (RuleCall)cHourAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinuteAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinuteIntegerParserRuleCall_3_0 = (RuleCall)cMinuteAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSecondAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSecondIntegerParserRuleCall_5_0 = (RuleCall)cSecondAssignment_5.eContents().get(0);
		
		//TimeOfDayLiteral:
		//	('TIME_OF_DAY#' | 'TOD#') hour=Integer ':' minute=Integer ':' second=Integer;
		@Override public ParserRule getRule() { return rule; }

		//('TIME_OF_DAY#' | 'TOD#') hour=Integer ':' minute=Integer ':' second=Integer
		public Group getGroup() { return cGroup; }

		//'TIME_OF_DAY#' | 'TOD#'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'TIME_OF_DAY#'
		public Keyword getTIME_OF_DAYKeyword_0_0() { return cTIME_OF_DAYKeyword_0_0; }

		//'TOD#'
		public Keyword getTODKeyword_0_1() { return cTODKeyword_0_1; }

		//hour=Integer
		public Assignment getHourAssignment_1() { return cHourAssignment_1; }

		//Integer
		public RuleCall getHourIntegerParserRuleCall_1_0() { return cHourIntegerParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//minute=Integer
		public Assignment getMinuteAssignment_3() { return cMinuteAssignment_3; }

		//Integer
		public RuleCall getMinuteIntegerParserRuleCall_3_0() { return cMinuteIntegerParserRuleCall_3_0; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//second=Integer
		public Assignment getSecondAssignment_5() { return cSecondAssignment_5; }

		//Integer
		public RuleCall getSecondIntegerParserRuleCall_5_0() { return cSecondIntegerParserRuleCall_5_0; }
	}

	public class DateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDATEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cYearAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYearIntegerParserRuleCall_1_0 = (RuleCall)cYearAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthIntegerParserRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayIntegerParserRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		
		//DateLiteral:
		//	('DATE#' | 'D#') year=Integer '-' month=Integer '-' day=Integer;
		@Override public ParserRule getRule() { return rule; }

		//('DATE#' | 'D#') year=Integer '-' month=Integer '-' day=Integer
		public Group getGroup() { return cGroup; }

		//'DATE#' | 'D#'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'DATE#'
		public Keyword getDATEKeyword_0_0() { return cDATEKeyword_0_0; }

		//'D#'
		public Keyword getDKeyword_0_1() { return cDKeyword_0_1; }

		//year=Integer
		public Assignment getYearAssignment_1() { return cYearAssignment_1; }

		//Integer
		public RuleCall getYearIntegerParserRuleCall_1_0() { return cYearIntegerParserRuleCall_1_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//month=Integer
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }

		//Integer
		public RuleCall getMonthIntegerParserRuleCall_3_0() { return cMonthIntegerParserRuleCall_3_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }

		//day=Integer
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }

		//Integer
		public RuleCall getDayIntegerParserRuleCall_5_0() { return cDayIntegerParserRuleCall_5_0; }
	}

	public class DateAndTimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DateAndTimeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDATE_AND_TIMEKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cYearAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYearIntegerParserRuleCall_1_0 = (RuleCall)cYearAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthIntegerParserRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDayIntegerParserRuleCall_5_0 = (RuleCall)cDayAssignment_5.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cHourAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cHourIntegerParserRuleCall_7_0 = (RuleCall)cHourAssignment_7.eContents().get(0);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cMinuteAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMinuteIntegerParserRuleCall_9_0 = (RuleCall)cMinuteAssignment_9.eContents().get(0);
		private final Keyword cColonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSecondAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cSecondIntegerParserRuleCall_11_0 = (RuleCall)cSecondAssignment_11.eContents().get(0);
		
		//DateAndTimeLiteral:
		//	('DATE_AND_TIME#' | 'DT#') year=Integer '-' month=Integer '-' day=Integer '-' hour=Integer ':' minute=Integer ':'
		//	second=Integer;
		@Override public ParserRule getRule() { return rule; }

		//('DATE_AND_TIME#' | 'DT#') year=Integer '-' month=Integer '-' day=Integer '-' hour=Integer ':' minute=Integer ':'
		//second=Integer
		public Group getGroup() { return cGroup; }

		//'DATE_AND_TIME#' | 'DT#'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'DATE_AND_TIME#'
		public Keyword getDATE_AND_TIMEKeyword_0_0() { return cDATE_AND_TIMEKeyword_0_0; }

		//'DT#'
		public Keyword getDTKeyword_0_1() { return cDTKeyword_0_1; }

		//year=Integer
		public Assignment getYearAssignment_1() { return cYearAssignment_1; }

		//Integer
		public RuleCall getYearIntegerParserRuleCall_1_0() { return cYearIntegerParserRuleCall_1_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//month=Integer
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }

		//Integer
		public RuleCall getMonthIntegerParserRuleCall_3_0() { return cMonthIntegerParserRuleCall_3_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }

		//day=Integer
		public Assignment getDayAssignment_5() { return cDayAssignment_5; }

		//Integer
		public RuleCall getDayIntegerParserRuleCall_5_0() { return cDayIntegerParserRuleCall_5_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_6() { return cHyphenMinusKeyword_6; }

		//hour=Integer
		public Assignment getHourAssignment_7() { return cHourAssignment_7; }

		//Integer
		public RuleCall getHourIntegerParserRuleCall_7_0() { return cHourIntegerParserRuleCall_7_0; }

		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }

		//minute=Integer
		public Assignment getMinuteAssignment_9() { return cMinuteAssignment_9; }

		//Integer
		public RuleCall getMinuteIntegerParserRuleCall_9_0() { return cMinuteIntegerParserRuleCall_9_0; }

		//':'
		public Keyword getColonKeyword_10() { return cColonKeyword_10; }

		//second=Integer
		public Assignment getSecondAssignment_11() { return cSecondAssignment_11; }

		//Integer
		public RuleCall getSecondIntegerParserRuleCall_11_0() { return cSecondIntegerParserRuleCall_11_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLETTERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///* hidden parser rules */ // =====================================================================================================================
		//Identifier hidden():
		//	LETTER | ID;
		@Override public ParserRule getRule() { return rule; }

		//LETTER | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//LETTER
		public RuleCall getLETTERTerminalRuleCall_0() { return cLETTERTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.Integer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Integer hidden():
		//	DIGIT | INT;
		@Override public ParserRule getRule() { return rule; }

		//DIGIT | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_0() { return cDIGITTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ModelElements pModel;
	private final ModelElementElements pModelElement;
	private final LibraryElementElements pLibraryElement;
	private final LibraryElementDeclarationElements pLibraryElementDeclaration;
	private final DataTypeElements pDataType;
	private final NonGenericTypeElements pNonGenericType;
	private final ElementaryTypeElements pElementaryType;
	private final StringTypeElements pStringType;
	private final NumericTypeElements pNumericType;
	private final IntegerTypeElements pIntegerType;
	private final SignedIntegerTypeElements pSignedIntegerType;
	private final PlainIntegerTypeElements pPlainIntegerType;
	private final UnsignedIntegerTypeElements pUnsignedIntegerType;
	private final RealTypeElements pRealType;
	private final DateTypeElements pDateType;
	private final BitStringTypeElements pBitStringType;
	private final GenericTypeElements pGenericType;
	private final DerivedTypeElements pDerivedType;
	private final DataTypeDeclarationElements pDataTypeDeclaration;
	private final TypeDeclarationElements pTypeDeclaration;
	private final SimpleTypeDeclarationElements pSimpleTypeDeclaration;
	private final SpecInitElements pSpecInit;
	private final RangeDeclarationElements pRangeDeclaration;
	private final EnumDeclarationElements pEnumDeclaration;
	private final ArrayDeclarationElements pArrayDeclaration;
	private final SubRangeWithSignElements pSubRangeWithSign;
	private final EnumerationElements pEnumeration;
	private final EnumeratedValueElements pEnumeratedValue;
	private final ArrayInitializationElements pArrayInitialization;
	private final ArrayInitialElementsElements pArrayInitialElements;
	private final InitialElementElements pInitialElement;
	private final StructureTypeDeclarationElements pStructureTypeDeclaration;
	private final StructureDeclarationElements pStructureDeclaration;
	private final StructureElementDeclarationElements pStructureElementDeclaration;
	private final InitializedStructureElements pInitializedStructure;
	private final StructureInitializationElements pStructureInitialization;
	private final StructureElementInitializationElements pStructureElementInitialization;
	private final StringDeclarationElements pStringDeclaration;
	private final VariableElements pVariable;
	private final VariableAccessElements pVariableAccess;
	private final DirectVariableElements pDirectVariable;
	private final SymbolicVariableAccessElements pSymbolicVariableAccess;
	private final NamedVariableAccessElements pNamedVariableAccess;
	private final MultiElementVariableElements pMultiElementVariable;
	private final ArrayVariableElements pArrayVariable;
	private final StructuredVariableElements pStructuredVariable;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final XorExpressionElements pXorExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonElements pComparison;
	private final AddExpressionElements pAddExpression;
	private final TermElements pTerm;
	private final PowerExpressionElements pPowerExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final ParenthesesExpressionElements pParenthesesExpression;
	private final ParamAssignmentElements pParamAssignment;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final IoVarDeclarationsElements pIoVarDeclarations;
	private final InputDeclarationsElements pInputDeclarations;
	private final InputDeclarationElements pInputDeclaration;
	private final EdgeDeclarationElements pEdgeDeclaration;
	private final DeclSpecificationElements pDeclSpecification;
	private final VarDeclSpecificationElements pVarDeclSpecification;
	private final EdgeDeclSpecificationElements pEdgeDeclSpecification;
	private final Var1ListElements pVar1List;
	private final OutputDeclarationsElements pOutputDeclarations;
	private final VarInitDeclElements pVarInitDecl;
	private final InputOutputDeclarationsElements pInputOutputDeclarations;
	private final VarDeclarationElements pVarDeclaration;
	private final FunctionBodyElements pFunctionBody;
	private final InstructionListElements pInstructionList;
	private final InstructionElements pInstruction;
	private final LabelElements pLabel;
	private final OperationElements pOperation;
	private final SimpleOperationElements pSimpleOperation;
	private final ExpressionOperationElements pExpressionOperation;
	private final JmpOperationElements pJmpOperation;
	private final SimpleOperatorElements pSimpleOperator;
	private final ExpressionOperatorElements pExpressionOperator;
	private final JmpOperatorElements pJmpOperator;
	private final OperandElements pOperand;
	private final ReferencedOperandElements pReferencedOperand;
	private final SimpleInstructionListElements pSimpleInstructionList;
	private final SimpleInstructionElements pSimpleInstruction;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final AssignStatementElements pAssignStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final IfStatementElements pIfStatement;
	private final ElseIfElements pElseIf;
	private final CaseStatementElements pCaseStatement;
	private final CaseElementElements pCaseElement;
	private final CaseListElements pCaseList;
	private final CaseListElementElements pCaseListElement;
	private final FunctionBlockDeclarationElements pFunctionBlockDeclaration;
	private final FunctionBlockVarDeclarationsElements pFunctionBlockVarDeclarations;
	private final OtherVarDeclarationsElements pOtherVarDeclarations;
	private final VarDeclarationsElements pVarDeclarations;
	private final FunctionBlockBodyElements pFunctionBlockBody;
	private final ProgramDeclarationElements pProgramDeclaration;
	private final ProgramVarDeclarationsElements pProgramVarDeclarations;
	private final LocatedVarDeclarationsElements pLocatedVarDeclarations;
	private final LocatedVarDeclarationElements pLocatedVarDeclaration;
	private final LocationElements pLocation;
	private final ProgramAccessDeclsElements pProgramAccessDecls;
	private final ProgramAccessDeclElements pProgramAccessDecl;
	private final DirectionElements pDirection;
	private final ConfigurationDeclarationElements pConfigurationDeclaration;
	private final ResourceDeclarationElements pResourceDeclaration;
	private final SingleResourceDeclarationElements pSingleResourceDeclaration;
	private final ProgramConfigurationElements pProgramConfiguration;
	private final ProgConfElementsElements pProgConfElements;
	private final ProgConfElementElements pProgConfElement;
	private final FBTaskElements pFBTask;
	private final ProgCNXNElements pProgCNXN;
	private final DataSinkElements pDataSink;
	private final ProgDataSourceElements pProgDataSource;
	private final GlobalVarDeclarationsElements pGlobalVarDeclarations;
	private final GlobalVarDeclElements pGlobalVarDecl;
	private final GlobalVarSpecElements pGlobalVarSpec;
	private final GlobalVarListElements pGlobalVarList;
	private final GlobalVarElements pGlobalVar;
	private final TaskConfigurationElements pTaskConfiguration;
	private final TaskInitializationElements pTaskInitialization;
	private final DataSourceElements pDataSource;
	private final ConstantElements pConstant;
	private final NumericLiteralElements pNumericLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final RealLiteralElements pRealLiteral;
	private final IntegerValueElements pIntegerValue;
	private final SignedIntegerElements pSignedInteger;
	private final BinaryIntegerElements pBinaryInteger;
	private final OctalIntegerElements pOctalInteger;
	private final HexIntegerElements pHexInteger;
	private final RealValueElements pRealValue;
	private final CharacterStringElements pCharacterString;
	private final BitStringElements pBitString;
	private final BitStringValueElements pBitStringValue;
	private final BooleanElements pBoolean;
	private final TimeLiteralElements pTimeLiteral;
	private final DurationLiteralElements pDurationLiteral;
	private final TimeOfDayLiteralElements pTimeOfDayLiteral;
	private final DateLiteralElements pDateLiteral;
	private final DateAndTimeLiteralElements pDateAndTimeLiteral;
	private final IdentifierElements pIdentifier;
	private final IntegerElements pInteger;
	private final TerminalRule tFIELD_SELECTOR;
	private final TerminalRule tDAYS;
	private final TerminalRule tHOURS;
	private final TerminalRule tMINUTES;
	private final TerminalRule tSECONDS;
	private final TerminalRule tMILLISECONDS;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tID;
	private final TerminalRule tBINT;
	private final TerminalRule tOINT;
	private final TerminalRule tHINT;
	private final TerminalRule tINT;
	private final TerminalRule tSUB_RANGE;
	private final TerminalRule tFIXED_POINT;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tSINGLE_BYTE_STRING;
	private final TerminalRule tDOUBLE_BYTE_STRING;
	private final TerminalRule tDIRECT_VARIABLE_ID;
	private final TerminalRule tEOL;
	private final TerminalRule tMY_NL;
	private final TerminalRule tML_COMMENT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IecGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pModelElement = new ModelElementElements();
		this.pLibraryElement = new LibraryElementElements();
		this.pLibraryElementDeclaration = new LibraryElementDeclarationElements();
		this.pDataType = new DataTypeElements();
		this.pNonGenericType = new NonGenericTypeElements();
		this.pElementaryType = new ElementaryTypeElements();
		this.pStringType = new StringTypeElements();
		this.pNumericType = new NumericTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pSignedIntegerType = new SignedIntegerTypeElements();
		this.pPlainIntegerType = new PlainIntegerTypeElements();
		this.pUnsignedIntegerType = new UnsignedIntegerTypeElements();
		this.pRealType = new RealTypeElements();
		this.pDateType = new DateTypeElements();
		this.pBitStringType = new BitStringTypeElements();
		this.pGenericType = new GenericTypeElements();
		this.pDerivedType = new DerivedTypeElements();
		this.pDataTypeDeclaration = new DataTypeDeclarationElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pSimpleTypeDeclaration = new SimpleTypeDeclarationElements();
		this.pSpecInit = new SpecInitElements();
		this.pRangeDeclaration = new RangeDeclarationElements();
		this.pEnumDeclaration = new EnumDeclarationElements();
		this.pArrayDeclaration = new ArrayDeclarationElements();
		this.pSubRangeWithSign = new SubRangeWithSignElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumeratedValue = new EnumeratedValueElements();
		this.pArrayInitialization = new ArrayInitializationElements();
		this.pArrayInitialElements = new ArrayInitialElementsElements();
		this.pInitialElement = new InitialElementElements();
		this.pStructureTypeDeclaration = new StructureTypeDeclarationElements();
		this.pStructureDeclaration = new StructureDeclarationElements();
		this.pStructureElementDeclaration = new StructureElementDeclarationElements();
		this.pInitializedStructure = new InitializedStructureElements();
		this.pStructureInitialization = new StructureInitializationElements();
		this.pStructureElementInitialization = new StructureElementInitializationElements();
		this.pStringDeclaration = new StringDeclarationElements();
		this.pVariable = new VariableElements();
		this.pVariableAccess = new VariableAccessElements();
		this.pDirectVariable = new DirectVariableElements();
		this.pSymbolicVariableAccess = new SymbolicVariableAccessElements();
		this.pNamedVariableAccess = new NamedVariableAccessElements();
		this.pMultiElementVariable = new MultiElementVariableElements();
		this.pArrayVariable = new ArrayVariableElements();
		this.pStructuredVariable = new StructuredVariableElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pXorExpression = new XorExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pAddExpression = new AddExpressionElements();
		this.pTerm = new TermElements();
		this.pPowerExpression = new PowerExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pParenthesesExpression = new ParenthesesExpressionElements();
		this.pParamAssignment = new ParamAssignmentElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pIoVarDeclarations = new IoVarDeclarationsElements();
		this.pInputDeclarations = new InputDeclarationsElements();
		this.pInputDeclaration = new InputDeclarationElements();
		this.pEdgeDeclaration = new EdgeDeclarationElements();
		this.pDeclSpecification = new DeclSpecificationElements();
		this.pVarDeclSpecification = new VarDeclSpecificationElements();
		this.pEdgeDeclSpecification = new EdgeDeclSpecificationElements();
		this.pVar1List = new Var1ListElements();
		this.pOutputDeclarations = new OutputDeclarationsElements();
		this.pVarInitDecl = new VarInitDeclElements();
		this.pInputOutputDeclarations = new InputOutputDeclarationsElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.pInstructionList = new InstructionListElements();
		this.pInstruction = new InstructionElements();
		this.pLabel = new LabelElements();
		this.pOperation = new OperationElements();
		this.pSimpleOperation = new SimpleOperationElements();
		this.pExpressionOperation = new ExpressionOperationElements();
		this.pJmpOperation = new JmpOperationElements();
		this.pSimpleOperator = new SimpleOperatorElements();
		this.pExpressionOperator = new ExpressionOperatorElements();
		this.pJmpOperator = new JmpOperatorElements();
		this.pOperand = new OperandElements();
		this.pReferencedOperand = new ReferencedOperandElements();
		this.pSimpleInstructionList = new SimpleInstructionListElements();
		this.pSimpleInstruction = new SimpleInstructionElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pAssignStatement = new AssignStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIf = new ElseIfElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseElement = new CaseElementElements();
		this.pCaseList = new CaseListElements();
		this.pCaseListElement = new CaseListElementElements();
		this.pFunctionBlockDeclaration = new FunctionBlockDeclarationElements();
		this.pFunctionBlockVarDeclarations = new FunctionBlockVarDeclarationsElements();
		this.pOtherVarDeclarations = new OtherVarDeclarationsElements();
		this.pVarDeclarations = new VarDeclarationsElements();
		this.pFunctionBlockBody = new FunctionBlockBodyElements();
		this.pProgramDeclaration = new ProgramDeclarationElements();
		this.pProgramVarDeclarations = new ProgramVarDeclarationsElements();
		this.pLocatedVarDeclarations = new LocatedVarDeclarationsElements();
		this.pLocatedVarDeclaration = new LocatedVarDeclarationElements();
		this.pLocation = new LocationElements();
		this.pProgramAccessDecls = new ProgramAccessDeclsElements();
		this.pProgramAccessDecl = new ProgramAccessDeclElements();
		this.pDirection = new DirectionElements();
		this.pConfigurationDeclaration = new ConfigurationDeclarationElements();
		this.pResourceDeclaration = new ResourceDeclarationElements();
		this.pSingleResourceDeclaration = new SingleResourceDeclarationElements();
		this.pProgramConfiguration = new ProgramConfigurationElements();
		this.pProgConfElements = new ProgConfElementsElements();
		this.pProgConfElement = new ProgConfElementElements();
		this.pFBTask = new FBTaskElements();
		this.pProgCNXN = new ProgCNXNElements();
		this.pDataSink = new DataSinkElements();
		this.pProgDataSource = new ProgDataSourceElements();
		this.pGlobalVarDeclarations = new GlobalVarDeclarationsElements();
		this.pGlobalVarDecl = new GlobalVarDeclElements();
		this.pGlobalVarSpec = new GlobalVarSpecElements();
		this.pGlobalVarList = new GlobalVarListElements();
		this.pGlobalVar = new GlobalVarElements();
		this.pTaskConfiguration = new TaskConfigurationElements();
		this.pTaskInitialization = new TaskInitializationElements();
		this.pDataSource = new DataSourceElements();
		this.pConstant = new ConstantElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pSignedInteger = new SignedIntegerElements();
		this.pBinaryInteger = new BinaryIntegerElements();
		this.pOctalInteger = new OctalIntegerElements();
		this.pHexInteger = new HexIntegerElements();
		this.pRealValue = new RealValueElements();
		this.pCharacterString = new CharacterStringElements();
		this.pBitString = new BitStringElements();
		this.pBitStringValue = new BitStringValueElements();
		this.pBoolean = new BooleanElements();
		this.pTimeLiteral = new TimeLiteralElements();
		this.pDurationLiteral = new DurationLiteralElements();
		this.pTimeOfDayLiteral = new TimeOfDayLiteralElements();
		this.pDateLiteral = new DateLiteralElements();
		this.pDateAndTimeLiteral = new DateAndTimeLiteralElements();
		this.pIdentifier = new IdentifierElements();
		this.pInteger = new IntegerElements();
		this.tFIELD_SELECTOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FIELD_SELECTOR");
		this.tDAYS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DAYS");
		this.tHOURS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.HOURS");
		this.tMINUTES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.MINUTES");
		this.tSECONDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SECONDS");
		this.tMILLISECONDS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.MILLISECONDS");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DIGIT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ID");
		this.tBINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.BINT");
		this.tOINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.OINT");
		this.tHINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.HINT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.INT");
		this.tSUB_RANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SUB_RANGE");
		this.tFIXED_POINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.FIXED_POINT");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.EXPONENT");
		this.tSINGLE_BYTE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.SINGLE_BYTE_STRING");
		this.tDOUBLE_BYTE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DOUBLE_BYTE_STRING");
		this.tDIRECT_VARIABLE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.DIRECT_VARIABLE_ID");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.EOL");
		this.tMY_NL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.MY_NL");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bichler.iec.Iec.ML_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.bichler.iec.Iec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	modelElement+=ModelElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ModelElement:
	//	LibraryElement | LibraryElementDeclaration;
	public ModelElementElements getModelElementAccess() {
		return pModelElement;
	}
	
	public ParserRule getModelElementRule() {
		return getModelElementAccess().getRule();
	}

	////library_element_name ::= data_type_name | function_name | function_block_type_name |program_type_name
	////| resource_type_name | configuration_name
	//LibraryElement:
	//	DataType | FunctionDeclaration;
	public LibraryElementElements getLibraryElementAccess() {
		return pLibraryElement;
	}
	
	public ParserRule getLibraryElementRule() {
		return getLibraryElementAccess().getRule();
	}

	////library_element_declaration ::= data_type_declaration
	////| function_declaration | function_block_declaration | program_declaration | configuration_declaration
	//LibraryElementDeclaration:
	//	DataTypeDeclaration | FunctionBlockDeclaration | ProgramDeclaration | ConfigurationDeclaration | ResourceDeclaration;
	public LibraryElementDeclarationElements getLibraryElementDeclarationAccess() {
		return pLibraryElementDeclaration;
	}
	
	public ParserRule getLibraryElementDeclarationRule() {
		return getLibraryElementDeclarationAccess().getRule();
	}

	///* Types */ // =====================================================================================================================
	//DataType:
	//	NonGenericType | GenericType;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//NonGenericType:
	//	ElementaryType | DerivedType;
	public NonGenericTypeElements getNonGenericTypeAccess() {
		return pNonGenericType;
	}
	
	public ParserRule getNonGenericTypeRule() {
		return getNonGenericTypeAccess().getRule();
	}

	//ElementaryType:
	//	NumericType | DateType | BitStringType | StringType | typeName='WSTRING' | typeName='TIME';
	public ElementaryTypeElements getElementaryTypeAccess() {
		return pElementaryType;
	}
	
	public ParserRule getElementaryTypeRule() {
		return getElementaryTypeAccess().getRule();
	}

	//StringType:
	//	{StringType}
	//	'STRING';
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//NumericType:
	//	IntegerType | RealType;
	public NumericTypeElements getNumericTypeAccess() {
		return pNumericType;
	}
	
	public ParserRule getNumericTypeRule() {
		return getNumericTypeAccess().getRule();
	}

	//IntegerType:
	//	SignedIntegerType | PlainIntegerType | UnsignedIntegerType;
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}

	//SignedIntegerType:
	//	typeName='SINT' | typeName='DINT' | typeName='LINT';
	public SignedIntegerTypeElements getSignedIntegerTypeAccess() {
		return pSignedIntegerType;
	}
	
	public ParserRule getSignedIntegerTypeRule() {
		return getSignedIntegerTypeAccess().getRule();
	}

	//PlainIntegerType:
	//	{SignedIntegerType}
	//	'INT';
	public PlainIntegerTypeElements getPlainIntegerTypeAccess() {
		return pPlainIntegerType;
	}
	
	public ParserRule getPlainIntegerTypeRule() {
		return getPlainIntegerTypeAccess().getRule();
	}

	//UnsignedIntegerType:
	//	typeName='USINT' | typeName='UINT' | typeName='UDINT' | typeName='ULINT';
	public UnsignedIntegerTypeElements getUnsignedIntegerTypeAccess() {
		return pUnsignedIntegerType;
	}
	
	public ParserRule getUnsignedIntegerTypeRule() {
		return getUnsignedIntegerTypeAccess().getRule();
	}

	//RealType:
	//	typeName='REAL' | typeName='LREAL';
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}

	//DateType:
	//	typeName='DATE' | typeName='TIME_OF_DAY' | typeName='TOD' | typeName='DATE_AND_TIME' | typeName='DT';
	public DateTypeElements getDateTypeAccess() {
		return pDateType;
	}
	
	public ParserRule getDateTypeRule() {
		return getDateTypeAccess().getRule();
	}

	//BitStringType:
	//	typeName='BOOL' | typeName='BYTE' | typeName='WORD' | typeName='DWORD' | typeName='LWORD';
	public BitStringTypeElements getBitStringTypeAccess() {
		return pBitStringType;
	}
	
	public ParserRule getBitStringTypeRule() {
		return getBitStringTypeAccess().getRule();
	}

	//GenericType:
	//	typeName='ANY' | typeName='ANY_DERIVED' | typeName='ANY_ELEMENTARY' | typeName='ANY_MAGNITUDE' | typeName='ANY_NUM' |
	//	typeName='ANY_REAL' | typeName='ANY_INT' | typeName='ANY_BIT' | typeName='ANY_STRING' | typeName='ANY_DATE';
	public GenericTypeElements getGenericTypeAccess() {
		return pGenericType;
	}
	
	public ParserRule getGenericTypeRule() {
		return getGenericTypeAccess().getRule();
	}

	//DerivedType:
	//	name=Identifier;
	public DerivedTypeElements getDerivedTypeAccess() {
		return pDerivedType;
	}
	
	public ParserRule getDerivedTypeRule() {
		return getDerivedTypeAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//DataTypeDeclaration:
	//	'TYPE' name=Identifier ':'
	//	typeDeclaration+=TypeDeclaration EOL (typeDeclaration+=TypeDeclaration EOL)*
	//	'END_TYPE';
	public DataTypeDeclarationElements getDataTypeDeclarationAccess() {
		return pDataTypeDeclaration;
	}
	
	public ParserRule getDataTypeDeclarationRule() {
		return getDataTypeDeclarationAccess().getRule();
	}

	//TypeDeclaration:
	//	SimpleTypeDeclaration | RangeDeclaration | EnumDeclaration | ArrayDeclaration | StructureTypeDeclaration |
	//	StringDeclaration;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//SimpleTypeDeclaration:
	//	derivedType=DerivedType ':' specInit=SpecInit;
	public SimpleTypeDeclarationElements getSimpleTypeDeclarationAccess() {
		return pSimpleTypeDeclaration;
	}
	
	public ParserRule getSimpleTypeDeclarationRule() {
		return getSimpleTypeDeclarationAccess().getRule();
	}

	//SpecInit:
	//	(baseType=ElementaryType | baseType=DerivedType) (':=' (constant=Constant | constant=EnumeratedValue |
	//	constant=ArrayInitialization))?;
	public SpecInitElements getSpecInitAccess() {
		return pSpecInit;
	}
	
	public ParserRule getSpecInitRule() {
		return getSpecInitAccess().getRule();
	}

	//RangeDeclaration:
	//	derivedType=DerivedType ':' baseType=ElementaryType ('(' range=SubRangeWithSign ')') (':=' constant=SignedInteger)?;
	public RangeDeclarationElements getRangeDeclarationAccess() {
		return pRangeDeclaration;
	}
	
	public ParserRule getRangeDeclarationRule() {
		return getRangeDeclarationAccess().getRule();
	}

	//EnumDeclaration:
	//	derivedType=DerivedType ':' '(' enumeration=Enumeration ')' (':=' constant=EnumeratedValue)?;
	public EnumDeclarationElements getEnumDeclarationAccess() {
		return pEnumDeclaration;
	}
	
	public ParserRule getEnumDeclarationRule() {
		return getEnumDeclarationAccess().getRule();
	}

	//ArrayDeclaration:
	//	derivedType=DerivedType ':' 'ARRAY' '[' ranges+=SubRangeWithSign (',' ranges+=SubRangeWithSign)* ']' 'OF'
	//	baseType=NonGenericType (':=' constant=ArrayInitialization)?;
	public ArrayDeclarationElements getArrayDeclarationAccess() {
		return pArrayDeclaration;
	}
	
	public ParserRule getArrayDeclarationRule() {
		return getArrayDeclarationAccess().getRule();
	}

	//SubRangeWithSign hidden():
	//	('+' | '-')? SUB_RANGE;
	public SubRangeWithSignElements getSubRangeWithSignAccess() {
		return pSubRangeWithSign;
	}
	
	public ParserRule getSubRangeWithSignRule() {
		return getSubRangeWithSignAccess().getRule();
	}

	//Enumeration:
	//	values+=EnumeratedValue (',' values+=EnumeratedValue)*;
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}

	//EnumeratedValue:
	//	derivedType=DerivedType '#' name=Identifier;
	public EnumeratedValueElements getEnumeratedValueAccess() {
		return pEnumeratedValue;
	}
	
	public ParserRule getEnumeratedValueRule() {
		return getEnumeratedValueAccess().getRule();
	}

	//ArrayInitialization:
	//	'[' initialElements+=ArrayInitialElements (',' initialElements+=ArrayInitialElements)* ']';
	public ArrayInitializationElements getArrayInitializationAccess() {
		return pArrayInitialization;
	}
	
	public ParserRule getArrayInitializationRule() {
		return getArrayInitializationAccess().getRule();
	}

	//ArrayInitialElements:
	//	initialElement=InitialElement | index=Integer '(' initialElement=InitialElement ')';
	public ArrayInitialElementsElements getArrayInitialElementsAccess() {
		return pArrayInitialElements;
	}
	
	public ParserRule getArrayInitialElementsRule() {
		return getArrayInitialElementsAccess().getRule();
	}

	//InitialElement:
	//	Constant | EnumeratedValue | ArrayInitialization | StructureInitialization;
	public InitialElementElements getInitialElementAccess() {
		return pInitialElement;
	}
	
	public ParserRule getInitialElementRule() {
		return getInitialElementAccess().getRule();
	}

	//StructureTypeDeclaration:
	//	derivedType=DerivedType ':' (declaration=StructureDeclaration | initialization=InitializedStructure);
	public StructureTypeDeclarationElements getStructureTypeDeclarationAccess() {
		return pStructureTypeDeclaration;
	}
	
	public ParserRule getStructureTypeDeclarationRule() {
		return getStructureTypeDeclarationAccess().getRule();
	}

	//StructureDeclaration:
	//	'STRUCT'
	//	structureElement+=StructureElementDeclaration EOL (structureElement+=StructureElementDeclaration EOL)*
	//	'END_STRUCT';
	public StructureDeclarationElements getStructureDeclarationAccess() {
		return pStructureDeclaration;
	}
	
	public ParserRule getStructureDeclarationRule() {
		return getStructureDeclarationAccess().getRule();
	}

	//StructureElementDeclaration:
	//	name=Identifier ':' specInit=SpecInit;
	public StructureElementDeclarationElements getStructureElementDeclarationAccess() {
		return pStructureElementDeclaration;
	}
	
	public ParserRule getStructureElementDeclarationRule() {
		return getStructureElementDeclarationAccess().getRule();
	}

	//InitializedStructure:
	//	derivedType=DerivedType ':=' initialization=StructureInitialization;
	public InitializedStructureElements getInitializedStructureAccess() {
		return pInitializedStructure;
	}
	
	public ParserRule getInitializedStructureRule() {
		return getInitializedStructureAccess().getRule();
	}

	//StructureInitialization:
	//	'(' initialElements+=StructureElementInitialization (',' initialElements+=StructureElementInitialization)* ')';
	public StructureInitializationElements getStructureInitializationAccess() {
		return pStructureInitialization;
	}
	
	public ParserRule getStructureInitializationRule() {
		return getStructureInitializationAccess().getRule();
	}

	//StructureElementInitialization:
	//	name=Identifier ':=' value=InitialElement;
	public StructureElementInitializationElements getStructureElementInitializationAccess() {
		return pStructureElementInitialization;
	}
	
	public ParserRule getStructureElementInitializationRule() {
		return getStructureElementInitializationAccess().getRule();
	}

	//StringDeclaration:
	//	derivedType=DerivedType ':' (string?='STRING' | 'WSTRING')? ('[' size=Integer ']') (':='
	//	initialValue=CharacterString)?;
	public StringDeclarationElements getStringDeclarationAccess() {
		return pStringDeclaration;
	}
	
	public ParserRule getStringDeclarationRule() {
		return getStringDeclarationAccess().getRule();
	}

	///* Variables */ // =====================================================================================================================
	//Variable:
	//	name=Identifier;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//VariableAccess:
	//	DirectVariable | SymbolicVariableAccess;
	public VariableAccessElements getVariableAccessAccess() {
		return pVariableAccess;
	}
	
	public ParserRule getVariableAccessRule() {
		return getVariableAccessAccess().getRule();
	}

	//DirectVariable:
	//	name=DIRECT_VARIABLE_ID;
	public DirectVariableElements getDirectVariableAccess() {
		return pDirectVariable;
	}
	
	public ParserRule getDirectVariableRule() {
		return getDirectVariableAccess().getRule();
	}

	//SymbolicVariableAccess:
	//	NamedVariableAccess | MultiElementVariable;
	public SymbolicVariableAccessElements getSymbolicVariableAccessAccess() {
		return pSymbolicVariableAccess;
	}
	
	public ParserRule getSymbolicVariableAccessRule() {
		return getSymbolicVariableAccessAccess().getRule();
	}

	//NamedVariableAccess:
	//	namedVariable=[Variable|Identifier];
	public NamedVariableAccessElements getNamedVariableAccessAccess() {
		return pNamedVariableAccess;
	}
	
	public ParserRule getNamedVariableAccessRule() {
		return getNamedVariableAccessAccess().getRule();
	}

	//MultiElementVariable:
	//	ArrayVariable | StructuredVariable;
	public MultiElementVariableElements getMultiElementVariableAccess() {
		return pMultiElementVariable;
	}
	
	public ParserRule getMultiElementVariableRule() {
		return getMultiElementVariableAccess().getRule();
	}

	//ArrayVariable:
	//	subscriptedVariable=[Variable|Identifier] '[' subscripts+=Expression (',' subscripts+=Expression)* ']';
	public ArrayVariableElements getArrayVariableAccess() {
		return pArrayVariable;
	}
	
	public ParserRule getArrayVariableRule() {
		return getArrayVariableAccess().getRule();
	}

	//StructuredVariable:
	//	recordVariable=[Variable|Identifier] fieldSelector=FIELD_SELECTOR;
	public StructuredVariableElements getStructuredVariableAccess() {
		return pStructuredVariable;
	}
	
	public ParserRule getStructuredVariableRule() {
		return getStructuredVariableAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	///* Expressions */ // =====================================================================================================================
	//Expression:
	//	OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//OrExpression Expression:
	//	XorExpression ({BinaryExpression.left=current} operator='OR' right=XorExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//XorExpression Expression:
	//	AndExpression ({BinaryExpression.left=current} operator='XOR' right=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}

	//AndExpression Expression:
	//	Comparison ({BinaryExpression.left=current} operator=('&' | 'AND') right=Comparison)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//Comparison Expression:
	//	AddExpression ({BinaryExpression.left=current} operator=('=' | '<>' | '<' | '>' | '<=' | '>=') right=AddExpression)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//AddExpression Expression:
	//	Term ({BinaryExpression.left=current} operator=('-' | '+') right=Term)*;
	public AddExpressionElements getAddExpressionAccess() {
		return pAddExpression;
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}

	//Term Expression:
	//	PowerExpression ({BinaryExpression.left=current} operator=('*' | '/' | 'MOD') right=PowerExpression)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//PowerExpression Expression:
	//	UnaryExpression ({BinaryExpression.left=current} operator='**' right=UnaryExpression)*;
	public PowerExpressionElements getPowerExpressionAccess() {
		return pPowerExpression;
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//UnaryExpression Expression:
	//	{UnaryExpression} operator=('NOT' | '-') expression=UnaryExpression |
	//	=> PrimaryExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//PrimaryExpression Expression:
	//	Constant | variable=VariableAccess | ParenthesesExpression | fbname=[FunctionDeclaration|Identifier] openbr='('
	//	paramassignment+=ParamAssignment (','
	//	paramassignment+=ParamAssignment)* closebr=')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//ParenthesesExpression Expression:
	//	openbr='(' expression=Expression closebr=')';
	public ParenthesesExpressionElements getParenthesesExpressionAccess() {
		return pParenthesesExpression;
	}
	
	public ParserRule getParenthesesExpressionRule() {
		return getParenthesesExpressionAccess().getRule();
	}

	//ParamAssignment:
	//	(variablename=[NamedVariableAccess|Identifier] ':=')? expression=Expression | not?='NOT'?
	//	variable1=[NamedVariableAccess|Identifier] ':>' variable2=[Variable|Identifier];
	public ParamAssignmentElements getParamAssignmentAccess() {
		return pParamAssignment;
	}
	
	public ParserRule getParamAssignmentRule() {
		return getParamAssignmentAccess().getRule();
	}

	///* Functions */ // =====================================================================================================================
	//FunctionDeclaration:
	//	'FUNCTION' name=Identifier ':' type=NonGenericType
	//	ioVarDeclarations+=IoVarDeclarations*
	//	body=FunctionBody?
	//	'END_FUNCTION';
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//IoVarDeclarations:
	//	InputDeclarations | OutputDeclarations | InputOutputDeclarations;
	public IoVarDeclarationsElements getIoVarDeclarationsAccess() {
		return pIoVarDeclarations;
	}
	
	public ParserRule getIoVarDeclarationsRule() {
		return getIoVarDeclarationsAccess().getRule();
	}

	//InputDeclarations:
	//	'VAR_INPUT' ('RETAIN' | 'NON_RETAIN')?
	//	declarations+=InputDeclaration EOL (declarations+=InputDeclaration EOL)*
	//	'END_VAR';
	public InputDeclarationsElements getInputDeclarationsAccess() {
		return pInputDeclarations;
	}
	
	public ParserRule getInputDeclarationsRule() {
		return getInputDeclarationsAccess().getRule();
	}

	//InputDeclaration:
	//	var1List=Var1List ':' declSpecification=DeclSpecification;
	public InputDeclarationElements getInputDeclarationAccess() {
		return pInputDeclaration;
	}
	
	public ParserRule getInputDeclarationRule() {
		return getInputDeclarationAccess().getRule();
	}

	//EdgeDeclaration:
	//	var1List=Var1List ':' 'BOOL' ('R_EDGE' | 'F_EDGE');
	public EdgeDeclarationElements getEdgeDeclarationAccess() {
		return pEdgeDeclaration;
	}
	
	public ParserRule getEdgeDeclarationRule() {
		return getEdgeDeclarationAccess().getRule();
	}

	//DeclSpecification:
	//	VarDeclSpecification | EdgeDeclSpecification;
	public DeclSpecificationElements getDeclSpecificationAccess() {
		return pDeclSpecification;
	}
	
	public ParserRule getDeclSpecificationRule() {
		return getDeclSpecificationAccess().getRule();
	}

	//VarDeclSpecification:
	//	specInit=SpecInit;
	public VarDeclSpecificationElements getVarDeclSpecificationAccess() {
		return pVarDeclSpecification;
	}
	
	public ParserRule getVarDeclSpecificationRule() {
		return getVarDeclSpecificationAccess().getRule();
	}

	//EdgeDeclSpecification:
	//	'BOOL' (rEdge?='R_EDGE' | fEdge?='F_EDGE');
	public EdgeDeclSpecificationElements getEdgeDeclSpecificationAccess() {
		return pEdgeDeclSpecification;
	}
	
	public ParserRule getEdgeDeclSpecificationRule() {
		return getEdgeDeclSpecificationAccess().getRule();
	}

	//Var1List:
	//	variables+=Variable (',' variables+=Variable)*;
	public Var1ListElements getVar1ListAccess() {
		return pVar1List;
	}
	
	public ParserRule getVar1ListRule() {
		return getVar1ListAccess().getRule();
	}

	//OutputDeclarations:
	//	'VAR_OUTPUT' ('RETAIN' | 'NON_RETAIN')?
	//	initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)*
	//	'END_VAR';
	public OutputDeclarationsElements getOutputDeclarationsAccess() {
		return pOutputDeclarations;
	}
	
	public ParserRule getOutputDeclarationsRule() {
		return getOutputDeclarationsAccess().getRule();
	}

	//VarInitDecl:
	//	var1List=Var1List ':' specInit=SpecInit;
	public VarInitDeclElements getVarInitDeclAccess() {
		return pVarInitDecl;
	}
	
	public ParserRule getVarInitDeclRule() {
		return getVarInitDeclAccess().getRule();
	}

	//InputOutputDeclarations:
	//	'VAR_IN_OUT'
	//	initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)*
	//	'END_VAR';
	public InputOutputDeclarationsElements getInputOutputDeclarationsAccess() {
		return pInputOutputDeclarations;
	}
	
	public ParserRule getInputOutputDeclarationsRule() {
		return getInputOutputDeclarationsAccess().getRule();
	}

	//VarDeclaration:
	//	'var_declaration';
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//FunctionBody:
	//	InstructionList | StatementList;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//InstructionList:
	//	instructions+=Instruction instructions+=Instruction*;
	public InstructionListElements getInstructionListAccess() {
		return pInstructionList;
	}
	
	public ParserRule getInstructionListRule() {
		return getInstructionListAccess().getRule();
	}

	//Instruction:
	//	(label=Label ':')? instruction=Operation;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Label:
	//	name=Identifier;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Operation:
	//	SimpleOperation | ExpressionOperation | JmpOperation;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//SimpleOperation:
	//	operator=SimpleOperator operand=Operand?;
	public SimpleOperationElements getSimpleOperationAccess() {
		return pSimpleOperation;
	}
	
	public ParserRule getSimpleOperationRule() {
		return getSimpleOperationAccess().getRule();
	}

	//ExpressionOperation:
	//	operator=ExpressionOperator '(' operand=Operand? simpleInstructionList=SimpleInstructionList? ')';
	public ExpressionOperationElements getExpressionOperationAccess() {
		return pExpressionOperation;
	}
	
	public ParserRule getExpressionOperationRule() {
		return getExpressionOperationAccess().getRule();
	}

	//JmpOperation:
	//	operator=JmpOperator label=[Label|Identifier];
	public JmpOperationElements getJmpOperationAccess() {
		return pJmpOperation;
	}
	
	public ParserRule getJmpOperationRule() {
		return getJmpOperationAccess().getRule();
	}

	//SimpleOperator:
	//	'LD' | 'LDN';
	public SimpleOperatorElements getSimpleOperatorAccess() {
		return pSimpleOperator;
	}
	
	public ParserRule getSimpleOperatorRule() {
		return getSimpleOperatorAccess().getRule();
	}

	//ExpressionOperator:
	//	'AND' | '&' | 'ADD';
	public ExpressionOperatorElements getExpressionOperatorAccess() {
		return pExpressionOperator;
	}
	
	public ParserRule getExpressionOperatorRule() {
		return getExpressionOperatorAccess().getRule();
	}

	//JmpOperator:
	//	'JMP' | 'JMPC' | 'JMPCN';
	public JmpOperatorElements getJmpOperatorAccess() {
		return pJmpOperator;
	}
	
	public ParserRule getJmpOperatorRule() {
		return getJmpOperatorAccess().getRule();
	}

	//Operand:
	//	constant=Constant | reference=ReferencedOperand;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//ReferencedOperand:
	//	VariableAccess | EnumeratedValue;
	public ReferencedOperandElements getReferencedOperandAccess() {
		return pReferencedOperand;
	}
	
	public ParserRule getReferencedOperandRule() {
		return getReferencedOperandAccess().getRule();
	}

	//SimpleInstructionList:
	//	instructions+=SimpleInstruction instructions+=SimpleInstruction*;
	public SimpleInstructionListElements getSimpleInstructionListAccess() {
		return pSimpleInstructionList;
	}
	
	public ParserRule getSimpleInstructionListRule() {
		return getSimpleInstructionListAccess().getRule();
	}

	//SimpleInstruction:
	//	SimpleOperation | ExpressionOperation;
	public SimpleInstructionElements getSimpleInstructionAccess() {
		return pSimpleInstruction;
	}
	
	public ParserRule getSimpleInstructionRule() {
		return getSimpleInstructionAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//StatementList:
	//	statements+=Statement EOL (statements+=Statement EOL)*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}

	//Statement:
	//	AssignStatement | SelectionStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//AssignStatement:
	//	variable=[Variable|Identifier] ':=' expression=Expression;
	public AssignStatementElements getAssignStatementAccess() {
		return pAssignStatement;
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}

	//SelectionStatement:
	//	IfStatement | CaseStatement;
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}

	//IfStatement:
	//	'IF' ifExpression=Expression 'THEN' thenStatementList=StatementList elseIfs+=ElseIf* ('ELSE'
	//	elseStatementList=StatementList)? 'END_IF';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ElseIf:
	//	'ELSIF' expression=Expression 'THEN' statementList=StatementList;
	public ElseIfElements getElseIfAccess() {
		return pElseIf;
	}
	
	public ParserRule getElseIfRule() {
		return getElseIfAccess().getRule();
	}

	//CaseStatement:
	//	'CASE' expression=Expression 'OF' caseElements+=CaseElement* ('ELSE' elseStatementList=StatementList)? 'END_CASE';
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}

	//CaseElement:
	//	caseList=CaseList ':' statementList=StatementList;
	public CaseElementElements getCaseElementAccess() {
		return pCaseElement;
	}
	
	public ParserRule getCaseElementRule() {
		return getCaseElementAccess().getRule();
	}

	//CaseList:
	//	elements+=CaseListElement (',' elements+=CaseListElement)*;
	public CaseListElements getCaseListAccess() {
		return pCaseList;
	}
	
	public ParserRule getCaseListRule() {
		return getCaseListAccess().getRule();
	}

	//CaseListElement:
	//	subRange=SUB_RANGE | integer=SignedInteger | enumeratedValue=[EnumeratedValue|Identifier];
	public CaseListElementElements getCaseListElementAccess() {
		return pCaseListElement;
	}
	
	public ParserRule getCaseListElementRule() {
		return getCaseListElementAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//FunctionBlockDeclaration:
	//	'FUNCTION_BLOCK' name=Identifier varDeclarations+=FunctionBlockVarDeclarations* body=FunctionBlockBody?
	//	'END_FUNCTION_BLOCK';
	public FunctionBlockDeclarationElements getFunctionBlockDeclarationAccess() {
		return pFunctionBlockDeclaration;
	}
	
	public ParserRule getFunctionBlockDeclarationRule() {
		return getFunctionBlockDeclarationAccess().getRule();
	}

	//FunctionBlockVarDeclarations:
	//	IoVarDeclarations | OtherVarDeclarations;
	public FunctionBlockVarDeclarationsElements getFunctionBlockVarDeclarationsAccess() {
		return pFunctionBlockVarDeclarations;
	}
	
	public ParserRule getFunctionBlockVarDeclarationsRule() {
		return getFunctionBlockVarDeclarationsAccess().getRule();
	}

	//OtherVarDeclarations:
	//	VarDeclarations;
	public OtherVarDeclarationsElements getOtherVarDeclarationsAccess() {
		return pOtherVarDeclarations;
	}
	
	public ParserRule getOtherVarDeclarationsRule() {
		return getOtherVarDeclarationsAccess().getRule();
	}

	//VarDeclarations:
	//	'VAR' constant?='CONSTANT'? initDecls+=VarInitDecl EOL (initDecls+=VarInitDecl EOL)* 'END_VAR';
	public VarDeclarationsElements getVarDeclarationsAccess() {
		return pVarDeclarations;
	}
	
	public ParserRule getVarDeclarationsRule() {
		return getVarDeclarationsAccess().getRule();
	}

	//FunctionBlockBody:
	//	InstructionList | StatementList;
	public FunctionBlockBodyElements getFunctionBlockBodyAccess() {
		return pFunctionBlockBody;
	}
	
	public ParserRule getFunctionBlockBodyRule() {
		return getFunctionBlockBodyAccess().getRule();
	}

	///* Program */ // =====================================================================================================================
	//ProgramDeclaration:
	//	'PROGRAM' name=Identifier varDeclarations+=ProgramVarDeclarations* body=FunctionBlockBody? 'END_PROGRAM';
	public ProgramDeclarationElements getProgramDeclarationAccess() {
		return pProgramDeclaration;
	}
	
	public ParserRule getProgramDeclarationRule() {
		return getProgramDeclarationAccess().getRule();
	}

	//ProgramVarDeclarations:
	//	IoVarDeclarations | OtherVarDeclarations | LocatedVarDeclarations | ProgramAccessDecls;
	public ProgramVarDeclarationsElements getProgramVarDeclarationsAccess() {
		return pProgramVarDeclarations;
	}
	
	public ParserRule getProgramVarDeclarationsRule() {
		return getProgramVarDeclarationsAccess().getRule();
	}

	//LocatedVarDeclarations:
	//	'VAR' ('CONSTANT' | 'RETAIN' | 'NON_RETAIN') locatedVarDeclaration+=LocatedVarDeclaration EOL
	//	(locatedVarDeclaration+=LocatedVarDeclaration EOL)* 'END_VAR';
	public LocatedVarDeclarationsElements getLocatedVarDeclarationsAccess() {
		return pLocatedVarDeclarations;
	}
	
	public ParserRule getLocatedVarDeclarationsRule() {
		return getLocatedVarDeclarationsAccess().getRule();
	}

	//LocatedVarDeclaration:
	//	name=Identifier? location=Location ':' specInit=SpecInit;
	public LocatedVarDeclarationElements getLocatedVarDeclarationAccess() {
		return pLocatedVarDeclaration;
	}
	
	public ParserRule getLocatedVarDeclarationRule() {
		return getLocatedVarDeclarationAccess().getRule();
	}

	//Location:
	//	'AT' directVariable=DirectVariable;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}

	//ProgramAccessDecls:
	//	'VAR_ACCESS' programAccessDecl+=ProgramAccessDecl EOL (programAccessDecl+=ProgramAccessDecl EOL)* 'END_VAR';
	public ProgramAccessDeclsElements getProgramAccessDeclsAccess() {
		return pProgramAccessDecls;
	}
	
	public ParserRule getProgramAccessDeclsRule() {
		return getProgramAccessDeclsAccess().getRule();
	}

	//ProgramAccessDecl:
	//	accessName=Variable ':' symbolicVariable=NamedVariableAccess ':' typeName=NonGenericType direction=Direction?;
	public ProgramAccessDeclElements getProgramAccessDeclAccess() {
		return pProgramAccessDecl;
	}
	
	public ParserRule getProgramAccessDeclRule() {
		return getProgramAccessDeclAccess().getRule();
	}

	//Direction:
	//	'READ_WRITE' | 'READ_ONLY';
	public DirectionElements getDirectionAccess() {
		return pDirection;
	}
	
	public ParserRule getDirectionRule() {
		return getDirectionAccess().getRule();
	}

	///* Configuration */ // =====================================================================================================================	 
	//ConfigurationDeclaration:
	//	'CONFIGURATION' name=Identifier globalVarDeclarations=GlobalVarDeclarations? resdecl=ResourceDeclaration
	//	'END_CONFIGURATION';
	public ConfigurationDeclarationElements getConfigurationDeclarationAccess() {
		return pConfigurationDeclaration;
	}
	
	public ParserRule getConfigurationDeclarationRule() {
		return getConfigurationDeclarationAccess().getRule();
	}

	//ResourceDeclaration:
	//	'RESOURCE' name=Identifier 'ON' resname=Identifier globalVarDeclarations=GlobalVarDeclarations?
	//	singleresource=SingleResourceDeclaration 'END_RESOURCE';
	public ResourceDeclarationElements getResourceDeclarationAccess() {
		return pResourceDeclaration;
	}
	
	public ParserRule getResourceDeclarationRule() {
		return getResourceDeclarationAccess().getRule();
	}

	//SingleResourceDeclaration:
	//	(taskConf=TaskConfiguration EOL)? (programConf+=ProgramConfiguration EOL) (programConf+=ProgramConfiguration EOL)?;
	public SingleResourceDeclarationElements getSingleResourceDeclarationAccess() {
		return pSingleResourceDeclaration;
	}
	
	public ParserRule getSingleResourceDeclarationRule() {
		return getSingleResourceDeclarationAccess().getRule();
	}

	//ProgramConfiguration:
	//	'PROGRAM' ('RETAIN' | 'NONRETAIN')? name=Identifier ('WITH' task=[TaskConfiguration|Identifier])? ':'
	//	prog=[ProgramDeclaration|Identifier] ('(' progConf=ProgConfElements ')')?;
	public ProgramConfigurationElements getProgramConfigurationAccess() {
		return pProgramConfiguration;
	}
	
	public ParserRule getProgramConfigurationRule() {
		return getProgramConfigurationAccess().getRule();
	}

	//ProgConfElements:
	//	progconf+=ProgConfElement (',' progconf+=ProgConfElement)*;
	public ProgConfElementsElements getProgConfElementsAccess() {
		return pProgConfElements;
	}
	
	public ParserRule getProgConfElementsRule() {
		return getProgConfElementsAccess().getRule();
	}

	//ProgConfElement:
	//	FBTask | ProgCNXN;
	public ProgConfElementElements getProgConfElementAccess() {
		return pProgConfElement;
	}
	
	public ParserRule getProgConfElementRule() {
		return getProgConfElementAccess().getRule();
	}

	//FBTask:
	//	fbname=FunctionBlockDeclaration 'WITH' task=TaskConfiguration;
	public FBTaskElements getFBTaskAccess() {
		return pFBTask;
	}
	
	public ParserRule getFBTaskRule() {
		return getFBTaskAccess().getRule();
	}

	//ProgCNXN:
	//	variablename=Identifier (':=' progd=ProgDataSource) | '=>' progd=DataSink;
	public ProgCNXNElements getProgCNXNAccess() {
		return pProgCNXN;
	}
	
	public ParserRule getProgCNXNRule() {
		return getProgCNXNAccess().getRule();
	}

	//DataSink:
	//	globvar=GlobalVar | dirvar=DirectVariable;
	public DataSinkElements getDataSinkAccess() {
		return pDataSink;
	}
	
	public ParserRule getDataSinkRule() {
		return getDataSinkAccess().getRule();
	}

	//ProgDataSource:
	//	Constant | DirectVariable // TODO add additional variables
	//;
	public ProgDataSourceElements getProgDataSourceAccess() {
		return pProgDataSource;
	}
	
	public ParserRule getProgDataSourceRule() {
		return getProgDataSourceAccess().getRule();
	}

	//GlobalVarDeclarations:
	//	'VAR_GLOBAL' ('CONSTANT' | 'RETAIN')? globalVarDecl+=GlobalVarDecl globalVarDecl+=GlobalVarDecl* 'END_VAR';
	public GlobalVarDeclarationsElements getGlobalVarDeclarationsAccess() {
		return pGlobalVarDeclarations;
	}
	
	public ParserRule getGlobalVarDeclarationsRule() {
		return getGlobalVarDeclarationsAccess().getRule();
	}

	//GlobalVarDecl:
	//	spec=GlobalVarSpec ':' specInit=SpecInit /*  | functionBlock=[FunctionBlockDeclaration|Identifier]  */? EOL
	//	//(comment=COMMENT)?
	//;
	public GlobalVarDeclElements getGlobalVarDeclAccess() {
		return pGlobalVarDecl;
	}
	
	public ParserRule getGlobalVarDeclRule() {
		return getGlobalVarDeclAccess().getRule();
	}

	//GlobalVarSpec:
	//	GlobalVarList | variable=GlobalVar? location=Location;
	public GlobalVarSpecElements getGlobalVarSpecAccess() {
		return pGlobalVarSpec;
	}
	
	public ParserRule getGlobalVarSpecRule() {
		return getGlobalVarSpecAccess().getRule();
	}

	//GlobalVarList:
	//	variables+=GlobalVar (',' variables+=GlobalVar)*;
	public GlobalVarListElements getGlobalVarListAccess() {
		return pGlobalVarList;
	}
	
	public ParserRule getGlobalVarListRule() {
		return getGlobalVarListAccess().getRule();
	}

	//GlobalVar:
	//	name=Identifier;
	public GlobalVarElements getGlobalVarAccess() {
		return pGlobalVar;
	}
	
	public ParserRule getGlobalVarRule() {
		return getGlobalVarAccess().getRule();
	}

	///* Task */ // =====================================================================================================================
	//TaskConfiguration:
	//	'TASK' name=Identifier taskInit=TaskInitialization;
	public TaskConfigurationElements getTaskConfigurationAccess() {
		return pTaskConfiguration;
	}
	
	public ParserRule getTaskConfigurationRule() {
		return getTaskConfigurationAccess().getRule();
	}

	//TaskInitialization:
	//	'(' ('SINGLE' ':=' single=DataSource)? ('INTERVAL' ':=' interval=DataSource)? 'PRIORITY' ':=' prior=INT ')';
	public TaskInitializationElements getTaskInitializationAccess() {
		return pTaskInitialization;
	}
	
	public ParserRule getTaskInitializationRule() {
		return getTaskInitializationAccess().getRule();
	}

	//DataSource:
	//	Constant | DirectVariable // TODO add additional variables
	//;
	public DataSourceElements getDataSourceAccess() {
		return pDataSource;
	}
	
	public ParserRule getDataSourceRule() {
		return getDataSourceAccess().getRule();
	}

	///* Constants / Literals */ // =====================================================================================================================
	//Constant:
	//	NumericLiteral | CharacterString | TimeLiteral | BitString | Boolean;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//NumericLiteral:
	//	IntegerLiteral | RealLiteral;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	(type=IntegerType '#')? value=IntegerValue;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//RealLiteral:
	//	(type=RealType '#')? value=RealValue;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//IntegerValue:
	//	SignedInteger | BinaryInteger | OctalInteger | HexInteger;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//SignedInteger hidden():
	//	('+' | '-')? Integer;
	public SignedIntegerElements getSignedIntegerAccess() {
		return pSignedInteger;
	}
	
	public ParserRule getSignedIntegerRule() {
		return getSignedIntegerAccess().getRule();
	}

	//BinaryInteger hidden():
	//	BINT;
	public BinaryIntegerElements getBinaryIntegerAccess() {
		return pBinaryInteger;
	}
	
	public ParserRule getBinaryIntegerRule() {
		return getBinaryIntegerAccess().getRule();
	}

	//OctalInteger hidden():
	//	OINT;
	public OctalIntegerElements getOctalIntegerAccess() {
		return pOctalInteger;
	}
	
	public ParserRule getOctalIntegerRule() {
		return getOctalIntegerAccess().getRule();
	}

	//HexInteger hidden():
	//	HINT;
	public HexIntegerElements getHexIntegerAccess() {
		return pHexInteger;
	}
	
	public ParserRule getHexIntegerRule() {
		return getHexIntegerAccess().getRule();
	}

	//RealValue hidden():
	//	('+' | '-')? FIXED_POINT EXPONENT?;
	public RealValueElements getRealValueAccess() {
		return pRealValue;
	}
	
	public ParserRule getRealValueRule() {
		return getRealValueAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//CharacterString:
	//	value=SINGLE_BYTE_STRING | value=DOUBLE_BYTE_STRING;
	public CharacterStringElements getCharacterStringAccess() {
		return pCharacterString;
	}
	
	public ParserRule getCharacterStringRule() {
		return getCharacterStringAccess().getRule();
	}

	//BitString:
	//	('BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#') value=BitStringValue;
	public BitStringElements getBitStringAccess() {
		return pBitString;
	}
	
	public ParserRule getBitStringRule() {
		return getBitStringAccess().getRule();
	}

	//BitStringValue:
	//	INT | BinaryInteger | OctalInteger | HexInteger;
	public BitStringValueElements getBitStringValueAccess() {
		return pBitStringValue;
	}
	
	public ParserRule getBitStringValueRule() {
		return getBitStringValueAccess().getRule();
	}

	//Boolean:
	//	{Boolean} ('BOOL#' boolInt=Integer | (true?='TRUE' | 'FALSE'));
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//// ---------------------------------------------------------------------------------------------------------------------
	//TimeLiteral:
	//	DurationLiteral | TimeOfDayLiteral | DateLiteral | DateAndTimeLiteral;
	public TimeLiteralElements getTimeLiteralAccess() {
		return pTimeLiteral;
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}

	//DurationLiteral:
	//	('T#' | 't#' | 'TIME#') '-'? (duration=DAYS | duration=HOURS | duration=MINUTES | duration=SECONDS |
	//	duration=MILLISECONDS);
	public DurationLiteralElements getDurationLiteralAccess() {
		return pDurationLiteral;
	}
	
	public ParserRule getDurationLiteralRule() {
		return getDurationLiteralAccess().getRule();
	}

	//TimeOfDayLiteral:
	//	('TIME_OF_DAY#' | 'TOD#') hour=Integer ':' minute=Integer ':' second=Integer;
	public TimeOfDayLiteralElements getTimeOfDayLiteralAccess() {
		return pTimeOfDayLiteral;
	}
	
	public ParserRule getTimeOfDayLiteralRule() {
		return getTimeOfDayLiteralAccess().getRule();
	}

	//DateLiteral:
	//	('DATE#' | 'D#') year=Integer '-' month=Integer '-' day=Integer;
	public DateLiteralElements getDateLiteralAccess() {
		return pDateLiteral;
	}
	
	public ParserRule getDateLiteralRule() {
		return getDateLiteralAccess().getRule();
	}

	//DateAndTimeLiteral:
	//	('DATE_AND_TIME#' | 'DT#') year=Integer '-' month=Integer '-' day=Integer '-' hour=Integer ':' minute=Integer ':'
	//	second=Integer;
	public DateAndTimeLiteralElements getDateAndTimeLiteralAccess() {
		return pDateAndTimeLiteral;
	}
	
	public ParserRule getDateAndTimeLiteralRule() {
		return getDateAndTimeLiteralAccess().getRule();
	}

	///* hidden parser rules */ // =====================================================================================================================
	//Identifier hidden():
	//	LETTER | ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Integer hidden():
	//	DIGIT | INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}

	//terminal FIELD_SELECTOR:
	//	'.' ID;
	public TerminalRule getFIELD_SELECTORRule() {
		return tFIELD_SELECTOR;
	} 

	//terminal DAYS:
	//	(DIGIT+ ('.' DIGIT+)? 'd') ('_'? HOURS)?;
	public TerminalRule getDAYSRule() {
		return tDAYS;
	} 

	//terminal HOURS:
	//	(DIGIT+ ('.' DIGIT+)? 'h') ('_'? MINUTES)?;
	public TerminalRule getHOURSRule() {
		return tHOURS;
	} 

	//terminal MINUTES:
	//	(DIGIT+ ('.' DIGIT+)? 'm') ('_'? SECONDS)?;
	public TerminalRule getMINUTESRule() {
		return tMINUTES;
	} 

	//terminal SECONDS:
	//	(DIGIT+ ('.' DIGIT+)? 's') ('_'? MILLISECONDS)?;
	public TerminalRule getSECONDSRule() {
		return tSECONDS;
	} 

	//terminal MILLISECONDS:
	//	DIGIT+ ('.' DIGIT+)? 'ms';
	public TerminalRule getMILLISECONDSRule() {
		return tMILLISECONDS;
	} 

	//terminal LETTER:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	} 

	//terminal DIGIT:
	//	'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	} 

	//@Override
	//terminal ID:
	//	(LETTER | '_' (LETTER | DIGIT)) ('_'? (LETTER | DIGIT))*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal BINT returns ecore::EInt:
	//	'2#' ('0' | '1') ('_'? ('0' | '1'))*;
	public TerminalRule getBINTRule() {
		return tBINT;
	} 

	//terminal OINT returns ecore::EInt:
	//	'8#' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7') ('_'? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7'))*;
	public TerminalRule getOINTRule() {
		return tOINT;
	} 

	//terminal HINT returns ecore::EInt:
	//	'16#' ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F') ('_'? ('0' |
	//	'1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F'))*;
	public TerminalRule getHINTRule() {
		return tHINT;
	} 

	//@Override
	//terminal INT returns ecore::EInt:
	//	('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') ('_'? ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' |
	//	'8' | '9'))*;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal SUB_RANGE:
	//	INT '..' ('+' | '-')? INT;
	public TerminalRule getSUB_RANGERule() {
		return tSUB_RANGE;
	} 

	//terminal FIXED_POINT:
	//	INT '.' INT;
	public TerminalRule getFIXED_POINTRule() {
		return tFIXED_POINT;
	} 

	//terminal EXPONENT:
	//	('E' | 'e') ('+' | '-')? INT;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	} 

	//terminal SINGLE_BYTE_STRING:
	//	"'" ('$' ('L' | 'N' | 'P' | 'R' | 'T' | 'l' | 'n' | 'p' | 'r' | 't' | "'" | '$' | ('0' | '1' | '2' | '3' | '4' | '5'
	//	| '6'
	//	| '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' |
	//	'A' | 'B' | 'C' | 'D' | 'E' | 'F')) | !('$' | "'"))*
	//	"'";
	public TerminalRule getSINGLE_BYTE_STRINGRule() {
		return tSINGLE_BYTE_STRING;
	} 

	//terminal DOUBLE_BYTE_STRING:
	//	'"' ('$' ('L' | 'N' | 'P' | 'R' | 'T' | 'l' | 'n' | 'p' | 'r' | 't' | '"' | '$' | ('0' | '1' | '2' | '3' | '4' | '5'
	//	| '6'
	//	| '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' |
	//	'A' | 'B' | 'C' | 'D' | 'E' | 'F') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D'
	//	| 'E' | 'F') ('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F')) | !('$'
	//	| '"'))*
	//	'"';
	public TerminalRule getDOUBLE_BYTE_STRINGRule() {
		return tDOUBLE_BYTE_STRING;
	} 

	//terminal DIRECT_VARIABLE_ID:
	//	'%' ('I' | 'Q' | 'M') ('NIL' | 'X' | 'B' | 'W' | 'D' | 'L') INT ('.' INT)*;
	public TerminalRule getDIRECT_VARIABLE_IDRule() {
		return tDIRECT_VARIABLE_ID;
	} 

	//terminal EOL:
	//	';' // | MY_NL    // ---> now an optional linebreak at the end!
	//;
	public TerminalRule getEOLRule() {
		return tEOL;
	} 

	//terminal MY_NL:
	//	'\r' | '\n';
	public TerminalRule getMY_NLRule() {
		return tMY_NL;
	} 

	//@Override
	//terminal ML_COMMENT:
	//	'(*'->'*)';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
