/*
 * generated by Xtext
 */
grammar InternalIec;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.bichler.iec.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.bichler.iec.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.bichler.iec.services.IecGrammarAccess;

}

@parser::members {

 	private IecGrammarAccess grammarAccess;
 	
    public InternalIecParser(TokenStream input, IecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected IecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getModelElementModelElementParserRuleCall_0()); 
	    }
		lv_modelElement_0_0=ruleModelElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"modelElement",
        		lv_modelElement_0_0, 
        		"com.bichler.iec.Iec.ModelElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleModelElement
entryRuleModelElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelElementRule()); }
	 iv_ruleModelElement=ruleModelElement 
	 { $current=$iv_ruleModelElement.current; } 
	 EOF 
;

// Rule ModelElement
ruleModelElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getModelElementAccess().getLibraryElementParserRuleCall_0()); 
    }
    this_LibraryElement_0=ruleLibraryElement
    { 
        $current = $this_LibraryElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getModelElementAccess().getLibraryElementDeclarationParserRuleCall_1()); 
    }
    this_LibraryElementDeclaration_1=ruleLibraryElementDeclaration
    { 
        $current = $this_LibraryElementDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLibraryElement
entryRuleLibraryElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryElementRule()); }
	 iv_ruleLibraryElement=ruleLibraryElement 
	 { $current=$iv_ruleLibraryElement.current; } 
	 EOF 
;

// Rule LibraryElement
ruleLibraryElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLibraryElementAccess().getDataTypeParserRuleCall_0()); 
    }
    this_DataType_0=ruleDataType
    { 
        $current = $this_DataType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryElementAccess().getFunctionDeclarationParserRuleCall_1()); 
    }
    this_FunctionDeclaration_1=ruleFunctionDeclaration
    { 
        $current = $this_FunctionDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLibraryElementDeclaration
entryRuleLibraryElementDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryElementDeclarationRule()); }
	 iv_ruleLibraryElementDeclaration=ruleLibraryElementDeclaration 
	 { $current=$iv_ruleLibraryElementDeclaration.current; } 
	 EOF 
;

// Rule LibraryElementDeclaration
ruleLibraryElementDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLibraryElementDeclarationAccess().getDataTypeDeclarationParserRuleCall_0()); 
    }
    this_DataTypeDeclaration_0=ruleDataTypeDeclaration
    { 
        $current = $this_DataTypeDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryElementDeclarationAccess().getFunctionBlockDeclarationParserRuleCall_1()); 
    }
    this_FunctionBlockDeclaration_1=ruleFunctionBlockDeclaration
    { 
        $current = $this_FunctionBlockDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryElementDeclarationAccess().getProgramDeclarationParserRuleCall_2()); 
    }
    this_ProgramDeclaration_2=ruleProgramDeclaration
    { 
        $current = $this_ProgramDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryElementDeclarationAccess().getConfigurationDeclarationParserRuleCall_3()); 
    }
    this_ConfigurationDeclaration_3=ruleConfigurationDeclaration
    { 
        $current = $this_ConfigurationDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryElementDeclarationAccess().getResourceDeclarationParserRuleCall_4()); 
    }
    this_ResourceDeclaration_4=ruleResourceDeclaration
    { 
        $current = $this_ResourceDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	 iv_ruleDataType=ruleDataType 
	 { $current=$iv_ruleDataType.current; } 
	 EOF 
;

// Rule DataType
ruleDataType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getNonGenericTypeParserRuleCall_0()); 
    }
    this_NonGenericType_0=ruleNonGenericType
    { 
        $current = $this_NonGenericType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeAccess().getGenericTypeParserRuleCall_1()); 
    }
    this_GenericType_1=ruleGenericType
    { 
        $current = $this_GenericType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNonGenericType
entryRuleNonGenericType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonGenericTypeRule()); }
	 iv_ruleNonGenericType=ruleNonGenericType 
	 { $current=$iv_ruleNonGenericType.current; } 
	 EOF 
;

// Rule NonGenericType
ruleNonGenericType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNonGenericTypeAccess().getElementaryTypeParserRuleCall_0()); 
    }
    this_ElementaryType_0=ruleElementaryType
    { 
        $current = $this_ElementaryType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNonGenericTypeAccess().getDerivedTypeParserRuleCall_1()); 
    }
    this_DerivedType_1=ruleDerivedType
    { 
        $current = $this_DerivedType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleElementaryType
entryRuleElementaryType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementaryTypeRule()); }
	 iv_ruleElementaryType=ruleElementaryType 
	 { $current=$iv_ruleElementaryType.current; } 
	 EOF 
;

// Rule ElementaryType
ruleElementaryType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElementaryTypeAccess().getNumericTypeParserRuleCall_0()); 
    }
    this_NumericType_0=ruleNumericType
    { 
        $current = $this_NumericType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementaryTypeAccess().getDateTypeParserRuleCall_1()); 
    }
    this_DateType_1=ruleDateType
    { 
        $current = $this_DateType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementaryTypeAccess().getBitStringTypeParserRuleCall_2()); 
    }
    this_BitStringType_2=ruleBitStringType
    { 
        $current = $this_BitStringType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElementaryTypeAccess().getStringTypeParserRuleCall_3()); 
    }
    this_StringType_3=ruleStringType
    { 
        $current = $this_StringType_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		lv_typeName_4_0=	'WSTRING' 
    {
        newLeafNode(lv_typeName_4_0, grammarAccess.getElementaryTypeAccess().getTypeNameWSTRINGKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementaryTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_4_0, "WSTRING");
	    }

)
)
    |(
(
		lv_typeName_5_0=	'TIME' 
    {
        newLeafNode(lv_typeName_5_0, grammarAccess.getElementaryTypeAccess().getTypeNameTIMEKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementaryTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_5_0, "TIME");
	    }

)
))
;





// Entry rule entryRuleStringType
entryRuleStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringTypeRule()); }
	 iv_ruleStringType=ruleStringType 
	 { $current=$iv_ruleStringType.current; } 
	 EOF 
;

// Rule StringType
ruleStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStringTypeAccess().getStringTypeAction_0(),
            $current);
    }
)	otherlv_1='STRING' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringTypeAccess().getSTRINGKeyword_1());
    }
)
;





// Entry rule entryRuleNumericType
entryRuleNumericType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericTypeRule()); }
	 iv_ruleNumericType=ruleNumericType 
	 { $current=$iv_ruleNumericType.current; } 
	 EOF 
;

// Rule NumericType
ruleNumericType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getIntegerTypeParserRuleCall_0()); 
    }
    this_IntegerType_0=ruleIntegerType
    { 
        $current = $this_IntegerType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericTypeAccess().getRealTypeParserRuleCall_1()); 
    }
    this_RealType_1=ruleRealType
    { 
        $current = $this_RealType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerType
entryRuleIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerTypeRule()); }
	 iv_ruleIntegerType=ruleIntegerType 
	 { $current=$iv_ruleIntegerType.current; } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntegerTypeAccess().getSignedIntegerTypeParserRuleCall_0()); 
    }
    this_SignedIntegerType_0=ruleSignedIntegerType
    { 
        $current = $this_SignedIntegerType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerTypeAccess().getPlainIntegerTypeParserRuleCall_1()); 
    }
    this_PlainIntegerType_1=rulePlainIntegerType
    { 
        $current = $this_PlainIntegerType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerTypeAccess().getUnsignedIntegerTypeParserRuleCall_2()); 
    }
    this_UnsignedIntegerType_2=ruleUnsignedIntegerType
    { 
        $current = $this_UnsignedIntegerType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSignedIntegerType
entryRuleSignedIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignedIntegerTypeRule()); }
	 iv_ruleSignedIntegerType=ruleSignedIntegerType 
	 { $current=$iv_ruleSignedIntegerType.current; } 
	 EOF 
;

// Rule SignedIntegerType
ruleSignedIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=	'SINT' 
    {
        newLeafNode(lv_typeName_0_0, grammarAccess.getSignedIntegerTypeAccess().getTypeNameSINTKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_0_0, "SINT");
	    }

)
)
    |(
(
		lv_typeName_1_0=	'DINT' 
    {
        newLeafNode(lv_typeName_1_0, grammarAccess.getSignedIntegerTypeAccess().getTypeNameDINTKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_1_0, "DINT");
	    }

)
)
    |(
(
		lv_typeName_2_0=	'LINT' 
    {
        newLeafNode(lv_typeName_2_0, grammarAccess.getSignedIntegerTypeAccess().getTypeNameLINTKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_2_0, "LINT");
	    }

)
))
;





// Entry rule entryRulePlainIntegerType
entryRulePlainIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlainIntegerTypeRule()); }
	 iv_rulePlainIntegerType=rulePlainIntegerType 
	 { $current=$iv_rulePlainIntegerType.current; } 
	 EOF 
;

// Rule PlainIntegerType
rulePlainIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPlainIntegerTypeAccess().getSignedIntegerTypeAction_0(),
            $current);
    }
)	otherlv_1='INT' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlainIntegerTypeAccess().getINTKeyword_1());
    }
)
;





// Entry rule entryRuleUnsignedIntegerType
entryRuleUnsignedIntegerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnsignedIntegerTypeRule()); }
	 iv_ruleUnsignedIntegerType=ruleUnsignedIntegerType 
	 { $current=$iv_ruleUnsignedIntegerType.current; } 
	 EOF 
;

// Rule UnsignedIntegerType
ruleUnsignedIntegerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=	'USINT' 
    {
        newLeafNode(lv_typeName_0_0, grammarAccess.getUnsignedIntegerTypeAccess().getTypeNameUSINTKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnsignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_0_0, "USINT");
	    }

)
)
    |(
(
		lv_typeName_1_0=	'UINT' 
    {
        newLeafNode(lv_typeName_1_0, grammarAccess.getUnsignedIntegerTypeAccess().getTypeNameUINTKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnsignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_1_0, "UINT");
	    }

)
)
    |(
(
		lv_typeName_2_0=	'UDINT' 
    {
        newLeafNode(lv_typeName_2_0, grammarAccess.getUnsignedIntegerTypeAccess().getTypeNameUDINTKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnsignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_2_0, "UDINT");
	    }

)
)
    |(
(
		lv_typeName_3_0=	'ULINT' 
    {
        newLeafNode(lv_typeName_3_0, grammarAccess.getUnsignedIntegerTypeAccess().getTypeNameULINTKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnsignedIntegerTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_3_0, "ULINT");
	    }

)
))
;





// Entry rule entryRuleRealType
entryRuleRealType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealTypeRule()); }
	 iv_ruleRealType=ruleRealType 
	 { $current=$iv_ruleRealType.current; } 
	 EOF 
;

// Rule RealType
ruleRealType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=	'REAL' 
    {
        newLeafNode(lv_typeName_0_0, grammarAccess.getRealTypeAccess().getTypeNameREALKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_0_0, "REAL");
	    }

)
)
    |(
(
		lv_typeName_1_0=	'LREAL' 
    {
        newLeafNode(lv_typeName_1_0, grammarAccess.getRealTypeAccess().getTypeNameLREALKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_1_0, "LREAL");
	    }

)
))
;





// Entry rule entryRuleDateType
entryRuleDateType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateTypeRule()); }
	 iv_ruleDateType=ruleDateType 
	 { $current=$iv_ruleDateType.current; } 
	 EOF 
;

// Rule DateType
ruleDateType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=	'DATE' 
    {
        newLeafNode(lv_typeName_0_0, grammarAccess.getDateTypeAccess().getTypeNameDATEKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_0_0, "DATE");
	    }

)
)
    |(
(
		lv_typeName_1_0=	'TIME_OF_DAY' 
    {
        newLeafNode(lv_typeName_1_0, grammarAccess.getDateTypeAccess().getTypeNameTIME_OF_DAYKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_1_0, "TIME_OF_DAY");
	    }

)
)
    |(
(
		lv_typeName_2_0=	'TOD' 
    {
        newLeafNode(lv_typeName_2_0, grammarAccess.getDateTypeAccess().getTypeNameTODKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_2_0, "TOD");
	    }

)
)
    |(
(
		lv_typeName_3_0=	'DATE_AND_TIME' 
    {
        newLeafNode(lv_typeName_3_0, grammarAccess.getDateTypeAccess().getTypeNameDATE_AND_TIMEKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_3_0, "DATE_AND_TIME");
	    }

)
)
    |(
(
		lv_typeName_4_0=	'DT' 
    {
        newLeafNode(lv_typeName_4_0, grammarAccess.getDateTypeAccess().getTypeNameDTKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDateTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_4_0, "DT");
	    }

)
))
;





// Entry rule entryRuleBitStringType
entryRuleBitStringType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitStringTypeRule()); }
	 iv_ruleBitStringType=ruleBitStringType 
	 { $current=$iv_ruleBitStringType.current; } 
	 EOF 
;

// Rule BitStringType
ruleBitStringType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=	'BOOL' 
    {
        newLeafNode(lv_typeName_0_0, grammarAccess.getBitStringTypeAccess().getTypeNameBOOLKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_0_0, "BOOL");
	    }

)
)
    |(
(
		lv_typeName_1_0=	'BYTE' 
    {
        newLeafNode(lv_typeName_1_0, grammarAccess.getBitStringTypeAccess().getTypeNameBYTEKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_1_0, "BYTE");
	    }

)
)
    |(
(
		lv_typeName_2_0=	'WORD' 
    {
        newLeafNode(lv_typeName_2_0, grammarAccess.getBitStringTypeAccess().getTypeNameWORDKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_2_0, "WORD");
	    }

)
)
    |(
(
		lv_typeName_3_0=	'DWORD' 
    {
        newLeafNode(lv_typeName_3_0, grammarAccess.getBitStringTypeAccess().getTypeNameDWORDKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_3_0, "DWORD");
	    }

)
)
    |(
(
		lv_typeName_4_0=	'LWORD' 
    {
        newLeafNode(lv_typeName_4_0, grammarAccess.getBitStringTypeAccess().getTypeNameLWORDKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBitStringTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_4_0, "LWORD");
	    }

)
))
;





// Entry rule entryRuleGenericType
entryRuleGenericType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericTypeRule()); }
	 iv_ruleGenericType=ruleGenericType 
	 { $current=$iv_ruleGenericType.current; } 
	 EOF 
;

// Rule GenericType
ruleGenericType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeName_0_0=	'ANY' 
    {
        newLeafNode(lv_typeName_0_0, grammarAccess.getGenericTypeAccess().getTypeNameANYKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_0_0, "ANY");
	    }

)
)
    |(
(
		lv_typeName_1_0=	'ANY_DERIVED' 
    {
        newLeafNode(lv_typeName_1_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_DERIVEDKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_1_0, "ANY_DERIVED");
	    }

)
)
    |(
(
		lv_typeName_2_0=	'ANY_ELEMENTARY' 
    {
        newLeafNode(lv_typeName_2_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_ELEMENTARYKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_2_0, "ANY_ELEMENTARY");
	    }

)
)
    |(
(
		lv_typeName_3_0=	'ANY_MAGNITUDE' 
    {
        newLeafNode(lv_typeName_3_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_MAGNITUDEKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_3_0, "ANY_MAGNITUDE");
	    }

)
)
    |(
(
		lv_typeName_4_0=	'ANY_NUM' 
    {
        newLeafNode(lv_typeName_4_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_NUMKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_4_0, "ANY_NUM");
	    }

)
)
    |(
(
		lv_typeName_5_0=	'ANY_REAL' 
    {
        newLeafNode(lv_typeName_5_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_REALKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_5_0, "ANY_REAL");
	    }

)
)
    |(
(
		lv_typeName_6_0=	'ANY_INT' 
    {
        newLeafNode(lv_typeName_6_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_INTKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_6_0, "ANY_INT");
	    }

)
)
    |(
(
		lv_typeName_7_0=	'ANY_BIT' 
    {
        newLeafNode(lv_typeName_7_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_BITKeyword_7_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_7_0, "ANY_BIT");
	    }

)
)
    |(
(
		lv_typeName_8_0=	'ANY_STRING' 
    {
        newLeafNode(lv_typeName_8_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_STRINGKeyword_8_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_8_0, "ANY_STRING");
	    }

)
)
    |(
(
		lv_typeName_9_0=	'ANY_DATE' 
    {
        newLeafNode(lv_typeName_9_0, grammarAccess.getGenericTypeAccess().getTypeNameANY_DATEKeyword_9_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGenericTypeRule());
	        }
       		setWithLastConsumed($current, "typeName", lv_typeName_9_0, "ANY_DATE");
	    }

)
))
;





// Entry rule entryRuleDerivedType
entryRuleDerivedType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDerivedTypeRule()); }
	 iv_ruleDerivedType=ruleDerivedType 
	 { $current=$iv_ruleDerivedType.current; } 
	 EOF 
;

// Rule DerivedType
ruleDerivedType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDerivedTypeAccess().getNameIdentifierParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDerivedTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDataTypeDeclaration
entryRuleDataTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeDeclarationRule()); }
	 iv_ruleDataTypeDeclaration=ruleDataTypeDeclaration 
	 { $current=$iv_ruleDataTypeDeclaration.current; } 
	 EOF 
;

// Rule DataTypeDeclaration
ruleDataTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TYPE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataTypeDeclarationAccess().getTYPEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeDeclarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataTypeDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeDeclarationAccess().getTypeDeclarationTypeDeclarationParserRuleCall_3_0()); 
	    }
		lv_typeDeclaration_3_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"typeDeclaration",
        		lv_typeDeclaration_3_0, 
        		"com.bichler.iec.Iec.TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getDataTypeDeclarationAccess().getEOLTerminalRuleCall_4()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeDeclarationAccess().getTypeDeclarationTypeDeclarationParserRuleCall_5_0_0()); 
	    }
		lv_typeDeclaration_5_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"typeDeclaration",
        		lv_typeDeclaration_5_0, 
        		"com.bichler.iec.Iec.TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_6=RULE_EOL
    { 
    newLeafNode(this_EOL_6, grammarAccess.getDataTypeDeclarationAccess().getEOLTerminalRuleCall_5_1()); 
    }
)*	otherlv_7='END_TYPE' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDataTypeDeclarationAccess().getEND_TYPEKeyword_6());
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getSimpleTypeDeclarationParserRuleCall_0()); 
    }
    this_SimpleTypeDeclaration_0=ruleSimpleTypeDeclaration
    { 
        $current = $this_SimpleTypeDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getRangeDeclarationParserRuleCall_1()); 
    }
    this_RangeDeclaration_1=ruleRangeDeclaration
    { 
        $current = $this_RangeDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getEnumDeclarationParserRuleCall_2()); 
    }
    this_EnumDeclaration_2=ruleEnumDeclaration
    { 
        $current = $this_EnumDeclaration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getArrayDeclarationParserRuleCall_3()); 
    }
    this_ArrayDeclaration_3=ruleArrayDeclaration
    { 
        $current = $this_ArrayDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getStructureTypeDeclarationParserRuleCall_4()); 
    }
    this_StructureTypeDeclaration_4=ruleStructureTypeDeclaration
    { 
        $current = $this_StructureTypeDeclaration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getStringDeclarationParserRuleCall_5()); 
    }
    this_StringDeclaration_5=ruleStringDeclaration
    { 
        $current = $this_StringDeclaration_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleTypeDeclaration
entryRuleSimpleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeDeclarationRule()); }
	 iv_ruleSimpleTypeDeclaration=ruleSimpleTypeDeclaration 
	 { $current=$iv_ruleSimpleTypeDeclaration.current; } 
	 EOF 
;

// Rule SimpleTypeDeclaration
ruleSimpleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeDeclarationAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleTypeDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeDeclarationAccess().getSpecInitSpecInitParserRuleCall_2_0()); 
	    }
		lv_specInit_2_0=ruleSpecInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"specInit",
        		lv_specInit_2_0, 
        		"com.bichler.iec.Iec.SpecInit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSpecInit
entryRuleSpecInit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecInitRule()); }
	 iv_ruleSpecInit=ruleSpecInit 
	 { $current=$iv_ruleSpecInit.current; } 
	 EOF 
;

// Rule SpecInit
ruleSpecInit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecInitAccess().getBaseTypeElementaryTypeParserRuleCall_0_0_0()); 
	    }
		lv_baseType_0_0=ruleElementaryType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecInitRule());
	        }
       		set(
       			$current, 
       			"baseType",
        		lv_baseType_0_0, 
        		"com.bichler.iec.Iec.ElementaryType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecInitAccess().getBaseTypeDerivedTypeParserRuleCall_0_1_0()); 
	    }
		lv_baseType_1_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecInitRule());
	        }
       		set(
       			$current, 
       			"baseType",
        		lv_baseType_1_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSpecInitAccess().getColonEqualsSignKeyword_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSpecInitAccess().getConstantConstantParserRuleCall_1_1_0_0()); 
	    }
		lv_constant_3_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecInitRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_3_0, 
        		"com.bichler.iec.Iec.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecInitAccess().getConstantEnumeratedValueParserRuleCall_1_1_1_0()); 
	    }
		lv_constant_4_0=ruleEnumeratedValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecInitRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_4_0, 
        		"com.bichler.iec.Iec.EnumeratedValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSpecInitAccess().getConstantArrayInitializationParserRuleCall_1_1_2_0()); 
	    }
		lv_constant_5_0=ruleArrayInitialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpecInitRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_5_0, 
        		"com.bichler.iec.Iec.ArrayInitialization");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleRangeDeclaration
entryRuleRangeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeDeclarationRule()); }
	 iv_ruleRangeDeclaration=ruleRangeDeclaration 
	 { $current=$iv_ruleRangeDeclaration.current; } 
	 EOF 
;

// Rule RangeDeclaration
ruleRangeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRangeDeclarationAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeDeclarationRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeDeclarationAccess().getBaseTypeElementaryTypeParserRuleCall_2_0()); 
	    }
		lv_baseType_2_0=ruleElementaryType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeDeclarationRule());
	        }
       		set(
       			$current, 
       			"baseType",
        		lv_baseType_2_0, 
        		"com.bichler.iec.Iec.ElementaryType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRangeDeclarationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeDeclarationAccess().getRangeSubRangeWithSignParserRuleCall_3_1_0()); 
	    }
		lv_range_4_0=ruleSubRangeWithSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeDeclarationRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_4_0, 
        		"com.bichler.iec.Iec.SubRangeWithSign");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRangeDeclarationAccess().getRightParenthesisKeyword_3_2());
    }
)(	otherlv_6=':=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRangeDeclarationAccess().getColonEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeDeclarationAccess().getConstantSignedIntegerParserRuleCall_4_1_0()); 
	    }
		lv_constant_7_0=ruleSignedInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeDeclarationRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_7_0, 
        		"com.bichler.iec.Iec.SignedInteger");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEnumDeclaration
entryRuleEnumDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumDeclarationRule()); }
	 iv_ruleEnumDeclaration=ruleEnumDeclaration 
	 { $current=$iv_ruleEnumDeclaration.current; } 
	 EOF 
;

// Rule EnumDeclaration
ruleEnumDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumDeclarationAccess().getColonKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumDeclarationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getEnumerationEnumerationParserRuleCall_3_0()); 
	    }
		lv_enumeration_3_0=ruleEnumeration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"enumeration",
        		lv_enumeration_3_0, 
        		"com.bichler.iec.Iec.Enumeration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumDeclarationAccess().getRightParenthesisKeyword_4());
    }
(	otherlv_5=':=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumDeclarationAccess().getColonEqualsSignKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumDeclarationAccess().getConstantEnumeratedValueParserRuleCall_5_1_0()); 
	    }
		lv_constant_6_0=ruleEnumeratedValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumDeclarationRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_6_0, 
        		"com.bichler.iec.Iec.EnumeratedValue");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleArrayDeclaration
entryRuleArrayDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayDeclarationRule()); }
	 iv_ruleArrayDeclaration=ruleArrayDeclaration 
	 { $current=$iv_ruleArrayDeclaration.current; } 
	 EOF 
;

// Rule ArrayDeclaration
ruleArrayDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayDeclarationAccess().getColonKeyword_1());
    }
	otherlv_2='ARRAY' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayDeclarationAccess().getARRAYKeyword_2());
    }
	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayDeclarationAccess().getLeftSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getRangesSubRangeWithSignParserRuleCall_4_0()); 
	    }
		lv_ranges_4_0=ruleSubRangeWithSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_4_0, 
        		"com.bichler.iec.Iec.SubRangeWithSign");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayDeclarationAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getRangesSubRangeWithSignParserRuleCall_5_1_0()); 
	    }
		lv_ranges_6_0=ruleSubRangeWithSign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_6_0, 
        		"com.bichler.iec.Iec.SubRangeWithSign");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getArrayDeclarationAccess().getRightSquareBracketKeyword_6());
    }
	otherlv_8='OF' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArrayDeclarationAccess().getOFKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getBaseTypeNonGenericTypeParserRuleCall_8_0()); 
	    }
		lv_baseType_9_0=ruleNonGenericType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		set(
       			$current, 
       			"baseType",
        		lv_baseType_9_0, 
        		"com.bichler.iec.Iec.NonGenericType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=':=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getArrayDeclarationAccess().getColonEqualsSignKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayDeclarationAccess().getConstantArrayInitializationParserRuleCall_9_1_0()); 
	    }
		lv_constant_11_0=ruleArrayInitialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayDeclarationRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_11_0, 
        		"com.bichler.iec.Iec.ArrayInitialization");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSubRangeWithSign
entryRuleSubRangeWithSign returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSubRangeWithSignRule()); } 
	 iv_ruleSubRangeWithSign=ruleSubRangeWithSign 
	 { $current=$iv_ruleSubRangeWithSign.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SubRangeWithSign
ruleSubRangeWithSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSubRangeWithSignAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSubRangeWithSignAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_SUB_RANGE_2=RULE_SUB_RANGE    {
		$current.merge(this_SUB_RANGE_2);
    }

    { 
    newLeafNode(this_SUB_RANGE_2, grammarAccess.getSubRangeWithSignAccess().getSUB_RANGETerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	 iv_ruleEnumeration=ruleEnumeration 
	 { $current=$iv_ruleEnumeration.current; } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationAccess().getValuesEnumeratedValueParserRuleCall_0_0()); 
	    }
		lv_values_0_0=ruleEnumeratedValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"com.bichler.iec.Iec.EnumeratedValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumerationAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumerationAccess().getValuesEnumeratedValueParserRuleCall_1_1_0()); 
	    }
		lv_values_2_0=ruleEnumeratedValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumerationRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"com.bichler.iec.Iec.EnumeratedValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEnumeratedValue
entryRuleEnumeratedValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumeratedValueRule()); }
	 iv_ruleEnumeratedValue=ruleEnumeratedValue 
	 { $current=$iv_ruleEnumeratedValue.current; } 
	 EOF 
;

// Rule EnumeratedValue
ruleEnumeratedValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEnumeratedValueAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumeratedValueRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumeratedValueAccess().getNumberSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumeratedValueAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumeratedValueRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArrayInitialization
entryRuleArrayInitialization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializationRule()); }
	 iv_ruleArrayInitialization=ruleArrayInitialization 
	 { $current=$iv_ruleArrayInitialization.current; } 
	 EOF 
;

// Rule ArrayInitialization
ruleArrayInitialization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayInitializationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializationAccess().getInitialElementsArrayInitialElementsParserRuleCall_1_0()); 
	    }
		lv_initialElements_1_0=ruleArrayInitialElements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializationRule());
	        }
       		add(
       			$current, 
       			"initialElements",
        		lv_initialElements_1_0, 
        		"com.bichler.iec.Iec.ArrayInitialElements");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayInitializationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializationAccess().getInitialElementsArrayInitialElementsParserRuleCall_2_1_0()); 
	    }
		lv_initialElements_3_0=ruleArrayInitialElements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializationRule());
	        }
       		add(
       			$current, 
       			"initialElements",
        		lv_initialElements_3_0, 
        		"com.bichler.iec.Iec.ArrayInitialElements");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayInitializationAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleArrayInitialElements
entryRuleArrayInitialElements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitialElementsRule()); }
	 iv_ruleArrayInitialElements=ruleArrayInitialElements 
	 { $current=$iv_ruleArrayInitialElements.current; } 
	 EOF 
;

// Rule ArrayInitialElements
ruleArrayInitialElements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitialElementsAccess().getInitialElementInitialElementParserRuleCall_0_0()); 
	    }
		lv_initialElement_0_0=ruleInitialElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitialElementsRule());
	        }
       		set(
       			$current, 
       			"initialElement",
        		lv_initialElement_0_0, 
        		"com.bichler.iec.Iec.InitialElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitialElementsAccess().getIndexIntegerParserRuleCall_1_0_0()); 
	    }
		lv_index_1_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitialElementsRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayInitialElementsAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitialElementsAccess().getInitialElementInitialElementParserRuleCall_1_2_0()); 
	    }
		lv_initialElement_3_0=ruleInitialElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitialElementsRule());
	        }
       		set(
       			$current, 
       			"initialElement",
        		lv_initialElement_3_0, 
        		"com.bichler.iec.Iec.InitialElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayInitialElementsAccess().getRightParenthesisKeyword_1_3());
    }
))
;





// Entry rule entryRuleInitialElement
entryRuleInitialElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitialElementRule()); }
	 iv_ruleInitialElement=ruleInitialElement 
	 { $current=$iv_ruleInitialElement.current; } 
	 EOF 
;

// Rule InitialElement
ruleInitialElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitialElementAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitialElementAccess().getEnumeratedValueParserRuleCall_1()); 
    }
    this_EnumeratedValue_1=ruleEnumeratedValue
    { 
        $current = $this_EnumeratedValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitialElementAccess().getArrayInitializationParserRuleCall_2()); 
    }
    this_ArrayInitialization_2=ruleArrayInitialization
    { 
        $current = $this_ArrayInitialization_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitialElementAccess().getStructureInitializationParserRuleCall_3()); 
    }
    this_StructureInitialization_3=ruleStructureInitialization
    { 
        $current = $this_StructureInitialization_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStructureTypeDeclaration
entryRuleStructureTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureTypeDeclarationRule()); }
	 iv_ruleStructureTypeDeclaration=ruleStructureTypeDeclaration 
	 { $current=$iv_ruleStructureTypeDeclaration.current; } 
	 EOF 
;

// Rule StructureTypeDeclaration
ruleStructureTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureTypeDeclarationAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureTypeDeclarationAccess().getColonKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureTypeDeclarationAccess().getDeclarationStructureDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_declaration_2_0=ruleStructureDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"com.bichler.iec.Iec.StructureDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureTypeDeclarationAccess().getInitializationInitializedStructureParserRuleCall_2_1_0()); 
	    }
		lv_initialization_3_0=ruleInitializedStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"initialization",
        		lv_initialization_3_0, 
        		"com.bichler.iec.Iec.InitializedStructure");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleStructureDeclaration
entryRuleStructureDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureDeclarationRule()); }
	 iv_ruleStructureDeclaration=ruleStructureDeclaration 
	 { $current=$iv_ruleStructureDeclaration.current; } 
	 EOF 
;

// Rule StructureDeclaration
ruleStructureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='STRUCT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStructureDeclarationAccess().getSTRUCTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureDeclarationAccess().getStructureElementStructureElementDeclarationParserRuleCall_1_0()); 
	    }
		lv_structureElement_1_0=ruleStructureElementDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureDeclarationRule());
	        }
       		add(
       			$current, 
       			"structureElement",
        		lv_structureElement_1_0, 
        		"com.bichler.iec.Iec.StructureElementDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getStructureDeclarationAccess().getEOLTerminalRuleCall_2()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureDeclarationAccess().getStructureElementStructureElementDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_structureElement_3_0=ruleStructureElementDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureDeclarationRule());
	        }
       		add(
       			$current, 
       			"structureElement",
        		lv_structureElement_3_0, 
        		"com.bichler.iec.Iec.StructureElementDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getStructureDeclarationAccess().getEOLTerminalRuleCall_3_1()); 
    }
)*	otherlv_5='END_STRUCT' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStructureDeclarationAccess().getEND_STRUCTKeyword_4());
    }
)
;





// Entry rule entryRuleStructureElementDeclaration
entryRuleStructureElementDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureElementDeclarationRule()); }
	 iv_ruleStructureElementDeclaration=ruleStructureElementDeclaration 
	 { $current=$iv_ruleStructureElementDeclaration.current; } 
	 EOF 
;

// Rule StructureElementDeclaration
ruleStructureElementDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureElementDeclarationAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureElementDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureElementDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureElementDeclarationAccess().getSpecInitSpecInitParserRuleCall_2_0()); 
	    }
		lv_specInit_2_0=ruleSpecInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureElementDeclarationRule());
	        }
       		set(
       			$current, 
       			"specInit",
        		lv_specInit_2_0, 
        		"com.bichler.iec.Iec.SpecInit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInitializedStructure
entryRuleInitializedStructure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializedStructureRule()); }
	 iv_ruleInitializedStructure=ruleInitializedStructure 
	 { $current=$iv_ruleInitializedStructure.current; } 
	 EOF 
;

// Rule InitializedStructure
ruleInitializedStructure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInitializedStructureAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializedStructureRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInitializedStructureAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInitializedStructureAccess().getInitializationStructureInitializationParserRuleCall_2_0()); 
	    }
		lv_initialization_2_0=ruleStructureInitialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInitializedStructureRule());
	        }
       		set(
       			$current, 
       			"initialization",
        		lv_initialization_2_0, 
        		"com.bichler.iec.Iec.StructureInitialization");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStructureInitialization
entryRuleStructureInitialization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureInitializationRule()); }
	 iv_ruleStructureInitialization=ruleStructureInitialization 
	 { $current=$iv_ruleStructureInitialization.current; } 
	 EOF 
;

// Rule StructureInitialization
ruleStructureInitialization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStructureInitializationAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureInitializationAccess().getInitialElementsStructureElementInitializationParserRuleCall_1_0()); 
	    }
		lv_initialElements_1_0=ruleStructureElementInitialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureInitializationRule());
	        }
       		add(
       			$current, 
       			"initialElements",
        		lv_initialElements_1_0, 
        		"com.bichler.iec.Iec.StructureElementInitialization");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructureInitializationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureInitializationAccess().getInitialElementsStructureElementInitializationParserRuleCall_2_1_0()); 
	    }
		lv_initialElements_3_0=ruleStructureElementInitialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureInitializationRule());
	        }
       		add(
       			$current, 
       			"initialElements",
        		lv_initialElements_3_0, 
        		"com.bichler.iec.Iec.StructureElementInitialization");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStructureInitializationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleStructureElementInitialization
entryRuleStructureElementInitialization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureElementInitializationRule()); }
	 iv_ruleStructureElementInitialization=ruleStructureElementInitialization 
	 { $current=$iv_ruleStructureElementInitialization.current; } 
	 EOF 
;

// Rule StructureElementInitialization
ruleStructureElementInitialization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureElementInitializationAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureElementInitializationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureElementInitializationAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureElementInitializationAccess().getValueInitialElementParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleInitialElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureElementInitializationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"com.bichler.iec.Iec.InitialElement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStringDeclaration
entryRuleStringDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringDeclarationRule()); }
	 iv_ruleStringDeclaration=ruleStringDeclaration 
	 { $current=$iv_ruleStringDeclaration.current; } 
	 EOF 
;

// Rule StringDeclaration
ruleStringDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStringDeclarationAccess().getDerivedTypeDerivedTypeParserRuleCall_0_0()); 
	    }
		lv_derivedType_0_0=ruleDerivedType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringDeclarationRule());
	        }
       		set(
       			$current, 
       			"derivedType",
        		lv_derivedType_0_0, 
        		"com.bichler.iec.Iec.DerivedType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStringDeclarationAccess().getColonKeyword_1());
    }
((
(
		lv_string_2_0=	'STRING' 
    {
        newLeafNode(lv_string_2_0, grammarAccess.getStringDeclarationAccess().getStringSTRINGKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringDeclarationRule());
	        }
       		setWithLastConsumed($current, "string", true, "STRING");
	    }

)
)
    |	otherlv_3='WSTRING' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStringDeclarationAccess().getWSTRINGKeyword_2_1());
    }
)?(	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStringDeclarationAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringDeclarationAccess().getSizeIntegerParserRuleCall_3_1_0()); 
	    }
		lv_size_5_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringDeclarationRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_5_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStringDeclarationAccess().getRightSquareBracketKeyword_3_2());
    }
)(	otherlv_7=':=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStringDeclarationAccess().getColonEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringDeclarationAccess().getInitialValueCharacterStringParserRuleCall_4_1_0()); 
	    }
		lv_initialValue_8_0=ruleCharacterString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringDeclarationRule());
	        }
       		set(
       			$current, 
       			"initialValue",
        		lv_initialValue_8_0, 
        		"com.bichler.iec.Iec.CharacterString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getNameIdentifierParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariableAccess
entryRuleVariableAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableAccessRule()); }
	 iv_ruleVariableAccess=ruleVariableAccess 
	 { $current=$iv_ruleVariableAccess.current; } 
	 EOF 
;

// Rule VariableAccess
ruleVariableAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableAccessAccess().getDirectVariableParserRuleCall_0()); 
    }
    this_DirectVariable_0=ruleDirectVariable
    { 
        $current = $this_DirectVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariableAccessAccess().getSymbolicVariableAccessParserRuleCall_1()); 
    }
    this_SymbolicVariableAccess_1=ruleSymbolicVariableAccess
    { 
        $current = $this_SymbolicVariableAccess_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDirectVariable
entryRuleDirectVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectVariableRule()); }
	 iv_ruleDirectVariable=ruleDirectVariable 
	 { $current=$iv_ruleDirectVariable.current; } 
	 EOF 
;

// Rule DirectVariable
ruleDirectVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_DIRECT_VARIABLE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getDirectVariableAccess().getNameDIRECT_VARIABLE_IDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDirectVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.DIRECT_VARIABLE_ID");
	    }

)
)
;





// Entry rule entryRuleSymbolicVariableAccess
entryRuleSymbolicVariableAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSymbolicVariableAccessRule()); }
	 iv_ruleSymbolicVariableAccess=ruleSymbolicVariableAccess 
	 { $current=$iv_ruleSymbolicVariableAccess.current; } 
	 EOF 
;

// Rule SymbolicVariableAccess
ruleSymbolicVariableAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSymbolicVariableAccessAccess().getNamedVariableAccessParserRuleCall_0()); 
    }
    this_NamedVariableAccess_0=ruleNamedVariableAccess
    { 
        $current = $this_NamedVariableAccess_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSymbolicVariableAccessAccess().getMultiElementVariableParserRuleCall_1()); 
    }
    this_MultiElementVariable_1=ruleMultiElementVariable
    { 
        $current = $this_MultiElementVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamedVariableAccess
entryRuleNamedVariableAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedVariableAccessRule()); }
	 iv_ruleNamedVariableAccess=ruleNamedVariableAccess 
	 { $current=$iv_ruleNamedVariableAccess.current; } 
	 EOF 
;

// Rule NamedVariableAccess
ruleNamedVariableAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNamedVariableAccessRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNamedVariableAccessAccess().getNamedVariableVariableCrossReference_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleMultiElementVariable
entryRuleMultiElementVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiElementVariableRule()); }
	 iv_ruleMultiElementVariable=ruleMultiElementVariable 
	 { $current=$iv_ruleMultiElementVariable.current; } 
	 EOF 
;

// Rule MultiElementVariable
ruleMultiElementVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiElementVariableAccess().getArrayVariableParserRuleCall_0()); 
    }
    this_ArrayVariable_0=ruleArrayVariable
    { 
        $current = $this_ArrayVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMultiElementVariableAccess().getStructuredVariableParserRuleCall_1()); 
    }
    this_StructuredVariable_1=ruleStructuredVariable
    { 
        $current = $this_StructuredVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayVariable
entryRuleArrayVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayVariableRule()); }
	 iv_ruleArrayVariable=ruleArrayVariable 
	 { $current=$iv_ruleArrayVariable.current; } 
	 EOF 
;

// Rule ArrayVariable
ruleArrayVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayVariableRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getArrayVariableAccess().getSubscriptedVariableVariableCrossReference_0_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayVariableAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayVariableAccess().getSubscriptsExpressionParserRuleCall_2_0()); 
	    }
		lv_subscripts_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayVariableRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_2_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayVariableAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayVariableAccess().getSubscriptsExpressionParserRuleCall_3_1_0()); 
	    }
		lv_subscripts_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayVariableRule());
	        }
       		add(
       			$current, 
       			"subscripts",
        		lv_subscripts_4_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayVariableAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStructuredVariable
entryRuleStructuredVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructuredVariableRule()); }
	 iv_ruleStructuredVariable=ruleStructuredVariable 
	 { $current=$iv_ruleStructuredVariable.current; } 
	 EOF 
;

// Rule StructuredVariable
ruleStructuredVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructuredVariableRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStructuredVariableAccess().getRecordVariableVariableCrossReference_0_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_fieldSelector_1_0=RULE_FIELD_SELECTOR
		{
			newLeafNode(lv_fieldSelector_1_0, grammarAccess.getStructuredVariableAccess().getFieldSelectorFIELD_SELECTORTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructuredVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fieldSelector",
        		lv_fieldSelector_1_0, 
        		"com.bichler.iec.Iec.FIELD_SELECTOR");
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); 
    }
    this_XorExpression_0=ruleXorExpression
    { 
        $current = $this_XorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'OR' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getOrExpressionAccess().getOperatorORKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "OR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleXorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.XorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	 iv_ruleXorExpression=ruleXorExpression 
	 { $current=$iv_ruleXorExpression.current; } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXorExpressionAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'XOR' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getXorExpressionAccess().getOperatorXORKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXorExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "XOR");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXorExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'&' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getAndExpressionAccess().getOperatorAmpersandKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'AND' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getAndExpressionAccess().getOperatorANDKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getAddExpressionParserRuleCall_0()); 
    }
    this_AddExpression_0=ruleAddExpression
    { 
        $current = $this_AddExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'=' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getComparisonAccess().getOperatorEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'<>' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getComparisonAccess().getOperatorLessThanSignGreaterThanSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=	'<' 
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getComparisonAccess().getOperatorLessThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=	'>' 
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

    |		lv_operator_2_5=	'<=' 
    {
        newLeafNode(lv_operator_2_5, grammarAccess.getComparisonAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_5, null);
	    }

    |		lv_operator_2_6=	'>=' 
    {
        newLeafNode(lv_operator_2_6, grammarAccess.getComparisonAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightAddExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAddExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.AddExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	 iv_ruleAddExpression=ruleAddExpression 
	 { $current=$iv_ruleAddExpression.current; } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAddExpressionAccess().getTermParserRuleCall_0()); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAddExpressionAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'-' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getAddExpressionAccess().getOperatorHyphenMinusKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'+' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getAddExpressionAccess().getOperatorPlusSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAddExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAddExpressionAccess().getRightTermParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAddExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getPowerExpressionParserRuleCall_0()); 
    }
    this_PowerExpression_0=rulePowerExpression
    { 
        $current = $this_PowerExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'*' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getTermAccess().getOperatorAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'/' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getTermAccess().getOperatorSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=	'MOD' 
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getTermAccess().getOperatorMODKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getRightPowerExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePowerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.PowerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePowerExpression
entryRulePowerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerExpressionRule()); }
	 iv_rulePowerExpression=rulePowerExpression 
	 { $current=$iv_rulePowerExpression.current; } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerExpressionAccess().getBinaryExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'**' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getPowerExpressionAccess().getOperatorAsteriskAsteriskKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPowerExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "**");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.bichler.iec.Iec.UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0(),
            $current);
    }
)(
(
(
		lv_operator_1_1=	'NOT' 
    {
        newLeafNode(lv_operator_1_1, grammarAccess.getUnaryExpressionAccess().getOperatorNOTKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_1, null);
	    }

    |		lv_operator_1_2=	'-' 
    {
        newLeafNode(lv_operator_1_2, grammarAccess.getUnaryExpressionAccess().getOperatorHyphenMinusKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expression_2_0=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"com.bichler.iec.Iec.UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((	rulePrimaryExpression)=>
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); 
    }
    this_PrimaryExpression_3=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableVariableAccessParserRuleCall_1_0()); 
	    }
		lv_variable_1_0=ruleVariableAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"com.bichler.iec.Iec.VariableAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesesExpressionParserRuleCall_2()); 
    }
    this_ParenthesesExpression_2=ruleParenthesesExpression
    { 
        $current = $this_ParenthesesExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFbnameFunctionDeclarationCrossReference_3_0_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_openbr_4_0=	'(' 
    {
        newLeafNode(lv_openbr_4_0, grammarAccess.getPrimaryExpressionAccess().getOpenbrLeftParenthesisKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "openbr", lv_openbr_4_0, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParamassignmentParamAssignmentParserRuleCall_3_2_0()); 
	    }
		lv_paramassignment_5_0=ruleParamAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"paramassignment",
        		lv_paramassignment_5_0, 
        		"com.bichler.iec.Iec.ParamAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParamassignmentParamAssignmentParserRuleCall_3_3_1_0()); 
	    }
		lv_paramassignment_7_0=ruleParamAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		add(
       			$current, 
       			"paramassignment",
        		lv_paramassignment_7_0, 
        		"com.bichler.iec.Iec.ParamAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		lv_closebr_8_0=	')' 
    {
        newLeafNode(lv_closebr_8_0, grammarAccess.getPrimaryExpressionAccess().getClosebrRightParenthesisKeyword_3_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryExpressionRule());
	        }
       		setWithLastConsumed($current, "closebr", lv_closebr_8_0, ")");
	    }

)
)))
;





// Entry rule entryRuleParenthesesExpression
entryRuleParenthesesExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesesExpressionRule()); }
	 iv_ruleParenthesesExpression=ruleParenthesesExpression 
	 { $current=$iv_ruleParenthesesExpression.current; } 
	 EOF 
;

// Rule ParenthesesExpression
ruleParenthesesExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_openbr_0_0=	'(' 
    {
        newLeafNode(lv_openbr_0_0, grammarAccess.getParenthesesExpressionAccess().getOpenbrLeftParenthesisKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParenthesesExpressionRule());
	        }
       		setWithLastConsumed($current, "openbr", lv_openbr_0_0, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesesExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesesExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_closebr_2_0=	')' 
    {
        newLeafNode(lv_closebr_2_0, grammarAccess.getParenthesesExpressionAccess().getClosebrRightParenthesisKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParenthesesExpressionRule());
	        }
       		setWithLastConsumed($current, "closebr", lv_closebr_2_0, ")");
	    }

)
))
;





// Entry rule entryRuleParamAssignment
entryRuleParamAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamAssignmentRule()); }
	 iv_ruleParamAssignment=ruleParamAssignment 
	 { $current=$iv_ruleParamAssignment.current; } 
	 EOF 
;

// Rule ParamAssignment
ruleParamAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParamAssignmentAccess().getVariablenameNamedVariableAccessCrossReference_0_0_0_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamAssignmentAccess().getColonEqualsSignKeyword_0_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAssignmentAccess().getExpressionExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_not_3_0=	'NOT' 
    {
        newLeafNode(lv_not_3_0, grammarAccess.getParamAssignmentAccess().getNotNOTKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamAssignmentRule());
	        }
       		setWithLastConsumed($current, "not", true, "NOT");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParamAssignmentAccess().getVariable1NamedVariableAccessCrossReference_1_1_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getParamAssignmentAccess().getColonGreaterThanSignKeyword_1_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParamAssignmentAccess().getVariable2VariableCrossReference_1_3_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FUNCTION' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFUNCTIONKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeNonGenericTypeParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleNonGenericType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"com.bichler.iec.Iec.NonGenericType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getIoVarDeclarationsIoVarDeclarationsParserRuleCall_4_0()); 
	    }
		lv_ioVarDeclarations_4_0=ruleIoVarDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"ioVarDeclarations",
        		lv_ioVarDeclarations_4_0, 
        		"com.bichler.iec.Iec.IoVarDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyFunctionBodyParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleFunctionBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"com.bichler.iec.Iec.FunctionBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6='END_FUNCTION' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionDeclarationAccess().getEND_FUNCTIONKeyword_6());
    }
)
;





// Entry rule entryRuleIoVarDeclarations
entryRuleIoVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIoVarDeclarationsRule()); }
	 iv_ruleIoVarDeclarations=ruleIoVarDeclarations 
	 { $current=$iv_ruleIoVarDeclarations.current; } 
	 EOF 
;

// Rule IoVarDeclarations
ruleIoVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIoVarDeclarationsAccess().getInputDeclarationsParserRuleCall_0()); 
    }
    this_InputDeclarations_0=ruleInputDeclarations
    { 
        $current = $this_InputDeclarations_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIoVarDeclarationsAccess().getOutputDeclarationsParserRuleCall_1()); 
    }
    this_OutputDeclarations_1=ruleOutputDeclarations
    { 
        $current = $this_OutputDeclarations_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIoVarDeclarationsAccess().getInputOutputDeclarationsParserRuleCall_2()); 
    }
    this_InputOutputDeclarations_2=ruleInputOutputDeclarations
    { 
        $current = $this_InputOutputDeclarations_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInputDeclarations
entryRuleInputDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputDeclarationsRule()); }
	 iv_ruleInputDeclarations=ruleInputDeclarations 
	 { $current=$iv_ruleInputDeclarations.current; } 
	 EOF 
;

// Rule InputDeclarations
ruleInputDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR_INPUT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInputDeclarationsAccess().getVAR_INPUTKeyword_0());
    }
(	otherlv_1='RETAIN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputDeclarationsAccess().getRETAINKeyword_1_0());
    }

    |	otherlv_2='NON_RETAIN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInputDeclarationsAccess().getNON_RETAINKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInputDeclarationsAccess().getDeclarationsInputDeclarationParserRuleCall_2_0()); 
	    }
		lv_declarations_3_0=ruleInputDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_3_0, 
        		"com.bichler.iec.Iec.InputDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getInputDeclarationsAccess().getEOLTerminalRuleCall_3()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputDeclarationsAccess().getDeclarationsInputDeclarationParserRuleCall_4_0_0()); 
	    }
		lv_declarations_5_0=ruleInputDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_5_0, 
        		"com.bichler.iec.Iec.InputDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_6=RULE_EOL
    { 
    newLeafNode(this_EOL_6, grammarAccess.getInputDeclarationsAccess().getEOLTerminalRuleCall_4_1()); 
    }
)*	otherlv_7='END_VAR' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInputDeclarationsAccess().getEND_VARKeyword_5());
    }
)
;





// Entry rule entryRuleInputDeclaration
entryRuleInputDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputDeclarationRule()); }
	 iv_ruleInputDeclaration=ruleInputDeclaration 
	 { $current=$iv_ruleInputDeclaration.current; } 
	 EOF 
;

// Rule InputDeclaration
ruleInputDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputDeclarationAccess().getVar1ListVar1ListParserRuleCall_0_0()); 
	    }
		lv_var1List_0_0=ruleVar1List		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDeclarationRule());
	        }
       		set(
       			$current, 
       			"var1List",
        		lv_var1List_0_0, 
        		"com.bichler.iec.Iec.Var1List");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputDeclarationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputDeclarationAccess().getDeclSpecificationDeclSpecificationParserRuleCall_2_0()); 
	    }
		lv_declSpecification_2_0=ruleDeclSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputDeclarationRule());
	        }
       		set(
       			$current, 
       			"declSpecification",
        		lv_declSpecification_2_0, 
        		"com.bichler.iec.Iec.DeclSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleDeclSpecification
entryRuleDeclSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclSpecificationRule()); }
	 iv_ruleDeclSpecification=ruleDeclSpecification 
	 { $current=$iv_ruleDeclSpecification.current; } 
	 EOF 
;

// Rule DeclSpecification
ruleDeclSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclSpecificationAccess().getVarDeclSpecificationParserRuleCall_0()); 
    }
    this_VarDeclSpecification_0=ruleVarDeclSpecification
    { 
        $current = $this_VarDeclSpecification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclSpecificationAccess().getEdgeDeclSpecificationParserRuleCall_1()); 
    }
    this_EdgeDeclSpecification_1=ruleEdgeDeclSpecification
    { 
        $current = $this_EdgeDeclSpecification_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVarDeclSpecification
entryRuleVarDeclSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclSpecificationRule()); }
	 iv_ruleVarDeclSpecification=ruleVarDeclSpecification 
	 { $current=$iv_ruleVarDeclSpecification.current; } 
	 EOF 
;

// Rule VarDeclSpecification
ruleVarDeclSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclSpecificationAccess().getSpecInitSpecInitParserRuleCall_0()); 
	    }
		lv_specInit_0_0=ruleSpecInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclSpecificationRule());
	        }
       		set(
       			$current, 
       			"specInit",
        		lv_specInit_0_0, 
        		"com.bichler.iec.Iec.SpecInit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEdgeDeclSpecification
entryRuleEdgeDeclSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeDeclSpecificationRule()); }
	 iv_ruleEdgeDeclSpecification=ruleEdgeDeclSpecification 
	 { $current=$iv_ruleEdgeDeclSpecification.current; } 
	 EOF 
;

// Rule EdgeDeclSpecification
ruleEdgeDeclSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BOOL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEdgeDeclSpecificationAccess().getBOOLKeyword_0());
    }
((
(
		lv_rEdge_1_0=	'R_EDGE' 
    {
        newLeafNode(lv_rEdge_1_0, grammarAccess.getEdgeDeclSpecificationAccess().getREdgeR_EDGEKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeDeclSpecificationRule());
	        }
       		setWithLastConsumed($current, "rEdge", true, "R_EDGE");
	    }

)
)
    |(
(
		lv_fEdge_2_0=	'F_EDGE' 
    {
        newLeafNode(lv_fEdge_2_0, grammarAccess.getEdgeDeclSpecificationAccess().getFEdgeF_EDGEKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeDeclSpecificationRule());
	        }
       		setWithLastConsumed($current, "fEdge", true, "F_EDGE");
	    }

)
)))
;





// Entry rule entryRuleVar1List
entryRuleVar1List returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVar1ListRule()); }
	 iv_ruleVar1List=ruleVar1List 
	 { $current=$iv_ruleVar1List.current; } 
	 EOF 
;

// Rule Var1List
ruleVar1List returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVar1ListAccess().getVariablesVariableParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVar1ListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"com.bichler.iec.Iec.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVar1ListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVar1ListAccess().getVariablesVariableParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVar1ListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"com.bichler.iec.Iec.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOutputDeclarations
entryRuleOutputDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputDeclarationsRule()); }
	 iv_ruleOutputDeclarations=ruleOutputDeclarations 
	 { $current=$iv_ruleOutputDeclarations.current; } 
	 EOF 
;

// Rule OutputDeclarations
ruleOutputDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR_OUTPUT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutputDeclarationsAccess().getVAR_OUTPUTKeyword_0());
    }
(	otherlv_1='RETAIN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputDeclarationsAccess().getRETAINKeyword_1_0());
    }

    |	otherlv_2='NON_RETAIN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOutputDeclarationsAccess().getNON_RETAINKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputDeclarationsAccess().getInitDeclsVarInitDeclParserRuleCall_2_0()); 
	    }
		lv_initDecls_3_0=ruleVarInitDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initDecls",
        		lv_initDecls_3_0, 
        		"com.bichler.iec.Iec.VarInitDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getOutputDeclarationsAccess().getEOLTerminalRuleCall_3()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOutputDeclarationsAccess().getInitDeclsVarInitDeclParserRuleCall_4_0_0()); 
	    }
		lv_initDecls_5_0=ruleVarInitDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initDecls",
        		lv_initDecls_5_0, 
        		"com.bichler.iec.Iec.VarInitDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_6=RULE_EOL
    { 
    newLeafNode(this_EOL_6, grammarAccess.getOutputDeclarationsAccess().getEOLTerminalRuleCall_4_1()); 
    }
)*	otherlv_7='END_VAR' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOutputDeclarationsAccess().getEND_VARKeyword_5());
    }
)
;





// Entry rule entryRuleVarInitDecl
entryRuleVarInitDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarInitDeclRule()); }
	 iv_ruleVarInitDecl=ruleVarInitDecl 
	 { $current=$iv_ruleVarInitDecl.current; } 
	 EOF 
;

// Rule VarInitDecl
ruleVarInitDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitDeclAccess().getVar1ListVar1ListParserRuleCall_0_0()); 
	    }
		lv_var1List_0_0=ruleVar1List		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitDeclRule());
	        }
       		set(
       			$current, 
       			"var1List",
        		lv_var1List_0_0, 
        		"com.bichler.iec.Iec.Var1List");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarInitDeclAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitDeclAccess().getSpecInitSpecInitParserRuleCall_2_0()); 
	    }
		lv_specInit_2_0=ruleSpecInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitDeclRule());
	        }
       		set(
       			$current, 
       			"specInit",
        		lv_specInit_2_0, 
        		"com.bichler.iec.Iec.SpecInit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInputOutputDeclarations
entryRuleInputOutputDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputOutputDeclarationsRule()); }
	 iv_ruleInputOutputDeclarations=ruleInputOutputDeclarations 
	 { $current=$iv_ruleInputOutputDeclarations.current; } 
	 EOF 
;

// Rule InputOutputDeclarations
ruleInputOutputDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR_IN_OUT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInputOutputDeclarationsAccess().getVAR_IN_OUTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputOutputDeclarationsAccess().getInitDeclsVarInitDeclParserRuleCall_1_0()); 
	    }
		lv_initDecls_1_0=ruleVarInitDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputOutputDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initDecls",
        		lv_initDecls_1_0, 
        		"com.bichler.iec.Iec.VarInitDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getInputOutputDeclarationsAccess().getEOLTerminalRuleCall_2()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputOutputDeclarationsAccess().getInitDeclsVarInitDeclParserRuleCall_3_0_0()); 
	    }
		lv_initDecls_3_0=ruleVarInitDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputOutputDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initDecls",
        		lv_initDecls_3_0, 
        		"com.bichler.iec.Iec.VarInitDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getInputOutputDeclarationsAccess().getEOLTerminalRuleCall_3_1()); 
    }
)*	otherlv_5='END_VAR' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInputOutputDeclarationsAccess().getEND_VARKeyword_4());
    }
)
;







// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); }
	 iv_ruleFunctionBody=ruleFunctionBody 
	 { $current=$iv_ruleFunctionBody.current; } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionBodyAccess().getInstructionListParserRuleCall_0()); 
    }
    this_InstructionList_0=ruleInstructionList
    { 
        $current = $this_InstructionList_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyAccess().getStatementListParserRuleCall_1()); 
    }
    this_StatementList_1=ruleStatementList
    { 
        $current = $this_StatementList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInstructionList
entryRuleInstructionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionListRule()); }
	 iv_ruleInstructionList=ruleInstructionList 
	 { $current=$iv_ruleInstructionList.current; } 
	 EOF 
;

// Rule InstructionList
ruleInstructionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionListAccess().getInstructionsInstructionParserRuleCall_0_0()); 
	    }
		lv_instructions_0_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionListRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_0_0, 
        		"com.bichler.iec.Iec.Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionListAccess().getInstructionsInstructionParserRuleCall_1_0()); 
	    }
		lv_instructions_1_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionListRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_1_0, 
        		"com.bichler.iec.Iec.Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getLabelLabelParserRuleCall_0_0_0()); 
	    }
		lv_label_0_0=ruleLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"label",
        		lv_label_0_0, 
        		"com.bichler.iec.Iec.Label");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstructionAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionAccess().getInstructionOperationParserRuleCall_1_0()); 
	    }
		lv_instruction_2_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionRule());
	        }
       		set(
       			$current, 
       			"instruction",
        		lv_instruction_2_0, 
        		"com.bichler.iec.Iec.Operation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLabelAccess().getNameIdentifierParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLabelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getSimpleOperationParserRuleCall_0()); 
    }
    this_SimpleOperation_0=ruleSimpleOperation
    { 
        $current = $this_SimpleOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getExpressionOperationParserRuleCall_1()); 
    }
    this_ExpressionOperation_1=ruleExpressionOperation
    { 
        $current = $this_ExpressionOperation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationAccess().getJmpOperationParserRuleCall_2()); 
    }
    this_JmpOperation_2=ruleJmpOperation
    { 
        $current = $this_JmpOperation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleOperation
entryRuleSimpleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleOperationRule()); }
	 iv_ruleSimpleOperation=ruleSimpleOperation 
	 { $current=$iv_ruleSimpleOperation.current; } 
	 EOF 
;

// Rule SimpleOperation
ruleSimpleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleOperationAccess().getOperatorSimpleOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleSimpleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"com.bichler.iec.Iec.SimpleOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleOperationAccess().getOperandOperandParserRuleCall_1_0()); 
	    }
		lv_operand_1_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"com.bichler.iec.Iec.Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleExpressionOperation
entryRuleExpressionOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionOperationRule()); }
	 iv_ruleExpressionOperation=ruleExpressionOperation 
	 { $current=$iv_ruleExpressionOperation.current; } 
	 EOF 
;

// Rule ExpressionOperation
ruleExpressionOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOperationAccess().getOperatorExpressionOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleExpressionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"com.bichler.iec.Iec.ExpressionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionOperationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOperationAccess().getOperandOperandParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"com.bichler.iec.Iec.Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionOperationAccess().getSimpleInstructionListSimpleInstructionListParserRuleCall_3_0()); 
	    }
		lv_simpleInstructionList_3_0=ruleSimpleInstructionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionOperationRule());
	        }
       		set(
       			$current, 
       			"simpleInstructionList",
        		lv_simpleInstructionList_3_0, 
        		"com.bichler.iec.Iec.SimpleInstructionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionOperationAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleJmpOperation
entryRuleJmpOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJmpOperationRule()); }
	 iv_ruleJmpOperation=ruleJmpOperation 
	 { $current=$iv_ruleJmpOperation.current; } 
	 EOF 
;

// Rule JmpOperation
ruleJmpOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJmpOperationAccess().getOperatorJmpOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleJmpOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJmpOperationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"com.bichler.iec.Iec.JmpOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJmpOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJmpOperationAccess().getLabelLabelCrossReference_1_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleOperator
entryRuleSimpleOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleOperatorRule()); } 
	 iv_ruleSimpleOperator=ruleSimpleOperator 
	 { $current=$iv_ruleSimpleOperator.current.getText(); }  
	 EOF 
;

// Rule SimpleOperator
ruleSimpleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='LD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleOperatorAccess().getLDKeyword_0()); 
    }

    |
	kw='LDN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleOperatorAccess().getLDNKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleExpressionOperator
entryRuleExpressionOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionOperatorRule()); } 
	 iv_ruleExpressionOperator=ruleExpressionOperator 
	 { $current=$iv_ruleExpressionOperator.current.getText(); }  
	 EOF 
;

// Rule ExpressionOperator
ruleExpressionOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='AND' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionOperatorAccess().getANDKeyword_0()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionOperatorAccess().getAmpersandKeyword_1()); 
    }

    |
	kw='ADD' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionOperatorAccess().getADDKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleJmpOperator
entryRuleJmpOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJmpOperatorRule()); } 
	 iv_ruleJmpOperator=ruleJmpOperator 
	 { $current=$iv_ruleJmpOperator.current.getText(); }  
	 EOF 
;

// Rule JmpOperator
ruleJmpOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='JMP' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJmpOperatorAccess().getJMPKeyword_0()); 
    }

    |
	kw='JMPC' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJmpOperatorAccess().getJMPCKeyword_1()); 
    }

    |
	kw='JMPCN' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJmpOperatorAccess().getJMPCNKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperandAccess().getConstantConstantParserRuleCall_0_0()); 
	    }
		lv_constant_0_0=ruleConstant		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_0_0, 
        		"com.bichler.iec.Iec.Constant");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperandAccess().getReferenceReferencedOperandParserRuleCall_1_0()); 
	    }
		lv_reference_1_0=ruleReferencedOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperandRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_1_0, 
        		"com.bichler.iec.Iec.ReferencedOperand");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReferencedOperand
entryRuleReferencedOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferencedOperandRule()); }
	 iv_ruleReferencedOperand=ruleReferencedOperand 
	 { $current=$iv_ruleReferencedOperand.current; } 
	 EOF 
;

// Rule ReferencedOperand
ruleReferencedOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReferencedOperandAccess().getVariableAccessParserRuleCall_0()); 
    }
    this_VariableAccess_0=ruleVariableAccess
    { 
        $current = $this_VariableAccess_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getReferencedOperandAccess().getEnumeratedValueParserRuleCall_1()); 
    }
    this_EnumeratedValue_1=ruleEnumeratedValue
    { 
        $current = $this_EnumeratedValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleInstructionList
entryRuleSimpleInstructionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleInstructionListRule()); }
	 iv_ruleSimpleInstructionList=ruleSimpleInstructionList 
	 { $current=$iv_ruleSimpleInstructionList.current; } 
	 EOF 
;

// Rule SimpleInstructionList
ruleSimpleInstructionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleInstructionListAccess().getInstructionsSimpleInstructionParserRuleCall_0_0()); 
	    }
		lv_instructions_0_0=ruleSimpleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleInstructionListRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_0_0, 
        		"com.bichler.iec.Iec.SimpleInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleInstructionListAccess().getInstructionsSimpleInstructionParserRuleCall_1_0()); 
	    }
		lv_instructions_1_0=ruleSimpleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleInstructionListRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_1_0, 
        		"com.bichler.iec.Iec.SimpleInstruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSimpleInstruction
entryRuleSimpleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleInstructionRule()); }
	 iv_ruleSimpleInstruction=ruleSimpleInstruction 
	 { $current=$iv_ruleSimpleInstruction.current; } 
	 EOF 
;

// Rule SimpleInstruction
ruleSimpleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleInstructionAccess().getSimpleOperationParserRuleCall_0()); 
    }
    this_SimpleOperation_0=ruleSimpleOperation
    { 
        $current = $this_SimpleOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleInstructionAccess().getExpressionOperationParserRuleCall_1()); 
    }
    this_ExpressionOperation_1=ruleExpressionOperation
    { 
        $current = $this_ExpressionOperation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	 iv_ruleStatementList=ruleStatementList 
	 { $current=$iv_ruleStatementList.current; } 
	 EOF 
;

// Rule StatementList
ruleStatementList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_0_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementListRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"com.bichler.iec.Iec.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_1=RULE_EOL
    { 
    newLeafNode(this_EOL_1, grammarAccess.getStatementListAccess().getEOLTerminalRuleCall_1()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_2_0_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementListRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"com.bichler.iec.Iec.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_3=RULE_EOL
    { 
    newLeafNode(this_EOL_3, grammarAccess.getStatementListAccess().getEOLTerminalRuleCall_2_1()); 
    }
)*)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignStatementParserRuleCall_0()); 
    }
    this_AssignStatement_0=ruleAssignStatement
    { 
        $current = $this_AssignStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_1()); 
    }
    this_SelectionStatement_1=ruleSelectionStatement
    { 
        $current = $this_SelectionStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignStatement
entryRuleAssignStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignStatementRule()); }
	 iv_ruleAssignStatement=ruleAssignStatement 
	 { $current=$iv_ruleAssignStatement.current; } 
	 EOF 
;

// Rule AssignStatement
ruleAssignStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignStatementRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getAssignStatementAccess().getVariableVariableCrossReference_0_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignStatementAccess().getColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionStatementRule()); }
	 iv_ruleSelectionStatement=ruleSelectionStatement 
	 { $current=$iv_ruleSelectionStatement.current; } 
	 EOF 
;

// Rule SelectionStatement
ruleSelectionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getIfStatementParserRuleCall_0()); 
    }
    this_IfStatement_0=ruleIfStatement
    { 
        $current = $this_IfStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getCaseStatementParserRuleCall_1()); 
    }
    this_CaseStatement_1=ruleCaseStatement
    { 
        $current = $this_CaseStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_ifExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifExpression",
        		lv_ifExpression_1_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='THEN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getTHENKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getThenStatementListStatementListParserRuleCall_3_0()); 
	    }
		lv_thenStatementList_3_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenStatementList",
        		lv_thenStatementList_3_0, 
        		"com.bichler.iec.Iec.StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfsElseIfParserRuleCall_4_0()); 
	    }
		lv_elseIfs_4_0=ruleElseIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"elseIfs",
        		lv_elseIfs_4_0, 
        		"com.bichler.iec.Iec.ElseIf");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_5='ELSE' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getELSEKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementListStatementListParserRuleCall_5_1_0()); 
	    }
		lv_elseStatementList_6_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatementList",
        		lv_elseStatementList_6_0, 
        		"com.bichler.iec.Iec.StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='END_IF' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getEND_IFKeyword_6());
    }
)
;





// Entry rule entryRuleElseIf
entryRuleElseIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseIfRule()); }
	 iv_ruleElseIf=ruleElseIf 
	 { $current=$iv_ruleElseIf.current; } 
	 EOF 
;

// Rule ElseIf
ruleElseIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ELSIF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseIfAccess().getELSIFKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='THEN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElseIfAccess().getTHENKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfAccess().getStatementListStatementListParserRuleCall_3_0()); 
	    }
		lv_statementList_3_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfRule());
	        }
       		set(
       			$current, 
       			"statementList",
        		lv_statementList_3_0, 
        		"com.bichler.iec.Iec.StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	 iv_ruleCaseStatement=ruleCaseStatement 
	 { $current=$iv_ruleCaseStatement.current; } 
	 EOF 
;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CASE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCASEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"com.bichler.iec.Iec.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='OF' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getOFKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getCaseElementsCaseElementParserRuleCall_3_0()); 
	    }
		lv_caseElements_3_0=ruleCaseElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		add(
       			$current, 
       			"caseElements",
        		lv_caseElements_3_0, 
        		"com.bichler.iec.Iec.CaseElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_4='ELSE' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCaseStatementAccess().getELSEKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseStatementAccess().getElseStatementListStatementListParserRuleCall_4_1_0()); 
	    }
		lv_elseStatementList_5_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatementList",
        		lv_elseStatementList_5_0, 
        		"com.bichler.iec.Iec.StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='END_CASE' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCaseStatementAccess().getEND_CASEKeyword_5());
    }
)
;





// Entry rule entryRuleCaseElement
entryRuleCaseElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseElementRule()); }
	 iv_ruleCaseElement=ruleCaseElement 
	 { $current=$iv_ruleCaseElement.current; } 
	 EOF 
;

// Rule CaseElement
ruleCaseElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseElementAccess().getCaseListCaseListParserRuleCall_0_0()); 
	    }
		lv_caseList_0_0=ruleCaseList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseElementRule());
	        }
       		set(
       			$current, 
       			"caseList",
        		lv_caseList_0_0, 
        		"com.bichler.iec.Iec.CaseList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseElementAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseElementAccess().getStatementListStatementListParserRuleCall_2_0()); 
	    }
		lv_statementList_2_0=ruleStatementList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseElementRule());
	        }
       		set(
       			$current, 
       			"statementList",
        		lv_statementList_2_0, 
        		"com.bichler.iec.Iec.StatementList");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCaseList
entryRuleCaseList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseListRule()); }
	 iv_ruleCaseList=ruleCaseList 
	 { $current=$iv_ruleCaseList.current; } 
	 EOF 
;

// Rule CaseList
ruleCaseList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCaseListAccess().getElementsCaseListElementParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleCaseListElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"com.bichler.iec.Iec.CaseListElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCaseListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseListAccess().getElementsCaseListElementParserRuleCall_1_1_0()); 
	    }
		lv_elements_2_0=ruleCaseListElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseListRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"com.bichler.iec.Iec.CaseListElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCaseListElement
entryRuleCaseListElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseListElementRule()); }
	 iv_ruleCaseListElement=ruleCaseListElement 
	 { $current=$iv_ruleCaseListElement.current; } 
	 EOF 
;

// Rule CaseListElement
ruleCaseListElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_subRange_0_0=RULE_SUB_RANGE
		{
			newLeafNode(lv_subRange_0_0, grammarAccess.getCaseListElementAccess().getSubRangeSUB_RANGETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCaseListElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"subRange",
        		lv_subRange_0_0, 
        		"com.bichler.iec.Iec.SUB_RANGE");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseListElementAccess().getIntegerSignedIntegerParserRuleCall_1_0()); 
	    }
		lv_integer_1_0=ruleSignedInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseListElementRule());
	        }
       		set(
       			$current, 
       			"integer",
        		lv_integer_1_0, 
        		"com.bichler.iec.Iec.SignedInteger");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCaseListElementRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCaseListElementAccess().getEnumeratedValueEnumeratedValueCrossReference_2_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionBlockDeclaration
entryRuleFunctionBlockDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBlockDeclarationRule()); }
	 iv_ruleFunctionBlockDeclaration=ruleFunctionBlockDeclaration 
	 { $current=$iv_ruleFunctionBlockDeclaration.current; } 
	 EOF 
;

// Rule FunctionBlockDeclaration
ruleFunctionBlockDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='FUNCTION_BLOCK' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionBlockDeclarationAccess().getFUNCTION_BLOCKKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBlockDeclarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBlockDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBlockDeclarationAccess().getVarDeclarationsFunctionBlockVarDeclarationsParserRuleCall_2_0()); 
	    }
		lv_varDeclarations_2_0=ruleFunctionBlockVarDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBlockDeclarationRule());
	        }
       		add(
       			$current, 
       			"varDeclarations",
        		lv_varDeclarations_2_0, 
        		"com.bichler.iec.Iec.FunctionBlockVarDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBlockDeclarationAccess().getBodyFunctionBlockBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleFunctionBlockBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBlockDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"com.bichler.iec.Iec.FunctionBlockBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='END_FUNCTION_BLOCK' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionBlockDeclarationAccess().getEND_FUNCTION_BLOCKKeyword_4());
    }
)
;





// Entry rule entryRuleFunctionBlockVarDeclarations
entryRuleFunctionBlockVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBlockVarDeclarationsRule()); }
	 iv_ruleFunctionBlockVarDeclarations=ruleFunctionBlockVarDeclarations 
	 { $current=$iv_ruleFunctionBlockVarDeclarations.current; } 
	 EOF 
;

// Rule FunctionBlockVarDeclarations
ruleFunctionBlockVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionBlockVarDeclarationsAccess().getIoVarDeclarationsParserRuleCall_0()); 
    }
    this_IoVarDeclarations_0=ruleIoVarDeclarations
    { 
        $current = $this_IoVarDeclarations_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBlockVarDeclarationsAccess().getOtherVarDeclarationsParserRuleCall_1()); 
    }
    this_OtherVarDeclarations_1=ruleOtherVarDeclarations
    { 
        $current = $this_OtherVarDeclarations_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOtherVarDeclarations
entryRuleOtherVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherVarDeclarationsRule()); }
	 iv_ruleOtherVarDeclarations=ruleOtherVarDeclarations 
	 { $current=$iv_ruleOtherVarDeclarations.current; } 
	 EOF 
;

// Rule OtherVarDeclarations
ruleOtherVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOtherVarDeclarationsAccess().getVarDeclarationsParserRuleCall()); 
    }
    this_VarDeclarations_0=ruleVarDeclarations
    { 
        $current = $this_VarDeclarations_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleVarDeclarations
entryRuleVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclarationsRule()); }
	 iv_ruleVarDeclarations=ruleVarDeclarations 
	 { $current=$iv_ruleVarDeclarations.current; } 
	 EOF 
;

// Rule VarDeclarations
ruleVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVarDeclarationsAccess().getVARKeyword_0());
    }
(
(
		lv_constant_1_0=	'CONSTANT' 
    {
        newLeafNode(lv_constant_1_0, grammarAccess.getVarDeclarationsAccess().getConstantCONSTANTKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclarationsRule());
	        }
       		setWithLastConsumed($current, "constant", true, "CONSTANT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationsAccess().getInitDeclsVarInitDeclParserRuleCall_2_0()); 
	    }
		lv_initDecls_2_0=ruleVarInitDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initDecls",
        		lv_initDecls_2_0, 
        		"com.bichler.iec.Iec.VarInitDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_3=RULE_EOL
    { 
    newLeafNode(this_EOL_3, grammarAccess.getVarDeclarationsAccess().getEOLTerminalRuleCall_3()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationsAccess().getInitDeclsVarInitDeclParserRuleCall_4_0_0()); 
	    }
		lv_initDecls_4_0=ruleVarInitDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationsRule());
	        }
       		add(
       			$current, 
       			"initDecls",
        		lv_initDecls_4_0, 
        		"com.bichler.iec.Iec.VarInitDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_5=RULE_EOL
    { 
    newLeafNode(this_EOL_5, grammarAccess.getVarDeclarationsAccess().getEOLTerminalRuleCall_4_1()); 
    }
)*	otherlv_6='END_VAR' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVarDeclarationsAccess().getEND_VARKeyword_5());
    }
)
;





// Entry rule entryRuleFunctionBlockBody
entryRuleFunctionBlockBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBlockBodyRule()); }
	 iv_ruleFunctionBlockBody=ruleFunctionBlockBody 
	 { $current=$iv_ruleFunctionBlockBody.current; } 
	 EOF 
;

// Rule FunctionBlockBody
ruleFunctionBlockBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionBlockBodyAccess().getInstructionListParserRuleCall_0()); 
    }
    this_InstructionList_0=ruleInstructionList
    { 
        $current = $this_InstructionList_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFunctionBlockBodyAccess().getStatementListParserRuleCall_1()); 
    }
    this_StatementList_1=ruleStatementList
    { 
        $current = $this_StatementList_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleProgramDeclaration
entryRuleProgramDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramDeclarationRule()); }
	 iv_ruleProgramDeclaration=ruleProgramDeclaration 
	 { $current=$iv_ruleProgramDeclaration.current; } 
	 EOF 
;

// Rule ProgramDeclaration
ruleProgramDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PROGRAM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramDeclarationAccess().getPROGRAMKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramDeclarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramDeclarationAccess().getVarDeclarationsProgramVarDeclarationsParserRuleCall_2_0()); 
	    }
		lv_varDeclarations_2_0=ruleProgramVarDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramDeclarationRule());
	        }
       		add(
       			$current, 
       			"varDeclarations",
        		lv_varDeclarations_2_0, 
        		"com.bichler.iec.Iec.ProgramVarDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramDeclarationAccess().getBodyFunctionBlockBodyParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleFunctionBlockBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"com.bichler.iec.Iec.FunctionBlockBody");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='END_PROGRAM' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgramDeclarationAccess().getEND_PROGRAMKeyword_4());
    }
)
;





// Entry rule entryRuleProgramVarDeclarations
entryRuleProgramVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramVarDeclarationsRule()); }
	 iv_ruleProgramVarDeclarations=ruleProgramVarDeclarations 
	 { $current=$iv_ruleProgramVarDeclarations.current; } 
	 EOF 
;

// Rule ProgramVarDeclarations
ruleProgramVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgramVarDeclarationsAccess().getIoVarDeclarationsParserRuleCall_0()); 
    }
    this_IoVarDeclarations_0=ruleIoVarDeclarations
    { 
        $current = $this_IoVarDeclarations_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgramVarDeclarationsAccess().getOtherVarDeclarationsParserRuleCall_1()); 
    }
    this_OtherVarDeclarations_1=ruleOtherVarDeclarations
    { 
        $current = $this_OtherVarDeclarations_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgramVarDeclarationsAccess().getLocatedVarDeclarationsParserRuleCall_2()); 
    }
    this_LocatedVarDeclarations_2=ruleLocatedVarDeclarations
    { 
        $current = $this_LocatedVarDeclarations_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgramVarDeclarationsAccess().getProgramAccessDeclsParserRuleCall_3()); 
    }
    this_ProgramAccessDecls_3=ruleProgramAccessDecls
    { 
        $current = $this_ProgramAccessDecls_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLocatedVarDeclarations
entryRuleLocatedVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocatedVarDeclarationsRule()); }
	 iv_ruleLocatedVarDeclarations=ruleLocatedVarDeclarations 
	 { $current=$iv_ruleLocatedVarDeclarations.current; } 
	 EOF 
;

// Rule LocatedVarDeclarations
ruleLocatedVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocatedVarDeclarationsAccess().getVARKeyword_0());
    }
(	otherlv_1='CONSTANT' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocatedVarDeclarationsAccess().getCONSTANTKeyword_1_0());
    }

    |	otherlv_2='RETAIN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocatedVarDeclarationsAccess().getRETAINKeyword_1_1());
    }

    |	otherlv_3='NON_RETAIN' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocatedVarDeclarationsAccess().getNON_RETAINKeyword_1_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocatedVarDeclarationsAccess().getLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_2_0()); 
	    }
		lv_locatedVarDeclaration_4_0=ruleLocatedVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocatedVarDeclarationsRule());
	        }
       		add(
       			$current, 
       			"locatedVarDeclaration",
        		lv_locatedVarDeclaration_4_0, 
        		"com.bichler.iec.Iec.LocatedVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_5=RULE_EOL
    { 
    newLeafNode(this_EOL_5, grammarAccess.getLocatedVarDeclarationsAccess().getEOLTerminalRuleCall_3()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocatedVarDeclarationsAccess().getLocatedVarDeclarationLocatedVarDeclarationParserRuleCall_4_0_0()); 
	    }
		lv_locatedVarDeclaration_6_0=ruleLocatedVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocatedVarDeclarationsRule());
	        }
       		add(
       			$current, 
       			"locatedVarDeclaration",
        		lv_locatedVarDeclaration_6_0, 
        		"com.bichler.iec.Iec.LocatedVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_7=RULE_EOL
    { 
    newLeafNode(this_EOL_7, grammarAccess.getLocatedVarDeclarationsAccess().getEOLTerminalRuleCall_4_1()); 
    }
)*	otherlv_8='END_VAR' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLocatedVarDeclarationsAccess().getEND_VARKeyword_5());
    }
)
;





// Entry rule entryRuleLocatedVarDeclaration
entryRuleLocatedVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocatedVarDeclarationRule()); }
	 iv_ruleLocatedVarDeclaration=ruleLocatedVarDeclaration 
	 { $current=$iv_ruleLocatedVarDeclaration.current; } 
	 EOF 
;

// Rule LocatedVarDeclaration
ruleLocatedVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocatedVarDeclarationAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocatedVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLocatedVarDeclarationAccess().getLocationLocationParserRuleCall_1_0()); 
	    }
		lv_location_1_0=ruleLocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocatedVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"location",
        		lv_location_1_0, 
        		"com.bichler.iec.Iec.Location");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocatedVarDeclarationAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocatedVarDeclarationAccess().getSpecInitSpecInitParserRuleCall_3_0()); 
	    }
		lv_specInit_3_0=ruleSpecInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocatedVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"specInit",
        		lv_specInit_3_0, 
        		"com.bichler.iec.Iec.SpecInit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLocation
entryRuleLocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocationRule()); }
	 iv_ruleLocation=ruleLocation 
	 { $current=$iv_ruleLocation.current; } 
	 EOF 
;

// Rule Location
ruleLocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='AT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocationAccess().getATKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocationAccess().getDirectVariableDirectVariableParserRuleCall_1_0()); 
	    }
		lv_directVariable_1_0=ruleDirectVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationRule());
	        }
       		set(
       			$current, 
       			"directVariable",
        		lv_directVariable_1_0, 
        		"com.bichler.iec.Iec.DirectVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProgramAccessDecls
entryRuleProgramAccessDecls returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramAccessDeclsRule()); }
	 iv_ruleProgramAccessDecls=ruleProgramAccessDecls 
	 { $current=$iv_ruleProgramAccessDecls.current; } 
	 EOF 
;

// Rule ProgramAccessDecls
ruleProgramAccessDecls returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR_ACCESS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramAccessDeclsAccess().getVAR_ACCESSKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccessDeclsAccess().getProgramAccessDeclProgramAccessDeclParserRuleCall_1_0()); 
	    }
		lv_programAccessDecl_1_0=ruleProgramAccessDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramAccessDeclsRule());
	        }
       		add(
       			$current, 
       			"programAccessDecl",
        		lv_programAccessDecl_1_0, 
        		"com.bichler.iec.Iec.ProgramAccessDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getProgramAccessDeclsAccess().getEOLTerminalRuleCall_2()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccessDeclsAccess().getProgramAccessDeclProgramAccessDeclParserRuleCall_3_0_0()); 
	    }
		lv_programAccessDecl_3_0=ruleProgramAccessDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramAccessDeclsRule());
	        }
       		add(
       			$current, 
       			"programAccessDecl",
        		lv_programAccessDecl_3_0, 
        		"com.bichler.iec.Iec.ProgramAccessDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_4=RULE_EOL
    { 
    newLeafNode(this_EOL_4, grammarAccess.getProgramAccessDeclsAccess().getEOLTerminalRuleCall_3_1()); 
    }
)*	otherlv_5='END_VAR' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProgramAccessDeclsAccess().getEND_VARKeyword_4());
    }
)
;





// Entry rule entryRuleProgramAccessDecl
entryRuleProgramAccessDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramAccessDeclRule()); }
	 iv_ruleProgramAccessDecl=ruleProgramAccessDecl 
	 { $current=$iv_ruleProgramAccessDecl.current; } 
	 EOF 
;

// Rule ProgramAccessDecl
ruleProgramAccessDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccessDeclAccess().getAccessNameVariableParserRuleCall_0_0()); 
	    }
		lv_accessName_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramAccessDeclRule());
	        }
       		set(
       			$current, 
       			"accessName",
        		lv_accessName_0_0, 
        		"com.bichler.iec.Iec.Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgramAccessDeclAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccessDeclAccess().getSymbolicVariableNamedVariableAccessParserRuleCall_2_0()); 
	    }
		lv_symbolicVariable_2_0=ruleNamedVariableAccess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramAccessDeclRule());
	        }
       		set(
       			$current, 
       			"symbolicVariable",
        		lv_symbolicVariable_2_0, 
        		"com.bichler.iec.Iec.NamedVariableAccess");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgramAccessDeclAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccessDeclAccess().getTypeNameNonGenericTypeParserRuleCall_4_0()); 
	    }
		lv_typeName_4_0=ruleNonGenericType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramAccessDeclRule());
	        }
       		set(
       			$current, 
       			"typeName",
        		lv_typeName_4_0, 
        		"com.bichler.iec.Iec.NonGenericType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccessDeclAccess().getDirectionDirectionParserRuleCall_5_0()); 
	    }
		lv_direction_5_0=ruleDirection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramAccessDeclRule());
	        }
       		set(
       			$current, 
       			"direction",
        		lv_direction_5_0, 
        		"com.bichler.iec.Iec.Direction");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDirection
entryRuleDirection returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDirectionRule()); } 
	 iv_ruleDirection=ruleDirection 
	 { $current=$iv_ruleDirection.current.getText(); }  
	 EOF 
;

// Rule Direction
ruleDirection returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='READ_WRITE' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDirectionAccess().getREAD_WRITEKeyword_0()); 
    }

    |
	kw='READ_ONLY' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDirectionAccess().getREAD_ONLYKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleConfigurationDeclaration
entryRuleConfigurationDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigurationDeclarationRule()); }
	 iv_ruleConfigurationDeclaration=ruleConfigurationDeclaration 
	 { $current=$iv_ruleConfigurationDeclaration.current; } 
	 EOF 
;

// Rule ConfigurationDeclaration
ruleConfigurationDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CONFIGURATION' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConfigurationDeclarationAccess().getCONFIGURATIONKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationDeclarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationDeclarationAccess().getGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_2_0()); 
	    }
		lv_globalVarDeclarations_2_0=ruleGlobalVarDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationDeclarationRule());
	        }
       		set(
       			$current, 
       			"globalVarDeclarations",
        		lv_globalVarDeclarations_2_0, 
        		"com.bichler.iec.Iec.GlobalVarDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigurationDeclarationAccess().getResdeclResourceDeclarationParserRuleCall_3_0()); 
	    }
		lv_resdecl_3_0=ruleResourceDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigurationDeclarationRule());
	        }
       		set(
       			$current, 
       			"resdecl",
        		lv_resdecl_3_0, 
        		"com.bichler.iec.Iec.ResourceDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='END_CONFIGURATION' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConfigurationDeclarationAccess().getEND_CONFIGURATIONKeyword_4());
    }
)
;





// Entry rule entryRuleResourceDeclaration
entryRuleResourceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourceDeclarationRule()); }
	 iv_ruleResourceDeclaration=ruleResourceDeclaration 
	 { $current=$iv_ruleResourceDeclaration.current; } 
	 EOF 
;

// Rule ResourceDeclaration
ruleResourceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='RESOURCE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getResourceDeclarationAccess().getRESOURCEKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResourceDeclarationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='ON' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getResourceDeclarationAccess().getONKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResourceDeclarationAccess().getResnameIdentifierParserRuleCall_3_0()); 
	    }
		lv_resname_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceDeclarationRule());
	        }
       		set(
       			$current, 
       			"resname",
        		lv_resname_3_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getResourceDeclarationAccess().getGlobalVarDeclarationsGlobalVarDeclarationsParserRuleCall_4_0()); 
	    }
		lv_globalVarDeclarations_4_0=ruleGlobalVarDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceDeclarationRule());
	        }
       		set(
       			$current, 
       			"globalVarDeclarations",
        		lv_globalVarDeclarations_4_0, 
        		"com.bichler.iec.Iec.GlobalVarDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getResourceDeclarationAccess().getSingleresourceSingleResourceDeclarationParserRuleCall_5_0()); 
	    }
		lv_singleresource_5_0=ruleSingleResourceDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceDeclarationRule());
	        }
       		set(
       			$current, 
       			"singleresource",
        		lv_singleresource_5_0, 
        		"com.bichler.iec.Iec.SingleResourceDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='END_RESOURCE' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getResourceDeclarationAccess().getEND_RESOURCEKeyword_6());
    }
)
;





// Entry rule entryRuleSingleResourceDeclaration
entryRuleSingleResourceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleResourceDeclarationRule()); }
	 iv_ruleSingleResourceDeclaration=ruleSingleResourceDeclaration 
	 { $current=$iv_ruleSingleResourceDeclaration.current; } 
	 EOF 
;

// Rule SingleResourceDeclaration
ruleSingleResourceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleResourceDeclarationAccess().getTaskConfTaskConfigurationParserRuleCall_0_0_0()); 
	    }
		lv_taskConf_0_0=ruleTaskConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleResourceDeclarationRule());
	        }
       		set(
       			$current, 
       			"taskConf",
        		lv_taskConf_0_0, 
        		"com.bichler.iec.Iec.TaskConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_1=RULE_EOL
    { 
    newLeafNode(this_EOL_1, grammarAccess.getSingleResourceDeclarationAccess().getEOLTerminalRuleCall_0_1()); 
    }
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleResourceDeclarationAccess().getProgramConfProgramConfigurationParserRuleCall_1_0_0()); 
	    }
		lv_programConf_2_0=ruleProgramConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleResourceDeclarationRule());
	        }
       		add(
       			$current, 
       			"programConf",
        		lv_programConf_2_0, 
        		"com.bichler.iec.Iec.ProgramConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_3=RULE_EOL
    { 
    newLeafNode(this_EOL_3, grammarAccess.getSingleResourceDeclarationAccess().getEOLTerminalRuleCall_1_1()); 
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSingleResourceDeclarationAccess().getProgramConfProgramConfigurationParserRuleCall_2_0_0()); 
	    }
		lv_programConf_4_0=ruleProgramConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleResourceDeclarationRule());
	        }
       		add(
       			$current, 
       			"programConf",
        		lv_programConf_4_0, 
        		"com.bichler.iec.Iec.ProgramConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_5=RULE_EOL
    { 
    newLeafNode(this_EOL_5, grammarAccess.getSingleResourceDeclarationAccess().getEOLTerminalRuleCall_2_1()); 
    }
)?)
;





// Entry rule entryRuleProgramConfiguration
entryRuleProgramConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramConfigurationRule()); }
	 iv_ruleProgramConfiguration=ruleProgramConfiguration 
	 { $current=$iv_ruleProgramConfiguration.current; } 
	 EOF 
;

// Rule ProgramConfiguration
ruleProgramConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PROGRAM' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgramConfigurationAccess().getPROGRAMKeyword_0());
    }
(	otherlv_1='RETAIN' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgramConfigurationAccess().getRETAINKeyword_1_0());
    }

    |	otherlv_2='NONRETAIN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProgramConfigurationAccess().getNONRETAINKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramConfigurationAccess().getNameIdentifierParserRuleCall_2_0()); 
	    }
		lv_name_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramConfigurationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='WITH' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgramConfigurationAccess().getWITHKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramConfigurationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getProgramConfigurationAccess().getTaskTaskConfigurationCrossReference_3_1_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProgramConfigurationAccess().getColonKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProgramConfigurationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getProgramConfigurationAccess().getProgProgramDeclarationCrossReference_5_0()); 
	    }
		ruleIdentifier		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getProgramConfigurationAccess().getLeftParenthesisKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramConfigurationAccess().getProgConfProgConfElementsParserRuleCall_6_1_0()); 
	    }
		lv_progConf_9_0=ruleProgConfElements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramConfigurationRule());
	        }
       		set(
       			$current, 
       			"progConf",
        		lv_progConf_9_0, 
        		"com.bichler.iec.Iec.ProgConfElements");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getProgramConfigurationAccess().getRightParenthesisKeyword_6_2());
    }
)?)
;





// Entry rule entryRuleProgConfElements
entryRuleProgConfElements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgConfElementsRule()); }
	 iv_ruleProgConfElements=ruleProgConfElements 
	 { $current=$iv_ruleProgConfElements.current; } 
	 EOF 
;

// Rule ProgConfElements
ruleProgConfElements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgConfElementsAccess().getProgconfProgConfElementParserRuleCall_0_0()); 
	    }
		lv_progconf_0_0=ruleProgConfElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgConfElementsRule());
	        }
       		add(
       			$current, 
       			"progconf",
        		lv_progconf_0_0, 
        		"com.bichler.iec.Iec.ProgConfElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgConfElementsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgConfElementsAccess().getProgconfProgConfElementParserRuleCall_1_1_0()); 
	    }
		lv_progconf_2_0=ruleProgConfElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgConfElementsRule());
	        }
       		add(
       			$current, 
       			"progconf",
        		lv_progconf_2_0, 
        		"com.bichler.iec.Iec.ProgConfElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleProgConfElement
entryRuleProgConfElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgConfElementRule()); }
	 iv_ruleProgConfElement=ruleProgConfElement 
	 { $current=$iv_ruleProgConfElement.current; } 
	 EOF 
;

// Rule ProgConfElement
ruleProgConfElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgConfElementAccess().getFBTaskParserRuleCall_0()); 
    }
    this_FBTask_0=ruleFBTask
    { 
        $current = $this_FBTask_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgConfElementAccess().getProgCNXNParserRuleCall_1()); 
    }
    this_ProgCNXN_1=ruleProgCNXN
    { 
        $current = $this_ProgCNXN_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFBTask
entryRuleFBTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFBTaskRule()); }
	 iv_ruleFBTask=ruleFBTask 
	 { $current=$iv_ruleFBTask.current; } 
	 EOF 
;

// Rule FBTask
ruleFBTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFBTaskAccess().getFbnameFunctionBlockDeclarationParserRuleCall_0_0()); 
	    }
		lv_fbname_0_0=ruleFunctionBlockDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBTaskRule());
	        }
       		set(
       			$current, 
       			"fbname",
        		lv_fbname_0_0, 
        		"com.bichler.iec.Iec.FunctionBlockDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='WITH' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFBTaskAccess().getWITHKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFBTaskAccess().getTaskTaskConfigurationParserRuleCall_2_0()); 
	    }
		lv_task_2_0=ruleTaskConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBTaskRule());
	        }
       		set(
       			$current, 
       			"task",
        		lv_task_2_0, 
        		"com.bichler.iec.Iec.TaskConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProgCNXN
entryRuleProgCNXN returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgCNXNRule()); }
	 iv_ruleProgCNXN=ruleProgCNXN 
	 { $current=$iv_ruleProgCNXN.current; } 
	 EOF 
;

// Rule ProgCNXN
ruleProgCNXN returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getProgCNXNAccess().getVariablenameIdentifierParserRuleCall_0_0_0()); 
	    }
		lv_variablename_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgCNXNRule());
	        }
       		set(
       			$current, 
       			"variablename",
        		lv_variablename_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgCNXNAccess().getColonEqualsSignKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgCNXNAccess().getProgdProgDataSourceParserRuleCall_0_1_1_0()); 
	    }
		lv_progd_2_0=ruleProgDataSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgCNXNRule());
	        }
       		set(
       			$current, 
       			"progd",
        		lv_progd_2_0, 
        		"com.bichler.iec.Iec.ProgDataSource");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgCNXNAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgCNXNAccess().getProgdDataSinkParserRuleCall_1_1_0()); 
	    }
		lv_progd_4_0=ruleDataSink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgCNXNRule());
	        }
       		set(
       			$current, 
       			"progd",
        		lv_progd_4_0, 
        		"com.bichler.iec.Iec.DataSink");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleDataSink
entryRuleDataSink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataSinkRule()); }
	 iv_ruleDataSink=ruleDataSink 
	 { $current=$iv_ruleDataSink.current; } 
	 EOF 
;

// Rule DataSink
ruleDataSink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataSinkAccess().getGlobvarGlobalVarParserRuleCall_0_0()); 
	    }
		lv_globvar_0_0=ruleGlobalVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSinkRule());
	        }
       		set(
       			$current, 
       			"globvar",
        		lv_globvar_0_0, 
        		"com.bichler.iec.Iec.GlobalVar");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDataSinkAccess().getDirvarDirectVariableParserRuleCall_1_0()); 
	    }
		lv_dirvar_1_0=ruleDirectVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSinkRule());
	        }
       		set(
       			$current, 
       			"dirvar",
        		lv_dirvar_1_0, 
        		"com.bichler.iec.Iec.DirectVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProgDataSource
entryRuleProgDataSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgDataSourceRule()); }
	 iv_ruleProgDataSource=ruleProgDataSource 
	 { $current=$iv_ruleProgDataSource.current; } 
	 EOF 
;

// Rule ProgDataSource
ruleProgDataSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProgDataSourceAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getProgDataSourceAccess().getDirectVariableParserRuleCall_1()); 
    }
    this_DirectVariable_1=ruleDirectVariable
    { 
        $current = $this_DirectVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGlobalVarDeclarations
entryRuleGlobalVarDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarDeclarationsRule()); }
	 iv_ruleGlobalVarDeclarations=ruleGlobalVarDeclarations 
	 { $current=$iv_ruleGlobalVarDeclarations.current; } 
	 EOF 
;

// Rule GlobalVarDeclarations
ruleGlobalVarDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='VAR_GLOBAL' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalVarDeclarationsAccess().getVAR_GLOBALKeyword_0());
    }
(	otherlv_1='CONSTANT' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGlobalVarDeclarationsAccess().getCONSTANTKeyword_1_0());
    }

    |	otherlv_2='RETAIN' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGlobalVarDeclarationsAccess().getRETAINKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarDeclarationsAccess().getGlobalVarDeclGlobalVarDeclParserRuleCall_2_0()); 
	    }
		lv_globalVarDecl_3_0=ruleGlobalVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarDeclarationsRule());
	        }
       		add(
       			$current, 
       			"globalVarDecl",
        		lv_globalVarDecl_3_0, 
        		"com.bichler.iec.Iec.GlobalVarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarDeclarationsAccess().getGlobalVarDeclGlobalVarDeclParserRuleCall_3_0()); 
	    }
		lv_globalVarDecl_4_0=ruleGlobalVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarDeclarationsRule());
	        }
       		add(
       			$current, 
       			"globalVarDecl",
        		lv_globalVarDecl_4_0, 
        		"com.bichler.iec.Iec.GlobalVarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='END_VAR' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGlobalVarDeclarationsAccess().getEND_VARKeyword_4());
    }
)
;





// Entry rule entryRuleGlobalVarDecl
entryRuleGlobalVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarDeclRule()); }
	 iv_ruleGlobalVarDecl=ruleGlobalVarDecl 
	 { $current=$iv_ruleGlobalVarDecl.current; } 
	 EOF 
;

// Rule GlobalVarDecl
ruleGlobalVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarDeclAccess().getSpecGlobalVarSpecParserRuleCall_0_0()); 
	    }
		lv_spec_0_0=ruleGlobalVarSpec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarDeclRule());
	        }
       		set(
       			$current, 
       			"spec",
        		lv_spec_0_0, 
        		"com.bichler.iec.Iec.GlobalVarSpec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGlobalVarDeclAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarDeclAccess().getSpecInitSpecInitParserRuleCall_2_0()); 
	    }
		lv_specInit_2_0=ruleSpecInit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarDeclRule());
	        }
       		set(
       			$current, 
       			"specInit",
        		lv_specInit_2_0, 
        		"com.bichler.iec.Iec.SpecInit");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_EOL_3=RULE_EOL
    { 
    newLeafNode(this_EOL_3, grammarAccess.getGlobalVarDeclAccess().getEOLTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleGlobalVarSpec
entryRuleGlobalVarSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarSpecRule()); }
	 iv_ruleGlobalVarSpec=ruleGlobalVarSpec 
	 { $current=$iv_ruleGlobalVarSpec.current; } 
	 EOF 
;

// Rule GlobalVarSpec
ruleGlobalVarSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGlobalVarSpecAccess().getGlobalVarListParserRuleCall_0()); 
    }
    this_GlobalVarList_0=ruleGlobalVarList
    { 
        $current = $this_GlobalVarList_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarSpecAccess().getVariableGlobalVarParserRuleCall_1_0_0()); 
	    }
		lv_variable_1_0=ruleGlobalVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarSpecRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_1_0, 
        		"com.bichler.iec.Iec.GlobalVar");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarSpecAccess().getLocationLocationParserRuleCall_1_1_0()); 
	    }
		lv_location_2_0=ruleLocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarSpecRule());
	        }
       		set(
       			$current, 
       			"location",
        		lv_location_2_0, 
        		"com.bichler.iec.Iec.Location");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleGlobalVarList
entryRuleGlobalVarList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarListRule()); }
	 iv_ruleGlobalVarList=ruleGlobalVarList 
	 { $current=$iv_ruleGlobalVarList.current; } 
	 EOF 
;

// Rule GlobalVarList
ruleGlobalVarList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarListAccess().getVariablesGlobalVarParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleGlobalVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"com.bichler.iec.Iec.GlobalVar");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGlobalVarListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarListAccess().getVariablesGlobalVarParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleGlobalVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarListRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"com.bichler.iec.Iec.GlobalVar");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGlobalVar
entryRuleGlobalVar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarRule()); }
	 iv_ruleGlobalVar=ruleGlobalVar 
	 { $current=$iv_ruleGlobalVar.current; } 
	 EOF 
;

// Rule GlobalVar
ruleGlobalVar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarAccess().getNameIdentifierParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTaskConfiguration
entryRuleTaskConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskConfigurationRule()); }
	 iv_ruleTaskConfiguration=ruleTaskConfiguration 
	 { $current=$iv_ruleTaskConfiguration.current; } 
	 EOF 
;

// Rule TaskConfiguration
ruleTaskConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TASK' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTaskConfigurationAccess().getTASKKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskConfigurationAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskConfigurationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.bichler.iec.Iec.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskConfigurationAccess().getTaskInitTaskInitializationParserRuleCall_2_0()); 
	    }
		lv_taskInit_2_0=ruleTaskInitialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskConfigurationRule());
	        }
       		set(
       			$current, 
       			"taskInit",
        		lv_taskInit_2_0, 
        		"com.bichler.iec.Iec.TaskInitialization");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTaskInitialization
entryRuleTaskInitialization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskInitializationRule()); }
	 iv_ruleTaskInitialization=ruleTaskInitialization 
	 { $current=$iv_ruleTaskInitialization.current; } 
	 EOF 
;

// Rule TaskInitialization
ruleTaskInitialization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTaskInitializationAccess().getLeftParenthesisKeyword_0());
    }
(	otherlv_1='SINGLE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTaskInitializationAccess().getSINGLEKeyword_1_0());
    }
	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTaskInitializationAccess().getColonEqualsSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskInitializationAccess().getSingleDataSourceParserRuleCall_1_2_0()); 
	    }
		lv_single_3_0=ruleDataSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskInitializationRule());
	        }
       		set(
       			$current, 
       			"single",
        		lv_single_3_0, 
        		"com.bichler.iec.Iec.DataSource");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='INTERVAL' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTaskInitializationAccess().getINTERVALKeyword_2_0());
    }
	otherlv_5=':=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTaskInitializationAccess().getColonEqualsSignKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTaskInitializationAccess().getIntervalDataSourceParserRuleCall_2_2_0()); 
	    }
		lv_interval_6_0=ruleDataSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTaskInitializationRule());
	        }
       		set(
       			$current, 
       			"interval",
        		lv_interval_6_0, 
        		"com.bichler.iec.Iec.DataSource");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='PRIORITY' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTaskInitializationAccess().getPRIORITYKeyword_3());
    }
	otherlv_8=':=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTaskInitializationAccess().getColonEqualsSignKeyword_4());
    }
(
(
		lv_prior_9_0=RULE_INT
		{
			newLeafNode(lv_prior_9_0, grammarAccess.getTaskInitializationAccess().getPriorINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTaskInitializationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"prior",
        		lv_prior_9_0, 
        		"com.bichler.iec.Iec.INT");
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTaskInitializationAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleDataSource
entryRuleDataSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataSourceRule()); }
	 iv_ruleDataSource=ruleDataSource 
	 { $current=$iv_ruleDataSource.current; } 
	 EOF 
;

// Rule DataSource
ruleDataSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataSourceAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataSourceAccess().getDirectVariableParserRuleCall_1()); 
    }
    this_DirectVariable_1=ruleDirectVariable
    { 
        $current = $this_DirectVariable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getNumericLiteralParserRuleCall_0()); 
    }
    this_NumericLiteral_0=ruleNumericLiteral
    { 
        $current = $this_NumericLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getCharacterStringParserRuleCall_1()); 
    }
    this_CharacterString_1=ruleCharacterString
    { 
        $current = $this_CharacterString_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getTimeLiteralParserRuleCall_2()); 
    }
    this_TimeLiteral_2=ruleTimeLiteral
    { 
        $current = $this_TimeLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getBitStringParserRuleCall_3()); 
    }
    this_BitString_3=ruleBitString
    { 
        $current = $this_BitString_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getBooleanParserRuleCall_4()); 
    }
    this_Boolean_4=ruleBoolean
    { 
        $current = $this_Boolean_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	 iv_ruleNumericLiteral=ruleNumericLiteral 
	 { $current=$iv_ruleNumericLiteral.current; } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0()); 
    }
    this_IntegerLiteral_0=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1()); 
    }
    this_RealLiteral_1=ruleRealLiteral
    { 
        $current = $this_RealLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getTypeIntegerTypeParserRuleCall_0_0_0()); 
	    }
		lv_type_0_0=ruleIntegerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"com.bichler.iec.Iec.IntegerType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerLiteralAccess().getNumberSignKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getValueIntegerValueParserRuleCall_1_0()); 
	    }
		lv_value_2_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"com.bichler.iec.Iec.IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRealLiteralAccess().getTypeRealTypeParserRuleCall_0_0_0()); 
	    }
		lv_type_0_0=ruleRealType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealLiteralRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"com.bichler.iec.Iec.RealType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRealLiteralAccess().getNumberSignKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRealLiteralAccess().getValueRealValueParserRuleCall_1_0()); 
	    }
		lv_value_2_0=ruleRealValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"com.bichler.iec.Iec.RealValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); } 
	 iv_ruleIntegerValue=ruleIntegerValue 
	 { $current=$iv_ruleIntegerValue.current.getText(); }  
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntegerValueAccess().getSignedIntegerParserRuleCall_0()); 
    }
    this_SignedInteger_0=ruleSignedInteger    {
		$current.merge(this_SignedInteger_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerValueAccess().getBinaryIntegerParserRuleCall_1()); 
    }
    this_BinaryInteger_1=ruleBinaryInteger    {
		$current.merge(this_BinaryInteger_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerValueAccess().getOctalIntegerParserRuleCall_2()); 
    }
    this_OctalInteger_2=ruleOctalInteger    {
		$current.merge(this_OctalInteger_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerValueAccess().getHexIntegerParserRuleCall_3()); 
    }
    this_HexInteger_3=ruleHexInteger    {
		$current.merge(this_HexInteger_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSignedInteger
entryRuleSignedInteger returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSignedIntegerRule()); } 
	 iv_ruleSignedInteger=ruleSignedInteger 
	 { $current=$iv_ruleSignedInteger.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SignedInteger
ruleSignedInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntegerAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntegerAccess().getHyphenMinusKeyword_0_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getSignedIntegerAccess().getIntegerParserRuleCall_1()); 
    }
    this_Integer_2=ruleInteger    {
		$current.merge(this_Integer_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBinaryInteger
entryRuleBinaryInteger returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getBinaryIntegerRule()); } 
	 iv_ruleBinaryInteger=ruleBinaryInteger 
	 { $current=$iv_ruleBinaryInteger.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule BinaryInteger
ruleBinaryInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
    this_BINT_0=RULE_BINT    {
		$current.merge(this_BINT_0);
    }

    { 
    newLeafNode(this_BINT_0, grammarAccess.getBinaryIntegerAccess().getBINTTerminalRuleCall()); 
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOctalInteger
entryRuleOctalInteger returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getOctalIntegerRule()); } 
	 iv_ruleOctalInteger=ruleOctalInteger 
	 { $current=$iv_ruleOctalInteger.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule OctalInteger
ruleOctalInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
    this_OINT_0=RULE_OINT    {
		$current.merge(this_OINT_0);
    }

    { 
    newLeafNode(this_OINT_0, grammarAccess.getOctalIntegerAccess().getOINTTerminalRuleCall()); 
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleHexInteger
entryRuleHexInteger returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getHexIntegerRule()); } 
	 iv_ruleHexInteger=ruleHexInteger 
	 { $current=$iv_ruleHexInteger.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule HexInteger
ruleHexInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
    this_HINT_0=RULE_HINT    {
		$current.merge(this_HINT_0);
    }

    { 
    newLeafNode(this_HINT_0, grammarAccess.getHexIntegerAccess().getHINTTerminalRuleCall()); 
    }

    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleRealValue
entryRuleRealValue returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getRealValueRule()); } 
	 iv_ruleRealValue=ruleRealValue 
	 { $current=$iv_ruleRealValue.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule RealValue
ruleRealValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealValueAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRealValueAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_FIXED_POINT_2=RULE_FIXED_POINT    {
		$current.merge(this_FIXED_POINT_2);
    }

    { 
    newLeafNode(this_FIXED_POINT_2, grammarAccess.getRealValueAccess().getFIXED_POINTTerminalRuleCall_1()); 
    }
(    this_EXPONENT_3=RULE_EXPONENT    {
		$current.merge(this_EXPONENT_3);
    }

    { 
    newLeafNode(this_EXPONENT_3, grammarAccess.getRealValueAccess().getEXPONENTTerminalRuleCall_2()); 
    }
)?)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCharacterString
entryRuleCharacterString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterStringRule()); }
	 iv_ruleCharacterString=ruleCharacterString 
	 { $current=$iv_ruleCharacterString.current; } 
	 EOF 
;

// Rule CharacterString
ruleCharacterString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_value_0_0=RULE_SINGLE_BYTE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCharacterStringAccess().getValueSINGLE_BYTE_STRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharacterStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"com.bichler.iec.Iec.SINGLE_BYTE_STRING");
	    }

)
)
    |(
(
		lv_value_1_0=RULE_DOUBLE_BYTE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getCharacterStringAccess().getValueDOUBLE_BYTE_STRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharacterStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"com.bichler.iec.Iec.DOUBLE_BYTE_STRING");
	    }

)
))
;





// Entry rule entryRuleBitString
entryRuleBitString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitStringRule()); }
	 iv_ruleBitString=ruleBitString 
	 { $current=$iv_ruleBitString.current; } 
	 EOF 
;

// Rule BitString
ruleBitString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='BYTE#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBitStringAccess().getBYTEKeyword_0_0());
    }

    |	otherlv_1='WORD#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBitStringAccess().getWORDKeyword_0_1());
    }

    |	otherlv_2='DWORD#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBitStringAccess().getDWORDKeyword_0_2());
    }

    |	otherlv_3='LWORD#' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBitStringAccess().getLWORDKeyword_0_3());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitStringAccess().getValueBitStringValueParserRuleCall_1_0()); 
	    }
		lv_value_4_0=ruleBitStringValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitStringRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"com.bichler.iec.Iec.BitStringValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBitStringValue
entryRuleBitStringValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitStringValueRule()); } 
	 iv_ruleBitStringValue=ruleBitStringValue 
	 { $current=$iv_ruleBitStringValue.current.getText(); }  
	 EOF 
;

// Rule BitStringValue
ruleBitStringValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getBitStringValueAccess().getINTTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getBitStringValueAccess().getBinaryIntegerParserRuleCall_1()); 
    }
    this_BinaryInteger_1=ruleBinaryInteger    {
		$current.merge(this_BinaryInteger_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBitStringValueAccess().getOctalIntegerParserRuleCall_2()); 
    }
    this_OctalInteger_2=ruleOctalInteger    {
		$current.merge(this_OctalInteger_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBitStringValueAccess().getHexIntegerParserRuleCall_3()); 
    }
    this_HexInteger_3=ruleHexInteger    {
		$current.merge(this_HexInteger_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); }
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current; } 
	 EOF 
;

// Rule Boolean
ruleBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanAccess().getBooleanAction_0(),
            $current);
    }
)((	otherlv_1='BOOL#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBooleanAccess().getBOOLKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanAccess().getBoolIntIntegerParserRuleCall_1_0_1_0()); 
	    }
		lv_boolInt_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanRule());
	        }
       		set(
       			$current, 
       			"boolInt",
        		lv_boolInt_2_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_true_3_0=	'TRUE' 
    {
        newLeafNode(lv_true_3_0, grammarAccess.getBooleanAccess().getTrueTRUEKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanRule());
	        }
       		setWithLastConsumed($current, "true", true, "TRUE");
	    }

)
)
    |	otherlv_4='FALSE' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBooleanAccess().getFALSEKeyword_1_1_1());
    }
)))
;





// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeLiteralRule()); }
	 iv_ruleTimeLiteral=ruleTimeLiteral 
	 { $current=$iv_ruleTimeLiteral.current; } 
	 EOF 
;

// Rule TimeLiteral
ruleTimeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTimeLiteralAccess().getDurationLiteralParserRuleCall_0()); 
    }
    this_DurationLiteral_0=ruleDurationLiteral
    { 
        $current = $this_DurationLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTimeLiteralAccess().getTimeOfDayLiteralParserRuleCall_1()); 
    }
    this_TimeOfDayLiteral_1=ruleTimeOfDayLiteral
    { 
        $current = $this_TimeOfDayLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTimeLiteralAccess().getDateLiteralParserRuleCall_2()); 
    }
    this_DateLiteral_2=ruleDateLiteral
    { 
        $current = $this_DateLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTimeLiteralAccess().getDateAndTimeLiteralParserRuleCall_3()); 
    }
    this_DateAndTimeLiteral_3=ruleDateAndTimeLiteral
    { 
        $current = $this_DateAndTimeLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDurationLiteral
entryRuleDurationLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDurationLiteralRule()); }
	 iv_ruleDurationLiteral=ruleDurationLiteral 
	 { $current=$iv_ruleDurationLiteral.current; } 
	 EOF 
;

// Rule DurationLiteral
ruleDurationLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='T#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDurationLiteralAccess().getTKeyword_0_0());
    }

    |	otherlv_1='t#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDurationLiteralAccess().getTKeyword_0_1());
    }

    |	otherlv_2='TIME#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDurationLiteralAccess().getTIMEKeyword_0_2());
    }
)(	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDurationLiteralAccess().getHyphenMinusKeyword_1());
    }
)?((
(
		lv_duration_4_0=RULE_DAYS
		{
			newLeafNode(lv_duration_4_0, grammarAccess.getDurationLiteralAccess().getDurationDAYSTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDurationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_4_0, 
        		"com.bichler.iec.Iec.DAYS");
	    }

)
)
    |(
(
		lv_duration_5_0=RULE_HOURS
		{
			newLeafNode(lv_duration_5_0, grammarAccess.getDurationLiteralAccess().getDurationHOURSTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDurationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_5_0, 
        		"com.bichler.iec.Iec.HOURS");
	    }

)
)
    |(
(
		lv_duration_6_0=RULE_MINUTES
		{
			newLeafNode(lv_duration_6_0, grammarAccess.getDurationLiteralAccess().getDurationMINUTESTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDurationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_6_0, 
        		"com.bichler.iec.Iec.MINUTES");
	    }

)
)
    |(
(
		lv_duration_7_0=RULE_SECONDS
		{
			newLeafNode(lv_duration_7_0, grammarAccess.getDurationLiteralAccess().getDurationSECONDSTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDurationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_7_0, 
        		"com.bichler.iec.Iec.SECONDS");
	    }

)
)
    |(
(
		lv_duration_8_0=RULE_MILLISECONDS
		{
			newLeafNode(lv_duration_8_0, grammarAccess.getDurationLiteralAccess().getDurationMILLISECONDSTerminalRuleCall_2_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDurationLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_8_0, 
        		"com.bichler.iec.Iec.MILLISECONDS");
	    }

)
)))
;





// Entry rule entryRuleTimeOfDayLiteral
entryRuleTimeOfDayLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeOfDayLiteralRule()); }
	 iv_ruleTimeOfDayLiteral=ruleTimeOfDayLiteral 
	 { $current=$iv_ruleTimeOfDayLiteral.current; } 
	 EOF 
;

// Rule TimeOfDayLiteral
ruleTimeOfDayLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='TIME_OF_DAY#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimeOfDayLiteralAccess().getTIME_OF_DAYKeyword_0_0());
    }

    |	otherlv_1='TOD#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimeOfDayLiteralAccess().getTODKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeOfDayLiteralAccess().getHourIntegerParserRuleCall_1_0()); 
	    }
		lv_hour_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeOfDayLiteralRule());
	        }
       		set(
       			$current, 
       			"hour",
        		lv_hour_2_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTimeOfDayLiteralAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeOfDayLiteralAccess().getMinuteIntegerParserRuleCall_3_0()); 
	    }
		lv_minute_4_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeOfDayLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_4_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTimeOfDayLiteralAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeOfDayLiteralAccess().getSecondIntegerParserRuleCall_5_0()); 
	    }
		lv_second_6_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeOfDayLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_6_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDateLiteral
entryRuleDateLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateLiteralRule()); }
	 iv_ruleDateLiteral=ruleDateLiteral 
	 { $current=$iv_ruleDateLiteral.current; } 
	 EOF 
;

// Rule DateLiteral
ruleDateLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='DATE#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateLiteralAccess().getDATEKeyword_0_0());
    }

    |	otherlv_1='D#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDateLiteralAccess().getDKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateLiteralAccess().getYearIntegerParserRuleCall_1_0()); 
	    }
		lv_year_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateLiteralRule());
	        }
       		set(
       			$current, 
       			"year",
        		lv_year_2_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDateLiteralAccess().getHyphenMinusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateLiteralAccess().getMonthIntegerParserRuleCall_3_0()); 
	    }
		lv_month_4_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateLiteralRule());
	        }
       		set(
       			$current, 
       			"month",
        		lv_month_4_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDateLiteralAccess().getHyphenMinusKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateLiteralAccess().getDayIntegerParserRuleCall_5_0()); 
	    }
		lv_day_6_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateLiteralRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_6_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDateAndTimeLiteral
entryRuleDateAndTimeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateAndTimeLiteralRule()); }
	 iv_ruleDateAndTimeLiteral=ruleDateAndTimeLiteral 
	 { $current=$iv_ruleDateAndTimeLiteral.current; } 
	 EOF 
;

// Rule DateAndTimeLiteral
ruleDateAndTimeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='DATE_AND_TIME#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDateAndTimeLiteralAccess().getDATE_AND_TIMEKeyword_0_0());
    }

    |	otherlv_1='DT#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDateAndTimeLiteralAccess().getDTKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAndTimeLiteralAccess().getYearIntegerParserRuleCall_1_0()); 
	    }
		lv_year_2_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateAndTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"year",
        		lv_year_2_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDateAndTimeLiteralAccess().getHyphenMinusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAndTimeLiteralAccess().getMonthIntegerParserRuleCall_3_0()); 
	    }
		lv_month_4_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateAndTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"month",
        		lv_month_4_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDateAndTimeLiteralAccess().getHyphenMinusKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAndTimeLiteralAccess().getDayIntegerParserRuleCall_5_0()); 
	    }
		lv_day_6_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateAndTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"day",
        		lv_day_6_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='-' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDateAndTimeLiteralAccess().getHyphenMinusKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAndTimeLiteralAccess().getHourIntegerParserRuleCall_7_0()); 
	    }
		lv_hour_8_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateAndTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"hour",
        		lv_hour_8_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDateAndTimeLiteralAccess().getColonKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAndTimeLiteralAccess().getMinuteIntegerParserRuleCall_9_0()); 
	    }
		lv_minute_10_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateAndTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"minute",
        		lv_minute_10_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDateAndTimeLiteralAccess().getColonKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDateAndTimeLiteralAccess().getSecondIntegerParserRuleCall_11_0()); 
	    }
		lv_second_12_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDateAndTimeLiteralRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_12_0, 
        		"com.bichler.iec.Iec.Integer");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_LETTER_0=RULE_LETTER    {
		$current.merge(this_LETTER_0);
    }

    { 
    newLeafNode(this_LETTER_0, grammarAccess.getIdentifierAccess().getLETTERTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_0=RULE_DIGIT    {
		$current.merge(this_DIGIT_0);
    }

    { 
    newLeafNode(this_DIGIT_0, grammarAccess.getIntegerAccess().getDIGITTerminalRuleCall_0()); 
    }

    |    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_FIELD_SELECTOR : '.' RULE_ID;

RULE_DAYS : RULE_DIGIT+ ('.' RULE_DIGIT+)? 'd' ('_'? RULE_HOURS)?;

RULE_HOURS : RULE_DIGIT+ ('.' RULE_DIGIT+)? 'h' ('_'? RULE_MINUTES)?;

RULE_MINUTES : RULE_DIGIT+ ('.' RULE_DIGIT+)? 'm' ('_'? RULE_SECONDS)?;

RULE_SECONDS : RULE_DIGIT+ ('.' RULE_DIGIT+)? 's' ('_'? RULE_MILLISECONDS)?;

RULE_MILLISECONDS : RULE_DIGIT+ ('.' RULE_DIGIT+)? 'ms';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_DIGIT : ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9');

RULE_ID : (RULE_LETTER|'_' (RULE_LETTER|RULE_DIGIT)) ('_'? (RULE_LETTER|RULE_DIGIT))*;

RULE_BINT : '2#' ('0'|'1') ('_'? ('0'|'1'))*;

RULE_OINT : '8#' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7') ('_'? ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'))*;

RULE_HINT : '16#' ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F') ('_'? ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'))*;

RULE_INT : ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9') ('_'? ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'))*;

RULE_SUB_RANGE : RULE_INT '..' ('+'|'-')? RULE_INT;

RULE_FIXED_POINT : RULE_INT '.' RULE_INT;

RULE_EXPONENT : ('E'|'e') ('+'|'-')? RULE_INT;

RULE_SINGLE_BYTE_STRING : '\'' ('$' ('L'|'N'|'P'|'R'|'T'|'l'|'n'|'p'|'r'|'t'|'\''|'$'|('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'))|~(('$'|'\'')))* '\'';

RULE_DOUBLE_BYTE_STRING : '"' ('$' ('L'|'N'|'P'|'R'|'T'|'l'|'n'|'p'|'r'|'t'|'"'|'$'|('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F') ('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'))|~(('$'|'"')))* '"';

RULE_DIRECT_VARIABLE_ID : '%' ('I'|'Q'|'M') ('NIL'|'X'|'B'|'W'|'D'|'L') RULE_INT ('.' RULE_INT)*;

RULE_EOL : ';';

RULE_MY_NL : ('\r'|'\n');

RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


