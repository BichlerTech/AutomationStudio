/*
 * generated by Xtext
 */
package com.bichler.iec.serializer;

import com.bichler.iec.services.IecGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class IecSyntacticSequencer extends AbstractSyntacticSequencer {

	protected IecGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BitString_BYTEKeyword_0_0_or_DWORDKeyword_0_2_or_LWORDKeyword_0_3_or_WORDKeyword_0_1;
	protected AbstractElementAlias match_DateAndTimeLiteral_DATE_AND_TIMEKeyword_0_0_or_DTKeyword_0_1;
	protected AbstractElementAlias match_DateLiteral_DATEKeyword_0_0_or_DKeyword_0_1;
	protected AbstractElementAlias match_DurationLiteral_HyphenMinusKeyword_1_q;
	protected AbstractElementAlias match_DurationLiteral_TIMEKeyword_0_2_or_TKeyword_0_0_or_TKeyword_0_1;
	protected AbstractElementAlias match_EdgeDeclaration_F_EDGEKeyword_3_1_or_R_EDGEKeyword_3_0;
	protected AbstractElementAlias match_GlobalVarDeclarations___CONSTANTKeyword_1_0_or_RETAINKeyword_1_1__q;
	protected AbstractElementAlias match_InputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q;
	protected AbstractElementAlias match_LocatedVarDeclarations_CONSTANTKeyword_1_0_or_NON_RETAINKeyword_1_2_or_RETAINKeyword_1_1;
	protected AbstractElementAlias match_OutputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q;
	protected AbstractElementAlias match_ProgramConfiguration___NONRETAINKeyword_1_1_or_RETAINKeyword_1_0__q;
	protected AbstractElementAlias match_StringDeclaration_WSTRINGKeyword_2_1_q;
	protected AbstractElementAlias match_TimeOfDayLiteral_TIME_OF_DAYKeyword_0_0_or_TODKeyword_0_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (IecGrammarAccess) access;
		match_BitString_BYTEKeyword_0_0_or_DWORDKeyword_0_2_or_LWORDKeyword_0_3_or_WORDKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBitStringAccess().getBYTEKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getBitStringAccess().getDWORDKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getBitStringAccess().getLWORDKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getBitStringAccess().getWORDKeyword_0_1()));
		match_DateAndTimeLiteral_DATE_AND_TIMEKeyword_0_0_or_DTKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDateAndTimeLiteralAccess().getDATE_AND_TIMEKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDateAndTimeLiteralAccess().getDTKeyword_0_1()));
		match_DateLiteral_DATEKeyword_0_0_or_DKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDateLiteralAccess().getDATEKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDateLiteralAccess().getDKeyword_0_1()));
		match_DurationLiteral_HyphenMinusKeyword_1_q = new TokenAlias(false, true, grammarAccess.getDurationLiteralAccess().getHyphenMinusKeyword_1());
		match_DurationLiteral_TIMEKeyword_0_2_or_TKeyword_0_0_or_TKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDurationLiteralAccess().getTIMEKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getDurationLiteralAccess().getTKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getDurationLiteralAccess().getTKeyword_0_1()));
		match_EdgeDeclaration_F_EDGEKeyword_3_1_or_R_EDGEKeyword_3_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEdgeDeclarationAccess().getF_EDGEKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getEdgeDeclarationAccess().getR_EDGEKeyword_3_0()));
		match_GlobalVarDeclarations___CONSTANTKeyword_1_0_or_RETAINKeyword_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getGlobalVarDeclarationsAccess().getCONSTANTKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getGlobalVarDeclarationsAccess().getRETAINKeyword_1_1()));
		match_InputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getInputDeclarationsAccess().getNON_RETAINKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getInputDeclarationsAccess().getRETAINKeyword_1_0()));
		match_LocatedVarDeclarations_CONSTANTKeyword_1_0_or_NON_RETAINKeyword_1_2_or_RETAINKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLocatedVarDeclarationsAccess().getCONSTANTKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getLocatedVarDeclarationsAccess().getNON_RETAINKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getLocatedVarDeclarationsAccess().getRETAINKeyword_1_1()));
		match_OutputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getOutputDeclarationsAccess().getNON_RETAINKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getOutputDeclarationsAccess().getRETAINKeyword_1_0()));
		match_ProgramConfiguration___NONRETAINKeyword_1_1_or_RETAINKeyword_1_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getProgramConfigurationAccess().getNONRETAINKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getProgramConfigurationAccess().getRETAINKeyword_1_0()));
		match_StringDeclaration_WSTRINGKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getStringDeclarationAccess().getWSTRINGKeyword_2_1());
		match_TimeOfDayLiteral_TIME_OF_DAYKeyword_0_0_or_TODKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTimeOfDayLiteralAccess().getTIME_OF_DAYKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getTimeOfDayLiteralAccess().getTODKeyword_0_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEOLRule())
			return getEOLToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EOL:
	 * 	';';
	 */
	protected String getEOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BitString_BYTEKeyword_0_0_or_DWORDKeyword_0_2_or_LWORDKeyword_0_3_or_WORDKeyword_0_1.equals(syntax))
				emit_BitString_BYTEKeyword_0_0_or_DWORDKeyword_0_2_or_LWORDKeyword_0_3_or_WORDKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DateAndTimeLiteral_DATE_AND_TIMEKeyword_0_0_or_DTKeyword_0_1.equals(syntax))
				emit_DateAndTimeLiteral_DATE_AND_TIMEKeyword_0_0_or_DTKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DateLiteral_DATEKeyword_0_0_or_DKeyword_0_1.equals(syntax))
				emit_DateLiteral_DATEKeyword_0_0_or_DKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DurationLiteral_HyphenMinusKeyword_1_q.equals(syntax))
				emit_DurationLiteral_HyphenMinusKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DurationLiteral_TIMEKeyword_0_2_or_TKeyword_0_0_or_TKeyword_0_1.equals(syntax))
				emit_DurationLiteral_TIMEKeyword_0_2_or_TKeyword_0_0_or_TKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_EdgeDeclaration_F_EDGEKeyword_3_1_or_R_EDGEKeyword_3_0.equals(syntax))
				emit_EdgeDeclaration_F_EDGEKeyword_3_1_or_R_EDGEKeyword_3_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GlobalVarDeclarations___CONSTANTKeyword_1_0_or_RETAINKeyword_1_1__q.equals(syntax))
				emit_GlobalVarDeclarations___CONSTANTKeyword_1_0_or_RETAINKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q.equals(syntax))
				emit_InputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LocatedVarDeclarations_CONSTANTKeyword_1_0_or_NON_RETAINKeyword_1_2_or_RETAINKeyword_1_1.equals(syntax))
				emit_LocatedVarDeclarations_CONSTANTKeyword_1_0_or_NON_RETAINKeyword_1_2_or_RETAINKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q.equals(syntax))
				emit_OutputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProgramConfiguration___NONRETAINKeyword_1_1_or_RETAINKeyword_1_0__q.equals(syntax))
				emit_ProgramConfiguration___NONRETAINKeyword_1_1_or_RETAINKeyword_1_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StringDeclaration_WSTRINGKeyword_2_1_q.equals(syntax))
				emit_StringDeclaration_WSTRINGKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TimeOfDayLiteral_TIME_OF_DAYKeyword_0_0_or_TODKeyword_0_1.equals(syntax))
				emit_TimeOfDayLiteral_TIME_OF_DAYKeyword_0_0_or_TODKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'BYTE#' | 'WORD#' | 'DWORD#' | 'LWORD#'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) value=BitStringValue
	 */
	protected void emit_BitString_BYTEKeyword_0_0_or_DWORDKeyword_0_2_or_LWORDKeyword_0_3_or_WORDKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'DATE_AND_TIME#' | 'DT#'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) year=Integer
	 */
	protected void emit_DateAndTimeLiteral_DATE_AND_TIMEKeyword_0_0_or_DTKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'DATE#' | 'D#'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) year=Integer
	 */
	protected void emit_DateLiteral_DATEKeyword_0_0_or_DKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '-'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('T#' | 't#' | 'TIME#') (ambiguity) duration=DAYS
	 *     (rule start) ('T#' | 't#' | 'TIME#') (ambiguity) duration=HOURS
	 *     (rule start) ('T#' | 't#' | 'TIME#') (ambiguity) duration=MILLISECONDS
	 *     (rule start) ('T#' | 't#' | 'TIME#') (ambiguity) duration=MINUTES
	 *     (rule start) ('T#' | 't#' | 'TIME#') (ambiguity) duration=SECONDS
	 */
	protected void emit_DurationLiteral_HyphenMinusKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'T#' | 't#' | 'TIME#'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '-'? duration=DAYS
	 *     (rule start) (ambiguity) '-'? duration=HOURS
	 *     (rule start) (ambiguity) '-'? duration=MILLISECONDS
	 *     (rule start) (ambiguity) '-'? duration=MINUTES
	 *     (rule start) (ambiguity) '-'? duration=SECONDS
	 */
	protected void emit_DurationLiteral_TIMEKeyword_0_2_or_TKeyword_0_0_or_TKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'R_EDGE' | 'F_EDGE'
	 *
	 * This ambiguous syntax occurs at:
	 *     var1List=Var1List ':' 'BOOL' (ambiguity) (rule end)
	 */
	protected void emit_EdgeDeclaration_F_EDGEKeyword_3_1_or_R_EDGEKeyword_3_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('CONSTANT' | 'RETAIN')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'VAR_GLOBAL' (ambiguity) globalVarDecl+=GlobalVarDecl
	 */
	protected void emit_GlobalVarDeclarations___CONSTANTKeyword_1_0_or_RETAINKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('RETAIN' | 'NON_RETAIN')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'VAR_INPUT' (ambiguity) declarations+=InputDeclaration
	 */
	protected void emit_InputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'CONSTANT' | 'RETAIN' | 'NON_RETAIN'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'VAR' (ambiguity) locatedVarDeclaration+=LocatedVarDeclaration
	 */
	protected void emit_LocatedVarDeclarations_CONSTANTKeyword_1_0_or_NON_RETAINKeyword_1_2_or_RETAINKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('RETAIN' | 'NON_RETAIN')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'VAR_OUTPUT' (ambiguity) initDecls+=VarInitDecl
	 */
	protected void emit_OutputDeclarations___NON_RETAINKeyword_1_1_or_RETAINKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('RETAIN' | 'NONRETAIN')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'PROGRAM' (ambiguity) name=Identifier
	 */
	protected void emit_ProgramConfiguration___NONRETAINKeyword_1_1_or_RETAINKeyword_1_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'WSTRING'?
	 *
	 * This ambiguous syntax occurs at:
	 *     derivedType=DerivedType ':' (ambiguity) '[' size=Integer
	 */
	protected void emit_StringDeclaration_WSTRINGKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'TIME_OF_DAY#' | 'TOD#'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) hour=Integer
	 */
	protected void emit_TimeOfDayLiteral_TIME_OF_DAYKeyword_0_0_or_TODKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
