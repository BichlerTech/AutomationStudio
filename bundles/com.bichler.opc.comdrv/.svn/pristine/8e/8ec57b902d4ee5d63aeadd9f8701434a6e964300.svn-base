package com.bichler.opc.comdrv;

import org.opcfoundation.ua.builtintypes.DataValue;
import org.opcfoundation.ua.builtintypes.NodeId;
import org.opcfoundation.ua.builtintypes.StatusCode;
import org.opcfoundation.ua.core.ReadValueId;
import org.opcfoundation.ua.core.TimestampsToReturn;

public interface IReadListener
{
  /**
   * Prepares a node for a read request. We set flags to the node if it should
   * be red or not.
   * 
   * @param nodeId
   *          Nodeid to prepare for read.
   * @return true if the nodeid was found and could be set otherwise false.
   */
  boolean prepareRead(IOPCServerSession session, NodeId nodeId);

  /**
   * Handles an asyncron read request for a given nodeid. This function must be
   * implemented non blocking.
   * 
   * @param nodeId
   *          Nodeid which should be written.
   * @param senderState
   *          State of the sender for further use.
   * @return Response of this read request.
   */
  StatusCode asyncReadValue(IOPCServerSession session, NodeId nodeId, long senderState);

  /**
   * Handles an syncron read request for a given nodeid.
   * 
   * @param nodeId
   *          Nodeid which should be written.
   * @param senderState
   *          State of the sender for further use.
   * @return Response of this read request.
   */
  DataValue syncReadValue(IOPCServerSession session, NodeId nodeId, long senderState);

  /**
   * read value or attribute from underlying system, it is not required, that
   * the node exists in address space
   * 
   * @param readValueId
   * @param maxAge
   * @param timestampsToReturn
   * @param senderState
   * @return
   */
  DataValue read(IOPCServerSession session, ReadValueId readValueId, Double maxAge,
      TimestampsToReturn timestampsToReturn, long senderState);
}
